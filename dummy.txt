    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/examples/main`
Doc parsing cpp/example.cpp
cpp/example.cpp
Entry 0
Function: FilteredFunctionbool QWidget::hasEditFocus() const

QDoc:
/*!
    Returns \c true if this widget currently has edit focus; otherwise false.

    This feature is only available in Qt for Embedded Linux.

    \sa setEditFocus(), QApplication::keypadNavigationEnabled()
*/
bool QWidget::hasEditFocus() const

Rustdoc:

Returns `true` if this widget currently has edit focus; otherwise false.

This feature is only available in Qt for Embedded Linux.

**See also:** FilteredLinkSeeAlsosetEditFocus()
FilteredLinkSeeAlsoQApplication::keypadNavigationEnabled()

Entry 1
Function: FilteredFunctionvoid QWidget::setEditFocus(bool enable)

QDoc:
/*!
    \fn void QWidget::setEditFocus(bool enable)

    If \a enable is true, make this widget have edit focus, in which
    case Qt::Key_Up and Qt::Key_Down will be delivered to the widget
    normally; otherwise, Qt::Key_Up and Qt::Key_Down are used to
    change focus.

    This feature is only available in Qt for Embedded Linux.

    \sa hasEditFocus(), QApplication::keypadNavigationEnabled()
*/
void QWidget::setEditFocus(bool on)

Rustdoc:

If *enable* is true, make this widget have edit focus, in which
case Qt::Key_Up and Qt::Key_Down will be delivered to the widget
normally; otherwise, Qt::Key_Up and Qt::Key_Down are used to
change focus.

This feature is only available in Qt for Embedded Linux.

**See also:** FilteredLinkSeeAlsohasEditFocus()
FilteredLinkSeeAlsoQApplication::keypadNavigationEnabled()

Entry 2
Brief: whether the widget background is filled automatically
Property: QWidget::autoFillBackground

QDoc:
/*!
    \property QWidget::autoFillBackground
    \brief whether the widget background is filled automatically
    \since 4.1

    If enabled, this property will cause Qt to fill the background of the
    widget before invoking the paint event. The color used is defined by the
    QPalette::Window color role from the widget's \l{QPalette}{palette}.

    In addition, Windows are always filled with QPalette::Window, unless the
    WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.

    This property cannot be turned off (i.e., set to false) if a widget's
    parent has a static gradient for its background.

    \warning Use this property with caution in conjunction with
    \l{Qt Style Sheets}. When a widget has a style sheet with a valid
    background or a border-image, this property is automatically disabled.

    By default, this property is \c false.

    \sa Qt::WA_OpaquePaintEvent, Qt::WA_NoSystemBackground,
    {QWidget#Transparency and Double Buffering}{Transparency and Double Buffering}
*/
bool QWidget::autoFillBackground() const

Rustdoc:

If enabled, this property will cause Qt to fill the background of the
widget before invoking the paint event. The color used is defined by the
QPalette::Window color role from the widget's [FilteredLinkNamepalette](FilteredLinkUrlQPalette)
.

In addition, Windows are always filled with QPalette::Window, unless the
WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.

This property cannot be turned off (i.e., set to false) if a widget's
parent has a static gradient for its background.

**Warning**: Use this property with caution in conjunction with
[FilteredLinkNameQt Style Sheets](FilteredLinkUrlQt%20Style%20Sheets)
. When a widget has a style sheet with a valid
background or a border-image, this property is automatically disabled.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsoQt::WA_OpaquePaintEvent
FilteredLinkSeeAlsoQt::WA_NoSystemBackground
FilteredLinkSeeAlso{QWidget#Transparency and Double Buffering}{Transparency and Double Buffering}

Entry 3
Module: QtWidgets
Brief: The QWidget class is the base class of all user interface objects.
Class: QWidget

QDoc:
/*!
    \class QWidget
    \brief The QWidget class is the base class of all user interface objects.

    \ingroup basicwidgets
    \inmodule QtWidgets

    The widget is the atom of the user interface: it receives mouse, keyboard
    and other events from the window system, and paints a representation of
    itself on the screen. Every widget is rectangular, and they are sorted in a
    Z-order. A widget is clipped by its parent and by the widgets in front of
    it.

    A widget that is not embedded in a parent widget is called a window.
    Usually, windows have a frame and a title bar, although it is also possible
    to create windows without such decoration using suitable
    \l{Qt::WindowFlags}{window flags}). In Qt, QMainWindow and the various
    subclasses of QDialog are the most common window types.

    Every widget's constructor accepts one or two standard arguments:

    \list 1
        \li  \c{QWidget *parent = 0} is the parent of the new widget. If it is 0
            (the default), the new widget will be a window. If not, it will be
            a child of \e parent, and be constrained by \e parent's geometry
            (unless you specify Qt::Window as window flag).
        \li  \c{Qt::WindowFlags f = 0} (where available) sets the window flags;
            the default is suitable for almost all widgets, but to get, for
            example, a window without a window system frame, you must use
            special flags.
    \endlist

    QWidget has many member functions, but some of them have little direct
    functionality; for example, QWidget has a font property, but never uses
    this itself. There are many subclasses which provide real functionality,
    such as QLabel, QPushButton, QListWidget, and QTabWidget.


    \section1 Top-Level and Child Widgets

    A widget without a parent widget is always an independent window (top-level
    widget). For these widgets, setWindowTitle() and setWindowIcon() set the
    title bar and icon respectively.

    Non-window widgets are child widgets, displayed within their parent
    widgets. Most widgets in Qt are mainly useful as child widgets. For
    example, it is possible to display a button as a top-level window, but most
    people prefer to put their buttons inside other widgets, such as QDialog.

    \image parent-child-widgets.png A parent widget containing various child widgets.

    The diagram above shows a QGroupBox widget being used to hold various child
    widgets in a layout provided by QGridLayout. The QLabel child widgets have
    been outlined to indicate their full sizes.

    If you want to use a QWidget to hold child widgets you will usually want to
    add a layout to the parent QWidget. See \l{Layout Management} for more
    information.


    \section1 Composite Widgets

    When a widget is used as a container to group a number of child widgets, it
    is known as a composite widget. These can be created by constructing a
    widget with the required visual properties - a QFrame, for example - and
    adding child widgets to it, usually managed by a layout. The above diagram
    shows such a composite widget that was created using Qt Designer.

    Composite widgets can also be created by subclassing a standard widget,
    such as QWidget or QFrame, and adding the necessary layout and child
    widgets in the constructor of the subclass. Many of the \l{Qt Widgets Examples}
    {examples provided with Qt} use this approach, and it is also covered in
    the Qt \l{Tutorials}.


    \section1 Custom Widgets and Painting

    Since QWidget is a subclass of QPaintDevice, subclasses can be used to
    display custom content that is composed using a series of painting
    operations with an instance of the QPainter class. This approach contrasts
    with the canvas-style approach used by the \l{Graphics View}
    {Graphics View Framework} where items are added to a scene by the
    application and are rendered by the framework itself.

    Each widget performs all painting operations from within its paintEvent()
    function. This is called whenever the widget needs to be redrawn, either
    as a result of some external change or when requested by the application.

    The \l{widgets/analogclock}{Analog Clock example} shows how a simple widget
    can handle paint events.


    \section1 Size Hints and Size Policies

    When implementing a new widget, it is almost always useful to reimplement
    sizeHint() to provide a reasonable default size for the widget and to set
    the correct size policy with setSizePolicy().

    By default, composite widgets which do not provide a size hint will be
    sized according to the space requirements of their child widgets.

    The size policy lets you supply good default behavior for the layout
    management system, so that other widgets can contain and manage yours
    easily. The default size policy indicates that the size hint represents
    the preferred size of the widget, and this is often good enough for many
    widgets.

    \note The size of top-level widgets are constrained to 2/3 of the desktop's
    height and width. You can resize() the widget manually if these bounds are
    inadequate.


    \section1 Events

    Widgets respond to events that are typically caused by user actions. Qt
    delivers events to widgets by calling specific event handler functions with
    instances of QEvent subclasses containing information about each event.

    If your widget only contains child widgets, you probably do not need to
    implement any event handlers. If you want to detect a mouse click in a
    child widget call the child's underMouse() function inside the widget's
    mousePressEvent().

    The \l{widgets/scribble}{Scribble example} implements a wider set of
    events to handle mouse movement, button presses, and window resizing.

    You will need to supply the behavior and content for your own widgets, but
    here is a brief overview of the events that are relevant to QWidget,
    starting with the most common ones:

    \list
        \li  paintEvent() is called whenever the widget needs to be repainted.
            Every widget displaying custom content must implement it. Painting
            using a QPainter can only take place in a paintEvent() or a
            function called by a paintEvent().
        \li  resizeEvent() is called when the widget has been resized.
        \li  mousePressEvent() is called when a mouse button is pressed while
            the mouse cursor is inside the widget, or when the widget has
            grabbed the mouse using grabMouse(). Pressing the mouse without
            releasing it is effectively the same as calling grabMouse().
        \li  mouseReleaseEvent() is called when a mouse button is released. A
            widget receives mouse release events when it has received the
            corresponding mouse press event. This means that if the user
            presses the mouse inside \e your widget, then drags the mouse
            somewhere else before releasing the mouse button, \e your widget
            receives the release event. There is one exception: if a popup menu
            appears while the mouse button is held down, this popup immediately
            steals the mouse events.
        \li  mouseDoubleClickEvent() is called when the user double-clicks in
            the widget. If the user double-clicks, the widget receives a mouse
            press event, a mouse release event, (a mouse click event,) a second
            mouse press, this event and finally a second mouse release event.
            (Some mouse move events may also be
            received if the mouse is not held steady during this operation.) It
            is \e{not possible} to distinguish a click from a double-click
            until the second click arrives. (This is one reason why most GUI
            books recommend that double-clicks be an extension of
            single-clicks, rather than trigger a different action.)
    \endlist

    Widgets that accept keyboard input need to reimplement a few more event
    handlers:

    \list
        \li  keyPressEvent() is called whenever a key is pressed, and again when
            a key has been held down long enough for it to auto-repeat. The
            \uicontrol Tab and \uicontrol Shift+Tab keys are only passed to the widget if
            they are not used by the focus-change mechanisms. To force those
            keys to be processed by your widget, you must reimplement
            QWidget::event().
        \li  focusInEvent() is called when the widget gains keyboard focus
            (assuming you have called setFocusPolicy()). Well-behaved widgets
            indicate that they own the keyboard focus in a clear but discreet
            way.
        \li  focusOutEvent() is called when the widget loses keyboard focus.
    \endlist

    You may be required to also reimplement some of the less common event
    handlers:

    \list
        \li  mouseMoveEvent() is called whenever the mouse moves while a mouse
            button is held down. This can be useful during drag and drop
            operations. If you call \l{setMouseTracking()}{setMouseTracking}(true),
            you get mouse move events even when no buttons are held down.
            (See also the \l{Drag and Drop} guide.)
        \li  keyReleaseEvent() is called whenever a key is released and while it
            is held down (if the key is auto-repeating). In that case, the
            widget will receive a pair of key release and key press event for
            every repeat. The \uicontrol Tab and \uicontrol Shift+Tab keys are only passed
            to the widget if they are not used by the focus-change mechanisms.
            To force those keys to be processed by your widget, you must
            reimplement QWidget::event().
        \li  wheelEvent() is called whenever the user turns the mouse wheel
            while the widget has the focus.
        \li  enterEvent() is called when the mouse enters the widget's screen
            space. (This excludes screen space owned by any of the widget's
            children.)
        \li  leaveEvent() is called when the mouse leaves the widget's screen
            space. If the mouse enters a child widget it will not cause a
            leaveEvent().
        \li  moveEvent() is called when the widget has been moved relative to
            its parent.
        \li  closeEvent() is called when the user closes the widget (or when
            close() is called).
    \endlist

    There are also some rather obscure events described in the documentation
    for QEvent::Type. To handle these events, you need to reimplement event()
    directly.

    The default implementation of event() handles \uicontrol Tab and \uicontrol Shift+Tab
    (to move the keyboard focus), and passes on most of the other events to
    one of the more specialized handlers above.

    Events and the mechanism used to deliver them are covered in
    \l{The Event System}.

    \section1 Groups of Functions and Properties

    \table
    \header \li Context \li Functions and Properties

    \row \li Window functions \li
        show(),
        hide(),
        raise(),
        lower(),
        close().

    \row \li Top-level windows \li
        \l windowModified, \l windowTitle, \l windowIcon,
        \l isActiveWindow, activateWindow(), \l minimized, showMinimized(),
        \l maximized, showMaximized(), \l fullScreen, showFullScreen(),
        showNormal().

    \row \li Window contents \li
        update(),
        repaint(),
        scroll().

    \row \li Geometry \li
        \l pos, x(), y(), \l rect, \l size, width(), height(), move(), resize(),
        \l sizePolicy, sizeHint(), minimumSizeHint(),
        updateGeometry(), layout(),
        \l frameGeometry, \l geometry, \l childrenRect, \l childrenRegion,
        adjustSize(),
        mapFromGlobal(), mapToGlobal(),
        mapFromParent(), mapToParent(),
        \l maximumSize, \l minimumSize, \l sizeIncrement,
        \l baseSize, setFixedSize()

    \row \li Mode \li
        \l visible, isVisibleTo(),
        \l enabled, isEnabledTo(),
        \l modal,
        isWindow(),
        \l mouseTracking,
        \l updatesEnabled,
        visibleRegion().

    \row \li Look and feel \li
        style(),
        setStyle(),
        \l styleSheet,
        \l cursor,
        \l font,
        \l palette,
        backgroundRole(), setBackgroundRole(),
        fontInfo(), fontMetrics().

    \row \li Keyboard focus functions \li
        \l focus, \l focusPolicy,
        setFocus(), clearFocus(), setTabOrder(), setFocusProxy(),
        focusNextChild(), focusPreviousChild().

    \row \li Mouse and keyboard grabbing \li
        grabMouse(), releaseMouse(),
        grabKeyboard(), releaseKeyboard(),
        mouseGrabber(), keyboardGrabber().

    \row \li Event handlers \li
        event(),
        mousePressEvent(),
        mouseReleaseEvent(),
        mouseDoubleClickEvent(),
        mouseMoveEvent(),
        keyPressEvent(),
        keyReleaseEvent(),
        focusInEvent(),
        focusOutEvent(),
        wheelEvent(),
        enterEvent(),
        leaveEvent(),
        paintEvent(),
        moveEvent(),
        resizeEvent(),
        closeEvent(),
        dragEnterEvent(),
        dragMoveEvent(),
        dragLeaveEvent(),
        dropEvent(),
        childEvent(),
        showEvent(),
        hideEvent(),
        customEvent().
        changeEvent(),

    \row \li System functions \li
        parentWidget(), window(), setParent(), winId(),
        find(), metric().

    \row \li Context menu \li
       contextMenuPolicy, contextMenuEvent(),
       customContextMenuRequested(), actions()

    \row \li Interactive help \li
        setToolTip(), setWhatsThis()

    \endtable


    \section1 Widget Style Sheets

    In addition to the standard widget styles for each platform, widgets can
    also be styled according to rules specified in a \l{styleSheet}
    {style sheet}. This feature enables you to customize the appearance of
    specific widgets to provide visual cues to users about their purpose. For
    example, a button could be styled in a particular way to indicate that it
    performs a destructive action.

    The use of widget style sheets is described in more detail in the
    \l{Qt Style Sheets} document.


    \section1 Transparency and Double Buffering

    Since Qt 4.0, QWidget automatically double-buffers its painting, so there
    is no need to write double-buffering code in paintEvent() to avoid
    flicker.

    Since Qt 4.1, the Qt::WA_ContentsPropagated widget attribute has been
    deprecated. Instead, the contents of parent widgets are propagated by
    default to each of their children as long as Qt::WA_PaintOnScreen is not
    set. Custom widgets can be written to take advantage of this feature by
    updating irregular regions (to create non-rectangular child widgets), or
    painting with colors that have less than full alpha component. The
    following diagram shows how attributes and properties of a custom widget
    can be fine-tuned to achieve different effects.

    \image propagation-custom.png

    In the above diagram, a semi-transparent rectangular child widget with an
    area removed is constructed and added to a parent widget (a QLabel showing
    a pixmap). Then, different properties and widget attributes are set to
    achieve different effects:

    \list
        \li  The left widget has no additional properties or widget attributes
            set. This default state suits most custom widgets using
            transparency, are irregularly-shaped, or do not paint over their
            entire area with an opaque brush.
        \li  The center widget has the \l autoFillBackground property set. This
            property is used with custom widgets that rely on the widget to
            supply a default background, and do not paint over their entire
            area with an opaque brush.
        \li  The right widget has the Qt::WA_OpaquePaintEvent widget attribute
            set. This indicates that the widget will paint over its entire area
            with opaque colors. The widget's area will initially be
            \e{uninitialized}, represented in the diagram with a red diagonal
            grid pattern that shines through the overpainted area. The
            Qt::WA_OpaquePaintArea attribute is useful for widgets that need to
            paint their own specialized contents quickly and do not need a
            default filled background.
    \endlist

    To rapidly update custom widgets with simple background colors, such as
    real-time plotting or graphing widgets, it is better to define a suitable
    background color (using setBackgroundRole() with the
    QPalette::Window role), set the \l autoFillBackground property, and only
    implement the necessary drawing functionality in the widget's paintEvent().

    To rapidly update custom widgets that constantly paint over their entire
    areas with opaque content, e.g., video streaming widgets, it is better to
    set the widget's Qt::WA_OpaquePaintEvent, avoiding any unnecessary overhead
    associated with repainting the widget's background.

    If a widget has both the Qt::WA_OpaquePaintEvent widget attribute \e{and}
    the \l autoFillBackground property set, the Qt::WA_OpaquePaintEvent
    attribute takes precedence. Depending on your requirements, you should
    choose either one of them.

    Since Qt 4.1, the contents of parent widgets are also propagated to
    standard Qt widgets. This can lead to some unexpected results if the
    parent widget is decorated in a non-standard way, as shown in the diagram
    below.

    \image propagation-standard.png

    The scope for customizing the painting behavior of standard Qt widgets,
    without resorting to subclassing, is slightly less than that possible for
    custom widgets. Usually, the desired appearance of a standard widget can be
    achieved by setting its \l autoFillBackground property.


    \section1 Creating Translucent Windows

    Since Qt 4.5, it has been possible to create windows with translucent regions
    on window systems that support compositing.

    To enable this feature in a top-level widget, set its Qt::WA_TranslucentBackground
    attribute with setAttribute() and ensure that its background is painted with
    non-opaque colors in the regions you want to be partially transparent.

    Platform notes:

    \list
    \li X11: This feature relies on the use of an X server that supports ARGB visuals
    and a compositing window manager.
    \li Windows: The widget needs to have the Qt::FramelessWindowHint window flag set
    for the translucency to work.
    \endlist


    \section1 Native Widgets vs Alien Widgets

    Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing
    system. They do not have a native window handle associated with them. This
    feature significantly speeds up widget painting, resizing, and removes flicker.

    Should you require the old behavior with native windows, you can choose
    one of the following options:

    \list 1
        \li  Use the \c{QT_USE_NATIVE_WINDOWS=1} in your environment.
        \li  Set the Qt::AA_NativeWindows attribute on your application. All
            widgets will be native widgets.
        \li  Set the Qt::WA_NativeWindow attribute on widgets: The widget itself
            and all of its ancestors will become native (unless
            Qt::WA_DontCreateNativeAncestors is set).
        \li  Call QWidget::winId to enforce a native window (this implies 3).
        \li  Set the Qt::WA_PaintOnScreen attribute to enforce a native window
            (this implies 3).
    \endlist

    \sa QEvent, QPainter, QGridLayout, QBoxLayout

*/

Rustdoc:

The widget is the atom of the user interface: it receives mouse, keyboard
and other events from the window system, and paints a representation of
itself on the screen. Every widget is rectangular, and they are sorted in a
Z-order. A widget is clipped by its parent and by the widgets in front of
it.

A widget that is not embedded in a parent widget is called a window.
Usually, windows have a frame and a title bar, although it is also possible
to create windows without such decoration using suitable
[FilteredLinkNamewindow flags](FilteredLinkUrlQt::WindowFlags)
). In Qt, QMainWindow and the various
subclasses of QDialog are the most common window types.

Every widget's constructor accepts one or two standard arguments:

* `QWidget *parent = 0` is the parent of the new widget. If it is 0 (the default), the new widget will be a window. If not, it will be a child of *parent,* and be constrained by *parent's* geometry (unless you specify Qt::Window as window flag).
* `Qt::WindowFlags f = 0` (where available) sets the window flags; the default is suitable for almost all widgets, but to get, for example, a window without a window system frame, you must use special flags.

QWidget has many member functions, but some of them have little direct
functionality; for example, QWidget has a font property, but never uses
this itself. There are many subclasses which provide real functionality,
such as QLabel, QPushButton, QListWidget, and QTabWidget.

# Top-Level and Child Widgets

A widget without a parent widget is always an independent window (top-level
widget). For these widgets, setWindowTitle() and setWindowIcon() set the
title bar and icon respectively.

Non-window widgets are child widgets, displayed within their parent
widgets. Most widgets in Qt are mainly useful as child widgets. For
example, it is possible to display a button as a top-level window, but most
people prefer to put their buttons inside other widgets, such as QDialog.

![A parent widget containing various child widgets.](parent-child-widgets.png)

The diagram above shows a QGroupBox widget being used to hold various child
widgets in a layout provided by QGridLayout. The QLabel child widgets have
been outlined to indicate their full sizes.

If you want to use a QWidget to hold child widgets you will usually want to
add a layout to the parent QWidget. See [FilteredLinkNameLayout Management](FilteredLinkUrlLayout%20Management)
for more
information.

# Composite Widgets

When a widget is used as a container to group a number of child widgets, it
is known as a composite widget. These can be created by constructing a
widget with the required visual properties - a QFrame, for example - and
adding child widgets to it, usually managed by a layout. The above diagram
shows such a composite widget that was created using Qt Designer.

Composite widgets can also be created by subclassing a standard widget,
such as QWidget or QFrame, and adding the necessary layout and child
widgets in the constructor of the subclass. Many of the [FilteredLinkNameexamples provided with Qt](FilteredLinkUrlQt%20Widgets%20Examples)
use this approach, and it is also covered in
the Qt [FilteredLinkNameTutorials](FilteredLinkUrlTutorials)
.

# Custom Widgets and Painting

Since QWidget is a subclass of QPaintDevice, subclasses can be used to
display custom content that is composed using a series of painting
operations with an instance of the QPainter class. This approach contrasts
with the canvas-style approach used by the [FilteredLinkNameGraphics View Framework](FilteredLinkUrlGraphics%20View)
where items are added to a scene by the
application and are rendered by the framework itself.

Each widget performs all painting operations from within its paintEvent()
function. This is called whenever the widget needs to be redrawn, either
as a result of some external change or when requested by the application.

The [FilteredLinkNameAnalog Clock example](FilteredLinkUrlwidgets/analogclock)
shows how a simple widget
can handle paint events.

# Size Hints and Size Policies

When implementing a new widget, it is almost always useful to reimplement
sizeHint() to provide a reasonable default size for the widget and to set
the correct size policy with setSizePolicy().

By default, composite widgets which do not provide a size hint will be
sized according to the space requirements of their child widgets.

The size policy lets you supply good default behavior for the layout
management system, so that other widgets can contain and manage yours
easily. The default size policy indicates that the size hint represents
the preferred size of the widget, and this is often good enough for many
widgets.

**Note**: The size of top-level widgets are constrained to 2/3 of the desktop's
height and width. You can resize() the widget manually if these bounds are
inadequate.

# Events

Widgets respond to events that are typically caused by user actions. Qt
delivers events to widgets by calling specific event handler functions with
instances of QEvent subclasses containing information about each event.

If your widget only contains child widgets, you probably do not need to
implement any event handlers. If you want to detect a mouse click in a
child widget call the child's underMouse() function inside the widget's
mousePressEvent().

The [FilteredLinkNameScribble example](FilteredLinkUrlwidgets/scribble)
implements a wider set of
events to handle mouse movement, button presses, and window resizing.

You will need to supply the behavior and content for your own widgets, but
here is a brief overview of the events that are relevant to QWidget,
starting with the most common ones:

* paintEvent() is called whenever the widget needs to be repainted. Every widget displaying custom content must implement it. Painting using a QPainter can only take place in a paintEvent() or a function called by a paintEvent().
* resizeEvent() is called when the widget has been resized.
* mousePressEvent() is called when a mouse button is pressed while the mouse cursor is inside the widget, or when the widget has grabbed the mouse using grabMouse(). Pressing the mouse without releasing it is effectively the same as calling grabMouse().
* mouseReleaseEvent() is called when a mouse button is released. A widget receives mouse release events when it has received the corresponding mouse press event. This means that if the user presses the mouse inside *your* widget, then drags the mouse somewhere else before releasing the mouse button, *your* widget receives the release event. There is one exception: if a popup menu appears while the mouse button is held down, this popup immediately steals the mouse events.
* mouseDoubleClickEvent() is called when the user double-clicks in the widget. If the user double-clicks, the widget receives a mouse press event, a mouse release event, (a mouse click event,) a second mouse press, this event and finally a second mouse release event. (Some mouse move events may also be received if the mouse is not held steady during this operation.) It is *not possible* to distinguish a click from a double-click until the second click arrives. (This is one reason why most GUI books recommend that double-clicks be an extension of single-clicks, rather than trigger a different action.)

Widgets that accept keyboard input need to reimplement a few more event
handlers:

* keyPressEvent() is called whenever a key is pressed, and again when a key has been held down long enough for it to auto-repeat. The **Tab** and **Shift+Tab** keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement QWidget::event().
* focusInEvent() is called when the widget gains keyboard focus (assuming you have called setFocusPolicy()). Well-behaved widgets indicate that they own the keyboard focus in a clear but discreet way.
* focusOutEvent() is called when the widget loses keyboard focus.

You may be required to also reimplement some of the less common event
handlers:

* mouseMoveEvent() is called whenever the mouse moves while a mouse button is held down. This can be useful during drag and drop operations. If you call [FilteredLinkNamesetMouseTracking](FilteredLinkUrlsetMouseTracking())
(true), you get mouse move events even when no buttons are held down. (See also the [FilteredLinkNameDrag and Drop](FilteredLinkUrlDrag%20and%20Drop)
guide.)
* keyReleaseEvent() is called whenever a key is released and while it is held down (if the key is auto-repeating). In that case, the widget will receive a pair of key release and key press event for every repeat. The **Tab** and **Shift+Tab** keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement QWidget::event().
* wheelEvent() is called whenever the user turns the mouse wheel while the widget has the focus.
* enterEvent() is called when the mouse enters the widget's screen space. (This excludes screen space owned by any of the widget's children.)
* leaveEvent() is called when the mouse leaves the widget's screen space. If the mouse enters a child widget it will not cause a leaveEvent().
* moveEvent() is called when the widget has been moved relative to its parent.
* closeEvent() is called when the user closes the widget (or when close() is called).

There are also some rather obscure events described in the documentation
for QEvent::Type. To handle these events, you need to reimplement event()
directly.

The default implementation of event() handles **Tab** and **Shift+Tab**
(to move the keyboard focus), and passes on most of the other events to
one of the more specialized handlers above.

Events and the mechanism used to deliver them are covered in
[FilteredLinkNameThe Event System](FilteredLinkUrlThe%20Event%20System)
.

# Groups of Functions and Properties

* Context
* Functions and Properties
* Window functions
* show(), hide(), raise(), lower(), close().
* Top-level windows
* [FilteredLinkNamewindowModified,](FilteredLinkUrlwindowModified,)
[FilteredLinkNamewindowTitle,](FilteredLinkUrlwindowTitle,)
[FilteredLinkNamewindowIcon,](FilteredLinkUrlwindowIcon,)
[FilteredLinkNameisActiveWindow,](FilteredLinkUrlisActiveWindow,)
activateWindow(), [FilteredLinkNameminimized,](FilteredLinkUrlminimized,)
showMinimized(), [FilteredLinkNamemaximized,](FilteredLinkUrlmaximized,)
showMaximized(), [FilteredLinkNamefullScreen,](FilteredLinkUrlfullScreen,)
showFullScreen(), showNormal().
* Window contents
* update(), repaint(), scroll().
* Geometry
* [FilteredLinkNamepos,](FilteredLinkUrlpos,)
x(), y(), [FilteredLinkNamerect,](FilteredLinkUrlrect,)
[FilteredLinkNamesize,](FilteredLinkUrlsize,)
width(), height(), move(), resize(), [FilteredLinkNamesizePolicy,](FilteredLinkUrlsizePolicy,)
sizeHint(), minimumSizeHint(), updateGeometry(), layout(), [FilteredLinkNameframeGeometry,](FilteredLinkUrlframeGeometry,)
[FilteredLinkNamegeometry,](FilteredLinkUrlgeometry,)
[FilteredLinkNamechildrenRect,](FilteredLinkUrlchildrenRect,)
[FilteredLinkNamechildrenRegion,](FilteredLinkUrlchildrenRegion,)
adjustSize(), mapFromGlobal(), mapToGlobal(), mapFromParent(), mapToParent(), [FilteredLinkNamemaximumSize,](FilteredLinkUrlmaximumSize,)
[FilteredLinkNameminimumSize,](FilteredLinkUrlminimumSize,)
[FilteredLinkNamesizeIncrement,](FilteredLinkUrlsizeIncrement,)
[FilteredLinkNamebaseSize,](FilteredLinkUrlbaseSize,)
setFixedSize()
* Mode
* [FilteredLinkNamevisible,](FilteredLinkUrlvisible,)
isVisibleTo(), [FilteredLinkNameenabled,](FilteredLinkUrlenabled,)
isEnabledTo(), [FilteredLinkNamemodal,](FilteredLinkUrlmodal,)
isWindow(), [FilteredLinkNamemouseTracking,](FilteredLinkUrlmouseTracking,)
[FilteredLinkNameupdatesEnabled,](FilteredLinkUrlupdatesEnabled,)
visibleRegion().
* Look and feel
* style(), setStyle(), [FilteredLinkNamestyleSheet,](FilteredLinkUrlstyleSheet,)
[FilteredLinkNamecursor,](FilteredLinkUrlcursor,)
[FilteredLinkNamefont,](FilteredLinkUrlfont,)
[FilteredLinkNamepalette,](FilteredLinkUrlpalette,)
backgroundRole(), setBackgroundRole(), fontInfo(), fontMetrics().
* Keyboard focus functions
* [FilteredLinkNamefocus,](FilteredLinkUrlfocus,)
[FilteredLinkNamefocusPolicy,](FilteredLinkUrlfocusPolicy,)
setFocus(), clearFocus(), setTabOrder(), setFocusProxy(), focusNextChild(), focusPreviousChild().
* Mouse and keyboard grabbing
* grabMouse(), releaseMouse(), grabKeyboard(), releaseKeyboard(), mouseGrabber(), keyboardGrabber().
* Event handlers
* event(), mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), mouseMoveEvent(), keyPressEvent(), keyReleaseEvent(), focusInEvent(), focusOutEvent(), wheelEvent(), enterEvent(), leaveEvent(), paintEvent(), moveEvent(), resizeEvent(), closeEvent(), dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(), dropEvent(), childEvent(), showEvent(), hideEvent(), customEvent(). changeEvent(),
* System functions
* parentWidget(), window(), setParent(), winId(), find(), metric().
* Context menu
* contextMenuPolicy, contextMenuEvent(), customContextMenuRequested(), actions()
* Interactive help
* setToolTip(), setWhatsThis()

# Widget Style Sheets

In addition to the standard widget styles for each platform, widgets can
also be styled according to rules specified in a [FilteredLinkNamestyle sheet](FilteredLinkUrlstyleSheet)
. This feature enables you to customize the appearance of
specific widgets to provide visual cues to users about their purpose. For
example, a button could be styled in a particular way to indicate that it
performs a destructive action.

The use of widget style sheets is described in more detail in the
[FilteredLinkNameQt Style Sheets](FilteredLinkUrlQt%20Style%20Sheets)
document.

# Transparency and Double Buffering

Since Qt 4.0, QWidget automatically double-buffers its painting, so there
is no need to write double-buffering code in paintEvent() to avoid
flicker.

Since Qt 4.1, the Qt::WA_ContentsPropagated widget attribute has been
deprecated. Instead, the contents of parent widgets are propagated by
default to each of their children as long as Qt::WA_PaintOnScreen is not
set. Custom widgets can be written to take advantage of this feature by
updating irregular regions (to create non-rectangular child widgets), or
painting with colors that have less than full alpha component. The
following diagram shows how attributes and properties of a custom widget
can be fine-tuned to achieve different effects.

![propagation-custom.png](propagation-custom.png)

In the above diagram, a semi-transparent rectangular child widget with an
area removed is constructed and added to a parent widget (a QLabel showing
a pixmap). Then, different properties and widget attributes are set to
achieve different effects:

* The left widget has no additional properties or widget attributes set. This default state suits most custom widgets using transparency, are irregularly-shaped, or do not paint over their entire area with an opaque brush.
* The center widget has the [FilteredLinkNameautoFillBackground](FilteredLinkUrlautoFillBackground)
property set. This property is used with custom widgets that rely on the widget to supply a default background, and do not paint over their entire area with an opaque brush.
* The right widget has the Qt::WA_OpaquePaintEvent widget attribute set. This indicates that the widget will paint over its entire area with opaque colors. The widget's area will initially be *uninitialized* , represented in the diagram with a red diagonal grid pattern that shines through the overpainted area. The Qt::WA_OpaquePaintArea attribute is useful for widgets that need to paint their own specialized contents quickly and do not need a default filled background.

To rapidly update custom widgets with simple background colors, such as
real-time plotting or graphing widgets, it is better to define a suitable
background color (using setBackgroundRole() with the
QPalette::Window role), set the [FilteredLinkNameautoFillBackground](FilteredLinkUrlautoFillBackground)
property, and only
implement the necessary drawing functionality in the widget's paintEvent().

To rapidly update custom widgets that constantly paint over their entire
areas with opaque content, e.g., video streaming widgets, it is better to
set the widget's Qt::WA_OpaquePaintEvent, avoiding any unnecessary overhead
associated with repainting the widget's background.

If a widget has both the Qt::WA_OpaquePaintEvent widget attribute *and*
the [FilteredLinkNameautoFillBackground](FilteredLinkUrlautoFillBackground)
property set, the Qt::WA_OpaquePaintEvent
attribute takes precedence. Depending on your requirements, you should
choose either one of them.

Since Qt 4.1, the contents of parent widgets are also propagated to
standard Qt widgets. This can lead to some unexpected results if the
parent widget is decorated in a non-standard way, as shown in the diagram
below.

![propagation-standard.png](propagation-standard.png)

The scope for customizing the painting behavior of standard Qt widgets,
without resorting to subclassing, is slightly less than that possible for
custom widgets. Usually, the desired appearance of a standard widget can be
achieved by setting its [FilteredLinkNameautoFillBackground](FilteredLinkUrlautoFillBackground)
property.

# Creating Translucent Windows

Since Qt 4.5, it has been possible to create windows with translucent regions
on window systems that support compositing.

To enable this feature in a top-level widget, set its Qt::WA_TranslucentBackground
attribute with setAttribute() and ensure that its background is painted with
non-opaque colors in the regions you want to be partially transparent.

Platform notes:

* X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.
* Windows: The widget needs to have the Qt::FramelessWindowHint window flag set for the translucency to work.

# Native Widgets vs Alien Widgets

Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing
system. They do not have a native window handle associated with them. This
feature significantly speeds up widget painting, resizing, and removes flicker.

Should you require the old behavior with native windows, you can choose
one of the following options:

* Use the `QT_USE_NATIVE_WINDOWS=1` in your environment.
* Set the Qt::AA_NativeWindows attribute on your application. All widgets will be native widgets.
* Set the Qt::WA_NativeWindow attribute on widgets: The widget itself and all of its ancestors will become native (unless Qt::WA_DontCreateNativeAncestors is set).
* Call QWidget::winId to enforce a native window (this implies 3).
* Set the Qt::WA_PaintOnScreen attribute to enforce a native window (this implies 3).

**See also:** FilteredLinkSeeAlsoQEvent
FilteredLinkSeeAlsoQPainter
FilteredLinkSeeAlsoQGridLayout
FilteredLinkSeeAlsoQBoxLayout


Entry 4
Function: FilteredFunctionQWidget::QWidget(QWidget *parent, Qt::WindowFlags f)

QDoc:
/*!
    Constructs a widget which is a child of \a parent, with  widget
    flags set to \a f.

    If \a parent is 0, the new widget becomes a window. If
    \a parent is another widget, this widget becomes a child window
    inside \a parent. The new widget is deleted when its \a parent is
    deleted.

    The widget flags argument, \a f, is normally 0, but it can be set
    to customize the frame of a window (i.e. \a
    parent must be 0). To customize the frame, use a value composed
    from the bitwise OR of any of the \l{Qt::WindowFlags}{window flags}.

    If you add a child widget to an already visible widget you must
    explicitly show the child to make it visible.

    Note that the X11 version of Qt may not be able to deliver all
    combinations of style flags on all systems. This is because on
    X11, Qt can only ask the window manager, and the window manager
    can override the application's settings. On Windows, Qt can set
    whatever flags you want.

    \sa windowFlags
*/
QWidget::QWidget(QWidget *parent, Qt::WindowFlags f)

Rustdoc:

Constructs a widget which is a child of *parent,* with widget
flags set to *f.*

If *parent* is 0, the new widget becomes a window. If
*parent* is another widget, this widget becomes a child window
inside *parent.* The new widget is deleted when its *parent* is
deleted.

The widget flags argument, *f,* is normally 0, but it can be set
to customize the frame of a window (i.e. *parent* must be 0). To customize the frame, use a value composed
from the bitwise OR of any of the [FilteredLinkNamewindow flags](FilteredLinkUrlQt::WindowFlags)
.

If you add a child widget to an already visible widget you must
explicitly show the child to make it visible.

Note that the X11 version of Qt may not be able to deliver all
combinations of style flags on all systems. This is because on
X11, Qt can only ask the window manager, and the window manager
can override the application's settings. On Windows, Qt can set
whatever flags you want.

**See also:** FilteredLinkSeeAlsowindowFlags

Entry 5
Function: FilteredFunctionvoid QWidget::create(WId window, bool initializeWindow, bool destroyOldWindow)

QDoc:
/*!
    Creates a new widget window.

    The parameter \a window is ignored in Qt 5. Please use
    QWindow::fromWinId() to create a QWindow wrapping a foreign
    window and pass it to QWidget::createWindowContainer() instead.

    Initializes the window (sets the geometry etc.) if \a
    initializeWindow is true. If \a initializeWindow is false, no
    initialization is performed. This parameter only makes sense if \a
    window is a valid window.

    Destroys the old window if \a destroyOldWindow is true. If \a
    destroyOldWindow is false, you are responsible for destroying the
    window yourself (using platform native code).

    The QWidget constructor calls create(0,true,true) to create a
    window for this widget.

    \sa createWindowContainer(), QWindow::fromWinId()
*/

void QWidget::create(WId window, bool initializeWindow, bool destroyOldWindow)

Rustdoc:

Creates a new widget window.

The parameter *window* is ignored in Qt 5. Please use
QWindow::fromWinId() to create a QWindow wrapping a foreign
window and pass it to QWidget::createWindowContainer() instead.

Initializes the window (sets the geometry etc.) if *initializeWindow* is true. If *initializeWindow* is false, no
initialization is performed. This parameter only makes sense if *window* is a valid window.

Destroys the old window if *destroyOldWindow* is true. If *destroyOldWindow* is false, you are responsible for destroying the
window yourself (using platform native code).

The QWidget constructor calls create(0,true,true) to create a
window for this widget.

**See also:** FilteredLinkSeeAlsocreateWindowContainer()
FilteredLinkSeeAlsoQWindow::fromWinId()

Entry 6
Function: FilteredFunctionQWidget::~QWidget()

QDoc:
/*!
    Destroys the widget.

    All this widget's children are deleted first. The application
    exits if this widget is the main widget.
*/

QWidget::~QWidget()

Rustdoc:

Destroys the widget.

All this widget's children are deleted first. The application
exits if this widget is the main widget.

Entry 7
Function: FilteredFunctionQWidget *QWidget::find(WId id)

QDoc:
/*!
    Returns a pointer to the widget with window identifer/handle \a
    id.

    The window identifier type depends on the underlying window
    system, see \c qwindowdefs.h for the actual definition. If there
    is no widget with this identifier, 0 is returned.
*/

QWidget *QWidget::find(WId id)

Rustdoc:

Returns a pointer to the widget with window identifer/handle *id.*

The window identifier type depends on the underlying window
system, see `qwindowdefs.h` for the actual definition. If there
is no widget with this identifier, 0 is returned.

Entry 8
Function: FilteredFunctionWId QWidget::winId() const

QDoc:
/*!
    \fn WId QWidget::winId() const

    Returns the window system identifier of the widget.

    Portable in principle, but if you use it you are probably about to
    do something non-portable. Be careful.

    If a widget is non-native (alien) and winId() is invoked on it, that widget
    will be provided a native handle.

    This value may change at run-time. An event with type QEvent::WinIdChange
    will be sent to the widget following a change in window system identifier.

    \sa find()
*/
WId QWidget::winId() const

Rustdoc:

Returns the window system identifier of the widget.

Portable in principle, but if you use it you are probably about to
do something non-portable. Be careful.

If a widget is non-native (alien) and winId() is invoked on it, that widget
will be provided a native handle.

This value may change at run-time. An event with type QEvent::WinIdChange
will be sent to the widget following a change in window system identifier.

**See also:** FilteredLinkSeeAlsofind()

Entry 9
Function: FilteredFunctionWId QWidget::effectiveWinId() const

QDoc:
/*!
    \since 4.4

    Returns the effective window system identifier of the widget, i.e. the
    native parent's window system identifier.

    If the widget is native, this function returns the native widget ID.
    Otherwise, the window ID of the first native parent widget, i.e., the
    top-level widget that contains this widget, is returned.

    \note We recommend that you do not store this value as it is likely to
    change at run-time.

    \sa nativeParentWidget()
*/
WId QWidget::effectiveWinId() const

Rustdoc:

Returns the effective window system identifier of the widget, i.e. the
native parent's window system identifier.

If the widget is native, this function returns the native widget ID.
Otherwise, the window ID of the first native parent widget, i.e., the
top-level widget that contains this widget, is returned.

**Note**: We recommend that you do not store this value as it is likely to
change at run-time.

**See also:** FilteredLinkSeeAlsonativeParentWidget()

Entry 10
Function: FilteredFunctionQWindow *QWidget::windowHandle() const

QDoc:
/*!
    If this is a native widget, return the associated QWindow.
    Otherwise return null.

    Native widgets include toplevel widgets, QGLWidget, and child widgets
    on which winId() was called.

    \since 5.0

    \sa winId()
*/
QWindow *QWidget::windowHandle() const

Rustdoc:

If this is a native widget, return the associated QWindow.
Otherwise return null.

Native widgets include toplevel widgets, QGLWidget, and child widgets
on which winId() was called.

**See also:** FilteredLinkSeeAlsowinId()

Entry 11
Brief: the widget's style sheet
Property: QWidget::styleSheet

QDoc:
/*!
    \property QWidget::styleSheet
    \brief the widget's style sheet
    \since 4.2

    The style sheet contains a textual description of customizations to the
    widget's style, as described in the \l{Qt Style Sheets} document.

    Since Qt 4.5, Qt style sheets fully supports \macos.

    \warning Qt style sheets are currently not supported for custom QStyle
    subclasses. We plan to address this in some future release.

    \sa setStyle(), QApplication::styleSheet, {Qt Style Sheets}
*/
QString QWidget::styleSheet() const

Rustdoc:

The style sheet contains a textual description of customizations to the
widget's style, as described in the [FilteredLinkNameQt Style Sheets](FilteredLinkUrlQt%20Style%20Sheets)
document.

Since Qt 4.5, Qt style sheets fully supports MacOS .

**Warning**: Qt style sheets are currently not supported for custom QStyle
subclasses. We plan to address this in some future release.

**See also:** FilteredLinkSeeAlsosetStyle()
FilteredLinkSeeAlsoQApplication::styleSheet
FilteredLinkSeeAlso{Qt Style Sheets}

Entry 12
Function: FilteredFunctionQStyle *QWidget::style() const

QDoc:
/*!
    \sa QWidget::setStyle(), QApplication::setStyle(), QApplication::style()
*/

QStyle *QWidget::style() const

Rustdoc:

**See also:** FilteredLinkSeeAlsoQWidget::setStyle()
FilteredLinkSeeAlsoQApplication::setStyle()
FilteredLinkSeeAlsoQApplication::style()

Entry 13
Function: FilteredFunctionvoid QWidget::setStyle(QStyle *style)

QDoc:
/*!
    Sets the widget's GUI style to \a style. The ownership of the style
    object is not transferred.

    If no style is set, the widget uses the application's style,
    QApplication::style() instead.

    Setting a widget's style has no effect on existing or future child
    widgets.

    \warning This function is particularly useful for demonstration
    purposes, where you want to show Qt's styling capabilities. Real
    applications should avoid it and use one consistent GUI style
    instead.

    \warning Qt style sheets are currently not supported for custom QStyle
    subclasses. We plan to address this in some future release.

    \sa style(), QStyle, QApplication::style(), QApplication::setStyle()
*/

void QWidget::setStyle(QStyle *style)

Rustdoc:

Sets the widget's GUI style to *style.* The ownership of the style
object is not transferred.

If no style is set, the widget uses the application's style,
QApplication::style() instead.

Setting a widget's style has no effect on existing or future child
widgets.

**Warning**: This function is particularly useful for demonstration
purposes, where you want to show Qt's styling capabilities. Real
applications should avoid it and use one consistent GUI style
instead.

**Warning**: Qt style sheets are currently not supported for custom QStyle
subclasses. We plan to address this in some future release.

**See also:** FilteredLinkSeeAlsostyle()
FilteredLinkSeeAlsoQStyle
FilteredLinkSeeAlsoQApplication::style()
FilteredLinkSeeAlsoQApplication::setStyle()

Entry 14
Function: FilteredFunctionbool QWidget::isWindow() const

QDoc:
/*!
    \fn bool QWidget::isWindow() const

    Returns \c true if the widget is an independent window, otherwise
    returns \c false.

    A window is a widget that isn't visually the child of any other
    widget and that usually has a frame and a
    \l{QWidget::setWindowTitle()}{window title}.

    A window can have a \l{QWidget::parentWidget()}{parent widget}.
    It will then be grouped with its parent and deleted when the
    parent is deleted, minimized when the parent is minimized etc. If
    supported by the window manager, it will also have a common
    taskbar entry with its parent.

    QDialog and QMainWindow widgets are by default windows, even if a
    parent widget is specified in the constructor. This behavior is
    specified by the Qt::Window flag.

    \sa window(), isModal(), parentWidget()
*/

Rustdoc:

Returns `true` if the widget is an independent window, otherwise
returns `false.`

A window is a widget that isn't visually the child of any other
widget and that usually has a frame and a
[FilteredLinkNamewindow title](FilteredLinkUrlQWidget::setWindowTitle())
.

A window can have a [FilteredLinkNameparent widget](FilteredLinkUrlQWidget::parentWidget())
.
It will then be grouped with its parent and deleted when the
parent is deleted, minimized when the parent is minimized etc. If
supported by the window manager, it will also have a common
taskbar entry with its parent.

QDialog and QMainWindow widgets are by default windows, even if a
parent widget is specified in the constructor. This behavior is
specified by the Qt::Window flag.

**See also:** FilteredLinkSeeAlsowindow()
FilteredLinkSeeAlsoisModal()
FilteredLinkSeeAlsoparentWidget()

Entry 15
Brief: whether the widget is a modal widget
Property: QWidget::modal

QDoc:
/*!
    \property QWidget::modal
    \brief whether the widget is a modal widget

    This property only makes sense for windows. A modal widget
    prevents widgets in all other windows from getting any input.

    By default, this property is \c false.

    \sa isWindow(), windowModality, QDialog
*/

Rustdoc:

This property only makes sense for windows. A modal widget
prevents widgets in all other windows from getting any input.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsoisWindow()
FilteredLinkSeeAlsowindowModality
FilteredLinkSeeAlsoQDialog

Entry 16
Brief: which windows are blocked by the modal widget
Property: QWidget::windowModality

QDoc:
/*!
    \property QWidget::windowModality
    \brief which windows are blocked by the modal widget
    \since 4.1

    This property only makes sense for windows. A modal widget
    prevents widgets in other windows from getting input. The value of
    this property controls which windows are blocked when the widget
    is visible. Changing this property while the window is visible has
    no effect; you must hide() the widget first, then show() it again.

    By default, this property is Qt::NonModal.

    \sa isWindow(), QWidget::modal, QDialog
*/

Qt::WindowModality QWidget::windowModality() const

Rustdoc:

This property only makes sense for windows. A modal widget
prevents widgets in other windows from getting input. The value of
this property controls which windows are blocked when the widget
is visible. Changing this property while the window is visible has
no effect; you must hide() the widget first, then show() it again.

By default, this property is Qt::NonModal.

**See also:** FilteredLinkSeeAlsoisWindow()
FilteredLinkSeeAlsoQWidget::modal
FilteredLinkSeeAlsoQDialog

Entry 17
Function: FilteredFunctionbool QWidget::underMouse() const

QDoc:
/*!
    \fn bool QWidget::underMouse() const

    Returns \c true if the widget is under the mouse cursor; otherwise
    returns \c false.

    This value is not updated properly during drag and drop
    operations.

    \sa enterEvent(), leaveEvent()
*/

Rustdoc:

Returns `true` if the widget is under the mouse cursor; otherwise
returns `false.`

This value is not updated properly during drag and drop
operations.

**See also:** FilteredLinkSeeAlsoenterEvent()
FilteredLinkSeeAlsoleaveEvent()

Entry 18
Brief: whether this widget is minimized (iconified)
Property: QWidget::minimized

QDoc:
/*!
    \property QWidget::minimized
    \brief whether this widget is minimized (iconified)

    This property is only relevant for windows.

    By default, this property is \c false.

    \sa showMinimized(), visible, show(), hide(), showNormal(), maximized
*/
bool QWidget::isMinimized() const

Rustdoc:

This property is only relevant for windows.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsoshowMinimized()
FilteredLinkSeeAlsovisible
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsomaximized

Entry 19
Function: FilteredFunctionvoid QWidget::showMinimized()

QDoc:
/*!
    Shows the widget minimized, as an icon.

    Calling this function only affects \l{isWindow()}{windows}.

    \sa showNormal(), showMaximized(), show(), hide(), isVisible(),
        isMinimized()
*/
void QWidget::showMinimized()

Rustdoc:

Shows the widget minimized, as an icon.

Calling this function only affects [FilteredLinkNamewindows](FilteredLinkUrlisWindow())
.

**See also:** FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsoshowMaximized()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisVisible()
FilteredLinkSeeAlsoisMinimized()

Entry 20
Brief: whether this widget is maximized
Property: QWidget::maximized

QDoc:
/*!
    \property QWidget::maximized
    \brief whether this widget is maximized

    This property is only relevant for windows.

    \note Due to limitations on some window systems, this does not always
    report the expected results (e.g., if the user on X11 maximizes the
    window via the window manager, Qt has no way of distinguishing this
    from any other resize). This is expected to improve as window manager
    protocols evolve.

    By default, this property is \c false.

    \sa windowState(), showMaximized(), visible, show(), hide(), showNormal(), minimized
*/
bool QWidget::isMaximized() const

Rustdoc:

This property is only relevant for windows.

**Note**: Due to limitations on some window systems, this does not always
report the expected results (e.g., if the user on X11 maximizes the
window via the window manager, Qt has no way of distinguishing this
from any other resize). This is expected to improve as window manager
protocols evolve.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsowindowState()
FilteredLinkSeeAlsoshowMaximized()
FilteredLinkSeeAlsovisible
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsominimized

Entry 21
Function: FilteredFunctionQt::WindowStates QWidget::windowState() const

QDoc:
/*!
    Returns the current window state. The window state is a OR'ed
    combination of Qt::WindowState: Qt::WindowMinimized,
    Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.

  \sa Qt::WindowState, setWindowState()
 */
Qt::WindowStates QWidget::windowState() const

Rustdoc:

Returns the current window state. The window state is a OR'ed
combination of Qt::WindowState: Qt::WindowMinimized,
Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.

**See also:** FilteredLinkSeeAlsoQt::WindowState
FilteredLinkSeeAlsosetWindowState()

Entry 22
Function: FilteredFunctionvoid QWidget::setWindowState(Qt::WindowStates windowState)

QDoc:
/*!
    \fn void QWidget::setWindowState(Qt::WindowStates windowState)

    Sets the window state to \a windowState. The window state is a OR'ed
    combination of Qt::WindowState: Qt::WindowMinimized,
    Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.

    If the window is not visible (i.e. isVisible() returns \c false), the
    window state will take effect when show() is called. For visible
    windows, the change is immediate. For example, to toggle between
    full-screen and normal mode, use the following code:

    \snippet code/src_gui_kernel_qwidget.cpp 0

    In order to restore and activate a minimized window (while
    preserving its maximized and/or full-screen state), use the following:

    \snippet code/src_gui_kernel_qwidget.cpp 1

    Calling this function will hide the widget. You must call show() to make
    the widget visible again.

    \note On some window systems Qt::WindowActive is not immediate, and may be
    ignored in certain cases.

    When the window state changes, the widget receives a changeEvent()
    of type QEvent::WindowStateChange.

    \sa Qt::WindowState, windowState()
*/
void QWidget::setWindowState(Qt::WindowStates newstate)

Rustdoc:

Sets the window state to *windowState.* The window state is a OR'ed
combination of Qt::WindowState: Qt::WindowMinimized,
Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.

If the window is not visible (i.e. isVisible() returns `false),` the
window state will take effect when show() is called. For visible
windows, the change is immediate. For example, to toggle between
full-screen and normal mode, use the following code:

In order to restore and activate a minimized window (while
preserving its maximized and/or full-screen state), use the following:

Calling this function will hide the widget. You must call show() to make
the widget visible again.

**Note**: On some window systems Qt::WindowActive is not immediate, and may be
ignored in certain cases.

When the window state changes, the widget receives a changeEvent()
of type QEvent::WindowStateChange.

**See also:** FilteredLinkSeeAlsoQt::WindowState
FilteredLinkSeeAlsowindowState()

Entry 23
Brief: whether the widget is shown in full screen mode
Property: QWidget::fullScreen

QDoc:
/*!
    \property QWidget::fullScreen
    \brief whether the widget is shown in full screen mode

    A widget in full screen mode occupies the whole screen area and does not
    display window decorations, such as a title bar.

    By default, this property is \c false.

    \sa windowState(), minimized, maximized
*/
bool QWidget::isFullScreen() const

Rustdoc:

A widget in full screen mode occupies the whole screen area and does not
display window decorations, such as a title bar.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsowindowState()
FilteredLinkSeeAlsominimized
FilteredLinkSeeAlsomaximized

Entry 24
Function: FilteredFunctionvoid QWidget::showFullScreen()

QDoc:
/*!
    Shows the widget in full-screen mode.

    Calling this function only affects \l{isWindow()}{windows}.

    To return from full-screen mode, call showNormal().

    Full-screen mode works fine under Windows, but has certain
    problems under X. These problems are due to limitations of the
    ICCCM protocol that specifies the communication between X11
    clients and the window manager. ICCCM simply does not understand
    the concept of non-decorated full-screen windows. Therefore, the
    best we can do is to request a borderless window and place and
    resize it to fill the entire screen. Depending on the window
    manager, this may or may not work. The borderless window is
    requested using MOTIF hints, which are at least partially
    supported by virtually all modern window managers.

    An alternative would be to bypass the window manager entirely and
    create a window with the Qt::X11BypassWindowManagerHint flag. This
    has other severe problems though, like totally broken keyboard focus
    and very strange effects on desktop changes or when the user raises
    other windows.

    X11 window managers that follow modern post-ICCCM specifications
    support full-screen mode properly.

    \sa showNormal(), showMaximized(), show(), hide(), isVisible()
*/
void QWidget::showFullScreen()

Rustdoc:

Shows the widget in full-screen mode.

Calling this function only affects [FilteredLinkNamewindows](FilteredLinkUrlisWindow())
.

To return from full-screen mode, call showNormal().

Full-screen mode works fine under Windows, but has certain
problems under X. These problems are due to limitations of the
ICCCM protocol that specifies the communication between X11
clients and the window manager. ICCCM simply does not understand
the concept of non-decorated full-screen windows. Therefore, the
best we can do is to request a borderless window and place and
resize it to fill the entire screen. Depending on the window
manager, this may or may not work. The borderless window is
requested using MOTIF hints, which are at least partially
supported by virtually all modern window managers.

An alternative would be to bypass the window manager entirely and
create a window with the Qt::X11BypassWindowManagerHint flag. This
has other severe problems though, like totally broken keyboard focus
and very strange effects on desktop changes or when the user raises
other windows.

X11 window managers that follow modern post-ICCCM specifications
support full-screen mode properly.

**See also:** FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsoshowMaximized()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisVisible()

Entry 25
Function: FilteredFunctionvoid QWidget::showMaximized()

QDoc:
/*!
    Shows the widget maximized.

    Calling this function only affects \l{isWindow()}{windows}.

    On X11, this function may not work properly with certain window
    managers. See the \l{Window Geometry} documentation for an explanation.

    \sa setWindowState(), showNormal(), showMinimized(), show(), hide(), isVisible()
*/
void QWidget::showMaximized()

Rustdoc:

Shows the widget maximized.

Calling this function only affects [FilteredLinkNamewindows](FilteredLinkUrlisWindow())
.

On X11, this function may not work properly with certain window
managers. See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an explanation.

**See also:** FilteredLinkSeeAlsosetWindowState()
FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsoshowMinimized()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisVisible()

Entry 26
Function: FilteredFunctionvoid QWidget::showNormal()

QDoc:
/*!
    Restores the widget after it has been maximized or minimized.

    Calling this function only affects \l{isWindow()}{windows}.

    \sa setWindowState(), showMinimized(), showMaximized(), show(), hide(), isVisible()
*/
void QWidget::showNormal()

Rustdoc:

Restores the widget after it has been maximized or minimized.

Calling this function only affects [FilteredLinkNamewindows](FilteredLinkUrlisWindow())
.

**See also:** FilteredLinkSeeAlsosetWindowState()
FilteredLinkSeeAlsoshowMinimized()
FilteredLinkSeeAlsoshowMaximized()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisVisible()

Entry 27
Function: FilteredFunctionbool QWidget::isEnabledTo(const QWidget *ancestor) const

QDoc:
/*!
    Returns \c true if this widget would become enabled if \a ancestor is
    enabled; otherwise returns \c false.



    This is the case if neither the widget itself nor every parent up
    to but excluding \a ancestor has been explicitly disabled.

    isEnabledTo(0) returns false if this widget or any if its ancestors
    was explicitly disabled.

    The word ancestor here means a parent widget within the same window.

    Therefore isEnabledTo(0) stops at this widget's window, unlike
    isEnabled() which also takes parent windows into considerations.

    \sa setEnabled(), enabled
*/

bool QWidget::isEnabledTo(const QWidget *ancestor) const

Rustdoc:

Returns `true` if this widget would become enabled if *ancestor* is
enabled; otherwise returns `false.`

This is the case if neither the widget itself nor every parent up
to but excluding *ancestor* has been explicitly disabled.

isEnabledTo(0) returns false if this widget or any if its ancestors
was explicitly disabled.

The word ancestor here means a parent widget within the same window.

Therefore isEnabledTo(0) stops at this widget's window, unlike
isEnabled() which also takes parent windows into considerations.

**See also:** FilteredLinkSeeAlsosetEnabled()
FilteredLinkSeeAlsoenabled

Entry 28
Function: FilteredFunctionvoid QWidget::addAction(QAction *action)

QDoc:
/*!
    Appends the action \a action to this widget's list of actions.

    All QWidgets have a list of \l{QAction}s, however they can be
    represented graphically in many different ways. The default use of
    the QAction list (as returned by actions()) is to create a context
    QMenu.

    A QWidget should only have one of each action and adding an action
    it already has will not cause the same action to be in the widget twice.

    The ownership of \a action is not transferred to this QWidget.

    \sa removeAction(), insertAction(), actions(), QMenu
*/
void QWidget::addAction(QAction *action)

Rustdoc:

Appends the action *action* to this widget's list of actions.

All QWidgets have a list of [FilteredLinkNameQAction](FilteredLinkUrlQAction)
s, however they can be
represented graphically in many different ways. The default use of
the QAction list (as returned by actions()) is to create a context
QMenu.

A QWidget should only have one of each action and adding an action
it already has will not cause the same action to be in the widget twice.

The ownership of *action* is not transferred to this QWidget.

**See also:** FilteredLinkSeeAlsoremoveAction()
FilteredLinkSeeAlsoinsertAction()
FilteredLinkSeeAlsoactions()
FilteredLinkSeeAlsoQMenu

Entry 29

QDoc:
/*!
    Appends the actions \a actions to this widget's list of actions.

    \sa removeAction(), QMenu, addAction()
*/

Rustdoc:

Appends the actions *actions* to this widget's list of actions.

**See also:** FilteredLinkSeeAlsoremoveAction()
FilteredLinkSeeAlsoQMenu
FilteredLinkSeeAlsoaddAction()

Entry 30
Function: FilteredFunctionvoid QWidget::insertAction(QAction *before, QAction *action)

QDoc:
/*!
    Inserts the action \a action to this widget's list of actions,
    before the action \a before. It appends the action if \a before is 0 or
    \a before is not a valid action for this widget.

    A QWidget should only have one of each action.

    \sa removeAction(), addAction(), QMenu, contextMenuPolicy, actions()
*/
void QWidget::insertAction(QAction *before, QAction *action)

Rustdoc:

Inserts the action *action* to this widget's list of actions,
before the action *before.* It appends the action if *before* is 0 or
*before* is not a valid action for this widget.

A QWidget should only have one of each action.

**See also:** FilteredLinkSeeAlsoremoveAction()
FilteredLinkSeeAlsoaddAction()
FilteredLinkSeeAlsoQMenu
FilteredLinkSeeAlsocontextMenuPolicy
FilteredLinkSeeAlsoactions()

Entry 31

QDoc:
/*!
    Inserts the actions \a actions to this widget's list of actions,
    before the action \a before. It appends the action if \a before is 0 or
    \a before is not a valid action for this widget.

    A QWidget can have at most one of each action.

    \sa removeAction(), QMenu, insertAction(), contextMenuPolicy
*/

Rustdoc:

Inserts the actions *actions* to this widget's list of actions,
before the action *before.* It appends the action if *before* is 0 or
*before* is not a valid action for this widget.

A QWidget can have at most one of each action.

**See also:** FilteredLinkSeeAlsoremoveAction()
FilteredLinkSeeAlsoQMenu
FilteredLinkSeeAlsoinsertAction()
FilteredLinkSeeAlsocontextMenuPolicy

Entry 32
Function: FilteredFunctionvoid QWidget::removeAction(QAction *action)

QDoc:
/*!
    Removes the action \a action from this widget's list of actions.
    \sa insertAction(), actions(), insertAction()
*/
void QWidget::removeAction(QAction *action)

Rustdoc:

Removes the action *action* from this widget's list of actions.
**See also:** FilteredLinkSeeAlsoinsertAction()
FilteredLinkSeeAlsoactions()
FilteredLinkSeeAlsoinsertAction()

Entry 33
Function: FilteredFunctionQList<QAction*> QWidget::actions() const

QDoc:
/*!
    Returns the (possibly empty) list of this widget's actions.

    \sa contextMenuPolicy, insertAction(), removeAction()
*/
QList<QAction*> QWidget::actions() const

Rustdoc:

Returns the (possibly empty) list of this widget's actions.

**See also:** FilteredLinkSeeAlsocontextMenuPolicy
FilteredLinkSeeAlsoinsertAction()
FilteredLinkSeeAlsoremoveAction()

Entry 34
Function: FilteredFunctionbool QWidget::isEnabledToTLW() const

QDoc:
/*!
  \fn bool QWidget::isEnabledToTLW() const
  \obsolete

  This function is deprecated. It is equivalent to isEnabled()
*/

Rustdoc:

This function is deprecated. It is equivalent to isEnabled()

Entry 35
Brief: whether the widget is enabled
Property: QWidget::enabled

QDoc:
/*!
    \property QWidget::enabled
    \brief whether the widget is enabled

    In general an enabled widget handles keyboard and mouse events; a disabled
    widget does not. An exception is made with \l{QAbstractButton}.

    Some widgets display themselves differently when they are
    disabled. For example a button might draw its label grayed out. If
    your widget needs to know when it becomes enabled or disabled, you
    can use the changeEvent() with type QEvent::EnabledChange.

    Disabling a widget implicitly disables all its children. Enabling
    respectively enables all child widgets unless they have been
    explicitly disabled. It it not possible to explicitly enable a child
    widget which is not a window while its parent widget remains disabled.

    By default, this property is \c true.

    \sa isEnabledTo(), QKeyEvent, QMouseEvent, changeEvent()
*/
void QWidget::setEnabled(bool enable)

Rustdoc:

In general an enabled widget handles keyboard and mouse events; a disabled
widget does not. An exception is made with [FilteredLinkNameQAbstractButton](FilteredLinkUrlQAbstractButton)
.

Some widgets display themselves differently when they are
disabled. For example a button might draw its label grayed out. If
your widget needs to know when it becomes enabled or disabled, you
can use the changeEvent() with type QEvent::EnabledChange.

Disabling a widget implicitly disables all its children. Enabling
respectively enables all child widgets unless they have been
explicitly disabled. It it not possible to explicitly enable a child
widget which is not a window while its parent widget remains disabled.

By default, this property is `true.`

**See also:** FilteredLinkSeeAlsoisEnabledTo()
FilteredLinkSeeAlsoQKeyEvent
FilteredLinkSeeAlsoQMouseEvent
FilteredLinkSeeAlsochangeEvent()

Entry 36
Brief: whether drop events are enabled for this widget
Property: QWidget::acceptDrops

QDoc:
/*!
    \property QWidget::acceptDrops
    \brief whether drop events are enabled for this widget

    Setting this property to true announces to the system that this
    widget \e may be able to accept drop events.

    If the widget is the desktop (windowType() == Qt::Desktop), this may
    fail if another application is using the desktop; you can call
    acceptDrops() to test if this occurs.

    \warning Do not modify this property in a drag and drop event handler.

    By default, this property is \c false.

    \sa {Drag and Drop}
*/
bool QWidget::acceptDrops() const

Rustdoc:

Setting this property to true announces to the system that this
widget *may* be able to accept drop events.

If the widget is the desktop (windowType() == Qt::Desktop), this may
fail if another application is using the desktop; you can call
acceptDrops() to test if this occurs.

**Warning**: Do not modify this property in a drag and drop event handler.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlso{Drag and Drop}

Entry 37
Function: FilteredFunctionvoid QWidget::setDisabled(bool disable)

QDoc:
/*!
    Disables widget input events if \a disable is true; otherwise
    enables input events.

    See the \l enabled documentation for more information.

    \sa isEnabledTo(), QKeyEvent, QMouseEvent, changeEvent()
*/
void QWidget::setDisabled(bool disable)

Rustdoc:

Disables widget input events if *disable* is true; otherwise
enables input events.

See the [FilteredLinkNameenabled](FilteredLinkUrlenabled)
documentation for more information.

**See also:** FilteredLinkSeeAlsoisEnabledTo()
FilteredLinkSeeAlsoQKeyEvent
FilteredLinkSeeAlsoQMouseEvent
FilteredLinkSeeAlsochangeEvent()

Entry 38
Brief: geometry of the widget relative to its parent including any
    window frame
Property: QWidget::frameGeometry

QDoc:
/*!
    \property QWidget::frameGeometry
    \brief geometry of the widget relative to its parent including any
    window frame

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \sa geometry(), x(), y(), pos()
*/
QRect QWidget::frameGeometry() const

Rustdoc:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

By default, this property contains a value that depends on the user's
platform and screen geometry.

**See also:** FilteredLinkSeeAlsogeometry()
FilteredLinkSeeAlsox()
FilteredLinkSeeAlsoy()
FilteredLinkSeeAlsopos()

Entry 39
Brief: the x coordinate of the widget relative to its parent including
    any window frame
Property: QWidget::x

QDoc:
/*!
    \property QWidget::x

    \brief the x coordinate of the widget relative to its parent including
    any window frame

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    By default, this property has a value of 0.

    \sa frameGeometry, y, pos
*/
int QWidget::x() const

Rustdoc:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

By default, this property has a value of 0.

**See also:** FilteredLinkSeeAlsoframeGeometry
FilteredLinkSeeAlsoy
FilteredLinkSeeAlsopos

Entry 40
Brief: the y coordinate of the widget relative to its parent and
    including any window frame
Property: QWidget::y

QDoc:
/*!
    \property QWidget::y
    \brief the y coordinate of the widget relative to its parent and
    including any window frame

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    By default, this property has a value of 0.

    \sa frameGeometry, x, pos
*/
int QWidget::y() const

Rustdoc:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

By default, this property has a value of 0.

**See also:** FilteredLinkSeeAlsoframeGeometry
FilteredLinkSeeAlsox
FilteredLinkSeeAlsopos

Entry 41
Brief: the position of the widget within its parent widget
Property: QWidget::pos

QDoc:
/*!
    \property QWidget::pos
    \brief the position of the widget within its parent widget

    If the widget is a window, the position is that of the widget on
    the desktop, including its frame.

    When changing the position, the widget, if visible, receives a
    move event (moveEvent()) immediately. If the widget is not
    currently visible, it is guaranteed to receive an event before it
    is shown.

    By default, this property contains a position that refers to the
    origin.

    \warning Calling move() or setGeometry() inside moveEvent() can
    lead to infinite recursion.

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    \sa frameGeometry, size, x(), y()
*/
QPoint QWidget::pos() const

Rustdoc:

If the widget is a window, the position is that of the widget on
the desktop, including its frame.

When changing the position, the widget, if visible, receives a
move event (moveEvent()) immediately. If the widget is not
currently visible, it is guaranteed to receive an event before it
is shown.

By default, this property contains a position that refers to the
origin.

**Warning**: Calling move() or setGeometry() inside moveEvent() can
lead to infinite recursion.

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

**See also:** FilteredLinkSeeAlsoframeGeometry
FilteredLinkSeeAlsosize
FilteredLinkSeeAlsox()
FilteredLinkSeeAlsoy()

Entry 42
Brief: the geometry of the widget relative to its parent and
    excluding the window frame
Property: QWidget::geometry

QDoc:
/*!
    \property QWidget::geometry
    \brief the geometry of the widget relative to its parent and
    excluding the window frame

    When changing the geometry, the widget, if visible, receives a
    move event (moveEvent()) and/or a resize event (resizeEvent())
    immediately. If the widget is not currently visible, it is
    guaranteed to receive appropriate events before it is shown.

    The size component is adjusted if it lies outside the range
    defined by minimumSize() and maximumSize().

    \warning Calling setGeometry() inside resizeEvent() or moveEvent()
    can lead to infinite recursion.

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \sa frameGeometry(), rect(), move(), resize(), moveEvent(),
        resizeEvent(), minimumSize(), maximumSize()
*/

Rustdoc:

When changing the geometry, the widget, if visible, receives a
move event (moveEvent()) and/or a resize event (resizeEvent())
immediately. If the widget is not currently visible, it is
guaranteed to receive appropriate events before it is shown.

The size component is adjusted if it lies outside the range
defined by minimumSize() and maximumSize().

**Warning**: Calling setGeometry() inside resizeEvent() or moveEvent()
can lead to infinite recursion.

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

By default, this property contains a value that depends on the user's
platform and screen geometry.

**See also:** FilteredLinkSeeAlsoframeGeometry()
FilteredLinkSeeAlsorect()
FilteredLinkSeeAlsomove()
FilteredLinkSeeAlsoresize()
FilteredLinkSeeAlsomoveEvent()
FilteredLinkSeeAlsoresizeEvent()
FilteredLinkSeeAlsominimumSize()
FilteredLinkSeeAlsomaximumSize()

Entry 43
Brief: the geometry of the widget as it will appear when shown as
    a normal (not maximized or full screen) top-level widget
Property: QWidget::normalGeometry

QDoc:
/*!
    \property QWidget::normalGeometry

    \brief the geometry of the widget as it will appear when shown as
    a normal (not maximized or full screen) top-level widget

    For child widgets this property always holds an empty rectangle.

    By default, this property contains an empty rectangle.

    \sa QWidget::windowState(), QWidget::geometry
*/

Rustdoc:

For child widgets this property always holds an empty rectangle.

By default, this property contains an empty rectangle.

**See also:** FilteredLinkSeeAlsoQWidget::windowState()
FilteredLinkSeeAlsoQWidget::geometry

Entry 44
Brief: the size of the widget excluding any window frame
Property: QWidget::size

QDoc:
/*!
    \property QWidget::size
    \brief the size of the widget excluding any window frame

    If the widget is visible when it is being resized, it receives a resize event
    (resizeEvent()) immediately. If the widget is not currently
    visible, it is guaranteed to receive an event before it is shown.

    The size is adjusted if it lies outside the range defined by
    minimumSize() and maximumSize().

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \warning Calling resize() or setGeometry() inside resizeEvent() can
    lead to infinite recursion.

    \note Setting the size to \c{QSize(0, 0)} will cause the widget to not
    appear on screen. This also applies to windows.

    \sa pos, geometry, minimumSize, maximumSize, resizeEvent(), adjustSize()
*/

Rustdoc:

If the widget is visible when it is being resized, it receives a resize event
(resizeEvent()) immediately. If the widget is not currently
visible, it is guaranteed to receive an event before it is shown.

The size is adjusted if it lies outside the range defined by
minimumSize() and maximumSize().

By default, this property contains a value that depends on the user's
platform and screen geometry.

**Warning**: Calling resize() or setGeometry() inside resizeEvent() can
lead to infinite recursion.

**Note**: Setting the size to `QSize(0, 0)` will cause the widget to not
appear on screen. This also applies to windows.

**See also:** FilteredLinkSeeAlsopos
FilteredLinkSeeAlsogeometry
FilteredLinkSeeAlsominimumSize
FilteredLinkSeeAlsomaximumSize
FilteredLinkSeeAlsoresizeEvent()
FilteredLinkSeeAlsoadjustSize()

Entry 45
Brief: the width of the widget excluding any window frame
Property: QWidget::width

QDoc:
/*!
    \property QWidget::width
    \brief the width of the widget excluding any window frame

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    \note Do not use this function to find the width of a screen on
    a \l{QDesktopWidget}{multiple screen desktop}. Read
    \l{QDesktopWidget#Screen Geometry}{this note} for details.

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \sa geometry, height, size
*/

Rustdoc:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

**Note**: Do not use this function to find the width of a screen on
a [FilteredLinkNamemultiple screen desktop](FilteredLinkUrlQDesktopWidget)
. Read
[FilteredLinkNamethis note](FilteredLinkUrlQDesktopWidget%23Screen%20Geometry)
for details.

By default, this property contains a value that depends on the user's
platform and screen geometry.

**See also:** FilteredLinkSeeAlsogeometry
FilteredLinkSeeAlsoheight
FilteredLinkSeeAlsosize

Entry 46
Brief: the height of the widget excluding any window frame
Property: QWidget::height

QDoc:
/*!
    \property QWidget::height
    \brief the height of the widget excluding any window frame

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    \note Do not use this function to find the height of a screen
    on a \l{QDesktopWidget}{multiple screen desktop}. Read
    \l{QDesktopWidget#Screen Geometry}{this note} for details.

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \sa geometry, width, size
*/

Rustdoc:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

**Note**: Do not use this function to find the height of a screen
on a [FilteredLinkNamemultiple screen desktop](FilteredLinkUrlQDesktopWidget)
. Read
[FilteredLinkNamethis note](FilteredLinkUrlQDesktopWidget%23Screen%20Geometry)
for details.

By default, this property contains a value that depends on the user's
platform and screen geometry.

**See also:** FilteredLinkSeeAlsogeometry
FilteredLinkSeeAlsowidth
FilteredLinkSeeAlsosize

Entry 47
Brief: the internal geometry of the widget excluding any window
    frame
Property: QWidget::rect

QDoc:
/*!
    \property QWidget::rect
    \brief the internal geometry of the widget excluding any window
    frame

    The rect property equals QRect(0, 0, width(), height()).

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    By default, this property contains a value that depends on the user's
    platform and screen geometry.

    \sa size
*/


QRect QWidget::normalGeometry() const

Rustdoc:

The rect property equals QRect(0, 0, width(), height()).

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

By default, this property contains a value that depends on the user's
platform and screen geometry.

**See also:** FilteredLinkSeeAlsosize

Entry 48
Brief: the bounding rectangle of the widget's children
Property: QWidget::childrenRect

QDoc:
/*!
    \property QWidget::childrenRect
    \brief the bounding rectangle of the widget's children

    Hidden children are excluded.

    By default, for a widget with no children, this property contains a
    rectangle with zero width and height located at the origin.

    \sa childrenRegion(), geometry()
*/

QRect QWidget::childrenRect() const

Rustdoc:

Hidden children are excluded.

By default, for a widget with no children, this property contains a
rectangle with zero width and height located at the origin.

**See also:** FilteredLinkSeeAlsochildrenRegion()
FilteredLinkSeeAlsogeometry()

Entry 49
Brief: the combined region occupied by the widget's children
Property: QWidget::childrenRegion

QDoc:
/*!
    \property QWidget::childrenRegion
    \brief the combined region occupied by the widget's children

    Hidden children are excluded.

    By default, for a widget with no children, this property contains an
    empty region.

    \sa childrenRect(), geometry(), mask()
*/

QRegion QWidget::childrenRegion() const

Rustdoc:

Hidden children are excluded.

By default, for a widget with no children, this property contains an
empty region.

**See also:** FilteredLinkSeeAlsochildrenRect()
FilteredLinkSeeAlsogeometry()
FilteredLinkSeeAlsomask()

Entry 50
Brief: the widget's minimum size
Property: QWidget::minimumSize

QDoc:
/*!
    \property QWidget::minimumSize
    \brief the widget's minimum size

    The widget cannot be resized to a smaller size than the minimum
    widget size. The widget's size is forced to the minimum size if
    the current size is smaller.

    The minimum size set by this function will override the minimum size
    defined by QLayout. In order to unset the minimum size, use a
    value of \c{QSize(0, 0)}.

    By default, this property contains a size with zero width and height.

    \sa minimumWidth, minimumHeight, maximumSize, sizeIncrement
*/

QSize QWidget::minimumSize() const

Rustdoc:

The widget cannot be resized to a smaller size than the minimum
widget size. The widget's size is forced to the minimum size if
the current size is smaller.

The minimum size set by this function will override the minimum size
defined by QLayout. In order to unset the minimum size, use a
value of `QSize(0, 0)` .

By default, this property contains a size with zero width and height.

**See also:** FilteredLinkSeeAlsominimumWidth
FilteredLinkSeeAlsominimumHeight
FilteredLinkSeeAlsomaximumSize
FilteredLinkSeeAlsosizeIncrement

Entry 51
Brief: the widget's maximum size in pixels
Property: QWidget::maximumSize

QDoc:
/*!
    \property QWidget::maximumSize
    \brief the widget's maximum size in pixels

    The widget cannot be resized to a larger size than the maximum
    widget size.

    By default, this property contains a size in which both width and height
    have values of 16777215.

    \note The definition of the \c QWIDGETSIZE_MAX macro limits the maximum size
    of widgets.

    \sa maximumWidth, maximumHeight, minimumSize, sizeIncrement
*/

QSize QWidget::maximumSize() const

Rustdoc:

The widget cannot be resized to a larger size than the maximum
widget size.

By default, this property contains a size in which both width and height
have values of 16777215.

**Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
of widgets.

**See also:** FilteredLinkSeeAlsomaximumWidth
FilteredLinkSeeAlsomaximumHeight
FilteredLinkSeeAlsominimumSize
FilteredLinkSeeAlsosizeIncrement

Entry 52
Brief: the widget's minimum width in pixels
Property: QWidget::minimumWidth

QDoc:
/*!
    \property QWidget::minimumWidth
    \brief the widget's minimum width in pixels

    This property corresponds to the width held by the \l minimumSize property.

    By default, this property has a value of 0.

    \sa minimumSize, minimumHeight
*/

Rustdoc:

This property corresponds to the width held by the [FilteredLinkNameminimumSize](FilteredLinkUrlminimumSize)
property.

By default, this property has a value of 0.

**See also:** FilteredLinkSeeAlsominimumSize
FilteredLinkSeeAlsominimumHeight

Entry 53
Brief: the widget's minimum height in pixels
Property: QWidget::minimumHeight

QDoc:
/*!
    \property QWidget::minimumHeight
    \brief the widget's minimum height in pixels

    This property corresponds to the height held by the \l minimumSize property.

    By default, this property has a value of 0.

    \sa minimumSize, minimumWidth
*/

Rustdoc:

This property corresponds to the height held by the [FilteredLinkNameminimumSize](FilteredLinkUrlminimumSize)
property.

By default, this property has a value of 0.

**See also:** FilteredLinkSeeAlsominimumSize
FilteredLinkSeeAlsominimumWidth

Entry 54
Brief: the widget's maximum width in pixels
Property: QWidget::maximumWidth

QDoc:
/*!
    \property QWidget::maximumWidth
    \brief the widget's maximum width in pixels

    This property corresponds to the width held by the \l maximumSize property.

    By default, this property contains a value of 16777215.

    \note The definition of the \c QWIDGETSIZE_MAX macro limits the maximum size
    of widgets.

    \sa maximumSize, maximumHeight
*/

Rustdoc:

This property corresponds to the width held by the [FilteredLinkNamemaximumSize](FilteredLinkUrlmaximumSize)
property.

By default, this property contains a value of 16777215.

**Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
of widgets.

**See also:** FilteredLinkSeeAlsomaximumSize
FilteredLinkSeeAlsomaximumHeight

Entry 55
Brief: the widget's maximum height in pixels
Property: QWidget::maximumHeight

QDoc:
/*!
    \property QWidget::maximumHeight
    \brief the widget's maximum height in pixels

    This property corresponds to the height held by the \l maximumSize property.

    By default, this property contains a value of 16777215.

    \note The definition of the \c QWIDGETSIZE_MAX macro limits the maximum size
    of widgets.

    \sa maximumSize, maximumWidth
*/

Rustdoc:

This property corresponds to the height held by the [FilteredLinkNamemaximumSize](FilteredLinkUrlmaximumSize)
property.

By default, this property contains a value of 16777215.

**Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
of widgets.

**See also:** FilteredLinkSeeAlsomaximumSize
FilteredLinkSeeAlsomaximumWidth

Entry 56
Brief: the size increment of the widget
Property: QWidget::sizeIncrement

QDoc:
/*!
    \property QWidget::sizeIncrement
    \brief the size increment of the widget

    When the user resizes the window, the size will move in steps of
    sizeIncrement().width() pixels horizontally and
    sizeIncrement.height() pixels vertically, with baseSize() as the
    basis. Preferred widget sizes are for non-negative integers \e i
    and \e j:
    \snippet code/src_gui_kernel_qwidget.cpp 2

    Note that while you can set the size increment for all widgets, it
    only affects windows.

    By default, this property contains a size with zero width and height.

    \warning The size increment has no effect under Windows, and may
    be disregarded by the window manager on X11.

    \sa size, minimumSize, maximumSize
*/
QSize QWidget::sizeIncrement() const

Rustdoc:

When the user resizes the window, the size will move in steps of
sizeIncrement().width() pixels horizontally and
sizeIncrement.height() pixels vertically, with baseSize() as the
basis. Preferred widget sizes are for non-negative integers *i*
and *j:*

Note that while you can set the size increment for all widgets, it
only affects windows.

By default, this property contains a size with zero width and height.

**Warning**: The size increment has no effect under Windows, and may
be disregarded by the window manager on X11.

**See also:** FilteredLinkSeeAlsosize
FilteredLinkSeeAlsominimumSize
FilteredLinkSeeAlsomaximumSize

Entry 57
Brief: the base size of the widget
Property: QWidget::baseSize

QDoc:
/*!
    \property QWidget::baseSize
    \brief the base size of the widget

    The base size is used to calculate a proper widget size if the
    widget defines sizeIncrement().

    By default, for a newly-created widget, this property contains a size with
    zero width and height.

    \sa setSizeIncrement()
*/

QSize QWidget::baseSize() const

Rustdoc:

The base size is used to calculate a proper widget size if the
widget defines sizeIncrement().

By default, for a newly-created widget, this property contains a size with
zero width and height.

**See also:** FilteredLinkSeeAlsosetSizeIncrement()

Entry 58
Function: FilteredFunctionvoid QWidget::setMinimumSize(int minw, int minh)

QDoc:
/*!
    \overload

    This function corresponds to setMinimumSize(QSize(minw, minh)).
    Sets the minimum width to \a minw and the minimum height to \a
    minh.
*/

void QWidget::setMinimumSize(int minw, int minh)

Rustdoc:

**Overloads** FilteredOverload
This function corresponds to setMinimumSize(QSize(minw, minh)).
Sets the minimum width to *minw* and the minimum height to *minh.*

Entry 59
Function: FilteredFunctionvoid QWidget::setMaximumSize(int maxw, int maxh)

QDoc:
/*!
    \overload

    This function corresponds to setMaximumSize(QSize(\a maxw, \a
    maxh)). Sets the maximum width to \a maxw and the maximum height
    to \a maxh.
*/
void QWidget::setMaximumSize(int maxw, int maxh)

Rustdoc:

**Overloads** FilteredOverload
This function corresponds to setMaximumSize(QSize( *maxw,* *maxh)).* Sets the maximum width to *maxw* and the maximum height
to *maxh.*

Entry 60
Function: FilteredFunctionvoid QWidget::setSizeIncrement(int w, int h)

QDoc:
/*!
    \overload

    Sets the x (width) size increment to \a w and the y (height) size
    increment to \a h.
*/
void QWidget::setSizeIncrement(int w, int h)

Rustdoc:

**Overloads** FilteredOverload
Sets the x (width) size increment to *w* and the y (height) size
increment to *h.*

Entry 61
Function: FilteredFunctionvoid QWidget::setBaseSize(int basew, int baseh)

QDoc:
/*!
    \overload

    This corresponds to setBaseSize(QSize(\a basew, \a baseh)). Sets
    the widgets base size to width \a basew and height \a baseh.
*/
void QWidget::setBaseSize(int basew, int baseh)

Rustdoc:

**Overloads** FilteredOverload
This corresponds to setBaseSize(QSize( *basew,* *baseh)).* Sets
the widgets base size to width *basew* and height *baseh.*

Entry 62
Function: FilteredFunctionvoid QWidget::setFixedSize(const QSize & s)

QDoc:
/*!
    Sets both the minimum and maximum sizes of the widget to \a s,
    thereby preventing it from ever growing or shrinking.

    This will override the default size constraints set by QLayout.

    To remove constraints, set the size to QWIDGETSIZE_MAX.

    Alternatively, if you want the widget to have a
    fixed size based on its contents, you can call
    QLayout::setSizeConstraint(QLayout::SetFixedSize);

    \sa maximumSize, minimumSize
*/

void QWidget::setFixedSize(const QSize & s)

Rustdoc:

Sets both the minimum and maximum sizes of the widget to *s,*
thereby preventing it from ever growing or shrinking.

This will override the default size constraints set by QLayout.

To remove constraints, set the size to QWIDGETSIZE_MAX.

Alternatively, if you want the widget to have a
fixed size based on its contents, you can call
QLayout::setSizeConstraint(QLayout::SetFixedSize);

**See also:** FilteredLinkSeeAlsomaximumSize
FilteredLinkSeeAlsominimumSize

Entry 63
Function: FilteredFunctionvoid QWidget::setFixedSize(int w, int h)

QDoc:
/*!
    \fn void QWidget::setFixedSize(int w, int h)
    \overload

    Sets the width of the widget to \a w and the height to \a h.
*/

void QWidget::setFixedSize(int w, int h)

Rustdoc:

**Overloads** FilteredOverload
Sets the width of the widget to *w* and the height to *h.*

Entry 64
Function: FilteredFunctionvoid QWidget::setFixedWidth(int w)

QDoc:
/*!
    Sets both the minimum and maximum width of the widget to \a w
    without changing the heights. Provided for convenience.

    \sa sizeHint(), minimumSize(), maximumSize(), setFixedSize()
*/

void QWidget::setFixedWidth(int w)

Rustdoc:

Sets both the minimum and maximum width of the widget to *w*
without changing the heights. Provided for convenience.

**See also:** FilteredLinkSeeAlsosizeHint()
FilteredLinkSeeAlsominimumSize()
FilteredLinkSeeAlsomaximumSize()
FilteredLinkSeeAlsosetFixedSize()

Entry 65
Function: FilteredFunctionvoid QWidget::setFixedHeight(int h)

QDoc:
/*!
    Sets both the minimum and maximum heights of the widget to \a h
    without changing the widths. Provided for convenience.

    \sa sizeHint(), minimumSize(), maximumSize(), setFixedSize()
*/

void QWidget::setFixedHeight(int h)

Rustdoc:

Sets both the minimum and maximum heights of the widget to *h*
without changing the widths. Provided for convenience.

**See also:** FilteredLinkSeeAlsosizeHint()
FilteredLinkSeeAlsominimumSize()
FilteredLinkSeeAlsomaximumSize()
FilteredLinkSeeAlsosetFixedSize()

Entry 66
Function: FilteredFunctionQPoint QWidget::mapTo(const QWidget * parent, const QPoint & pos) const

QDoc:
/*!
    Translates the widget coordinate \a pos to the coordinate system
    of \a parent. The \a parent must not be 0 and must be a parent
    of the calling widget.

    \sa mapFrom(), mapToParent(), mapToGlobal(), underMouse()
*/

QPoint QWidget::mapTo(const QWidget * parent, const QPoint & pos) const

Rustdoc:

Translates the widget coordinate *pos* to the coordinate system
of *parent.* The *parent* must not be 0 and must be a parent
of the calling widget.

**See also:** FilteredLinkSeeAlsomapFrom()
FilteredLinkSeeAlsomapToParent()
FilteredLinkSeeAlsomapToGlobal()
FilteredLinkSeeAlsounderMouse()

Entry 67
Function: FilteredFunctionQPoint QWidget::mapFrom(const QWidget * parent, const QPoint & pos) const

QDoc:
/*!
    Translates the widget coordinate \a pos from the coordinate system
    of \a parent to this widget's coordinate system. The \a parent
    must not be 0 and must be a parent of the calling widget.

    \sa mapTo(), mapFromParent(), mapFromGlobal(), underMouse()
*/

QPoint QWidget::mapFrom(const QWidget * parent, const QPoint & pos) const

Rustdoc:

Translates the widget coordinate *pos* from the coordinate system
of *parent* to this widget's coordinate system. The *parent*
must not be 0 and must be a parent of the calling widget.

**See also:** FilteredLinkSeeAlsomapTo()
FilteredLinkSeeAlsomapFromParent()
FilteredLinkSeeAlsomapFromGlobal()
FilteredLinkSeeAlsounderMouse()

Entry 68
Function: FilteredFunctionQPoint QWidget::mapToParent(const QPoint &pos) const

QDoc:
/*!
    Translates the widget coordinate \a pos to a coordinate in the
    parent widget.

    Same as mapToGlobal() if the widget has no parent.

    \sa mapFromParent(), mapTo(), mapToGlobal(), underMouse()
*/

QPoint QWidget::mapToParent(const QPoint &pos) const

Rustdoc:

Translates the widget coordinate *pos* to a coordinate in the
parent widget.

Same as mapToGlobal() if the widget has no parent.

**See also:** FilteredLinkSeeAlsomapFromParent()
FilteredLinkSeeAlsomapTo()
FilteredLinkSeeAlsomapToGlobal()
FilteredLinkSeeAlsounderMouse()

Entry 69
Function: FilteredFunctionQPoint QWidget::mapFromParent(const QPoint &pos) const

QDoc:
/*!
    Translates the parent widget coordinate \a pos to widget
    coordinates.

    Same as mapFromGlobal() if the widget has no parent.

    \sa mapToParent(), mapFrom(), mapFromGlobal(), underMouse()
*/

QPoint QWidget::mapFromParent(const QPoint &pos) const

Rustdoc:

Translates the parent widget coordinate *pos* to widget
coordinates.

Same as mapFromGlobal() if the widget has no parent.

**See also:** FilteredLinkSeeAlsomapToParent()
FilteredLinkSeeAlsomapFrom()
FilteredLinkSeeAlsomapFromGlobal()
FilteredLinkSeeAlsounderMouse()

Entry 70
Function: FilteredFunctionQWidget *QWidget::window() const

QDoc:
/*!
    Returns the window for this widget, i.e. the next ancestor widget
    that has (or could have) a window-system frame.

    If the widget is a window, the widget itself is returned.

    Typical usage is changing the window title:

    \snippet code/src_gui_kernel_qwidget.cpp 3

    \sa isWindow()
*/

QWidget *QWidget::window() const

Rustdoc:

Returns the window for this widget, i.e. the next ancestor widget
that has (or could have) a window-system frame.

If the widget is a window, the widget itself is returned.

Typical usage is changing the window title:

**See also:** FilteredLinkSeeAlsoisWindow()

Entry 71
Function: FilteredFunctionQWidget *QWidget::nativeParentWidget() const

QDoc:
/*!
    \since 4.4

    Returns the native parent for this widget, i.e. the next ancestor widget
    that has a system identifier, or 0 if it does not have any native parent.

    \sa effectiveWinId()
*/
QWidget *QWidget::nativeParentWidget() const

Rustdoc:

Returns the native parent for this widget, i.e. the next ancestor widget
that has a system identifier, or 0 if it does not have any native parent.

**See also:** FilteredLinkSeeAlsoeffectiveWinId()

Entry 72
Function: FilteredFunctionQWidget *QWidget::topLevelWidget() const

QDoc:
/*! \fn QWidget *QWidget::topLevelWidget() const
    \obsolete

    Use window() instead.
*/

Rustdoc:

Use window() instead.

Entry 73
Function: FilteredFunctionQPalette::ColorRole QWidget::backgroundRole() const

QDoc:
/*!
  Returns the background role of the widget.

  The background role defines the brush from the widget's \l palette that
  is used to render the background.

  If no explicit background role is set, the widget inherts its parent
  widget's background role.

  \sa setBackgroundRole(), foregroundRole()
 */
QPalette::ColorRole QWidget::backgroundRole() const

Rustdoc:

Returns the background role of the widget.

The background role defines the brush from the widget's [FilteredLinkNamepalette](FilteredLinkUrlpalette)
that
is used to render the background.

If no explicit background role is set, the widget inherts its parent
widget's background role.

**See also:** FilteredLinkSeeAlsosetBackgroundRole()
FilteredLinkSeeAlsoforegroundRole()

Entry 74
Function: FilteredFunctionvoid QWidget::setBackgroundRole(QPalette::ColorRole role)

QDoc:
/*!
  Sets the background role of the widget to \a role.

  The background role defines the brush from the widget's \l palette that
  is used to render the background.

  If \a role is QPalette::NoRole, then the widget inherits its
  parent's background role.

  Note that styles are free to choose any color from the palette.
  You can modify the palette or set a style sheet if you don't
  achieve the result you want with setBackgroundRole().

  \sa backgroundRole(), foregroundRole()
 */

void QWidget::setBackgroundRole(QPalette::ColorRole role)

Rustdoc:

Sets the background role of the widget to *role.*

The background role defines the brush from the widget's [FilteredLinkNamepalette](FilteredLinkUrlpalette)
that
is used to render the background.

If *role* is QPalette::NoRole, then the widget inherits its
parent's background role.

Note that styles are free to choose any color from the palette.
You can modify the palette or set a style sheet if you don't
achieve the result you want with setBackgroundRole().

**See also:** FilteredLinkSeeAlsobackgroundRole()
FilteredLinkSeeAlsoforegroundRole()

Entry 75
Function: FilteredFunctionQPalette::ColorRole QWidget::foregroundRole() const

QDoc:
/*!
  Returns the foreground role.

  The foreground role defines the color from the widget's \l palette that
  is used to draw the foreground.

  If no explicit foreground role is set, the function returns a role
  that contrasts with the background role.

  \sa setForegroundRole(), backgroundRole()
 */
QPalette::ColorRole QWidget::foregroundRole() const

Rustdoc:

Returns the foreground role.

The foreground role defines the color from the widget's [FilteredLinkNamepalette](FilteredLinkUrlpalette)
that
is used to draw the foreground.

If no explicit foreground role is set, the function returns a role
that contrasts with the background role.

**See also:** FilteredLinkSeeAlsosetForegroundRole()
FilteredLinkSeeAlsobackgroundRole()

Entry 76
Function: FilteredFunctionvoid QWidget::setForegroundRole(QPalette::ColorRole role)

QDoc:
/*!
  Sets the foreground role of the widget to \a role.

  The foreground role defines the color from the widget's \l palette that
  is used to draw the foreground.

  If \a role is QPalette::NoRole, the widget uses a foreground role
  that contrasts with the background role.

  Note that styles are free to choose any color from the palette.
  You can modify the palette or set a style sheet if you don't
  achieve the result you want with setForegroundRole().

  \sa foregroundRole(), backgroundRole()
 */
void QWidget::setForegroundRole(QPalette::ColorRole role)

Rustdoc:

Sets the foreground role of the widget to *role.*

The foreground role defines the color from the widget's [FilteredLinkNamepalette](FilteredLinkUrlpalette)
that
is used to draw the foreground.

If *role* is QPalette::NoRole, the widget uses a foreground role
that contrasts with the background role.

Note that styles are free to choose any color from the palette.
You can modify the palette or set a style sheet if you don't
achieve the result you want with setForegroundRole().

**See also:** FilteredLinkSeeAlsoforegroundRole()
FilteredLinkSeeAlsobackgroundRole()

Entry 77
Brief: the widget's palette
Property: QWidget::palette

QDoc:
/*!
    \property QWidget::palette
    \brief the widget's palette

    This property describes the widget's palette. The palette is used by the
    widget's style when rendering standard components, and is available as a
    means to ensure that custom widgets can maintain consistency with the
    native platform's look and feel. It's common that different platforms, or
    different styles, have different palettes.

    When you assign a new palette to a widget, the color roles from this
    palette are combined with the widget's default palette to form the
    widget's final palette. The palette entry for the widget's background role
    is used to fill the widget's background (see QWidget::autoFillBackground),
    and the foreground role initializes QPainter's pen.

    The default depends on the system environment. QApplication maintains a
    system/theme palette which serves as a default for all widgets.  There may
    also be special palette defaults for certain types of widgets (e.g., on
    Windows Vista, all classes that derive from QMenuBar have a special
    default palette). You can also define default palettes for widgets
    yourself by passing a custom palette and the name of a widget to
    QApplication::setPalette(). Finally, the style always has the option of
    polishing the palette as it's assigned (see QStyle::polish()).

    QWidget propagates explicit palette roles from parent to child. If you
    assign a brush or color to a specific role on a palette and assign that
    palette to a widget, that role will propagate to all the widget's
    children, overriding any system defaults for that role. Note that palettes
    by default don't propagate to windows (see isWindow()) unless the
    Qt::WA_WindowPropagation attribute is enabled.

    QWidget's palette propagation is similar to its font propagation.

    The current style, which is used to render the content of all standard Qt
    widgets, is free to choose colors and brushes from the widget palette, or
    in some cases, to ignore the palette (partially, or completely). In
    particular, certain styles like GTK style, Mac style, and Windows Vista
    style, depend on third party APIs to render the content of widgets,
    and these styles typically do not follow the palette. Because of this,
    assigning roles to a widget's palette is not guaranteed to change the
    appearance of the widget. Instead, you may choose to apply a \l
    styleSheet. You can refer to our Knowledge Base article
    \l{http://qt.nokia.com/developer/knowledgebase/22}{here} for more
    information.

    \warning Do not use this function in conjunction with \l{Qt Style Sheets}.
    When using style sheets, the palette of a widget can be customized using
    the "color", "background-color", "selection-color",
    "selection-background-color" and "alternate-background-color".

    \sa QApplication::palette(), QWidget::font()
*/
const QPalette &QWidget::palette() const

Rustdoc:

This property describes the widget's palette. The palette is used by the
widget's style when rendering standard components, and is available as a
means to ensure that custom widgets can maintain consistency with the
native platform's look and feel. It's common that different platforms, or
different styles, have different palettes.

When you assign a new palette to a widget, the color roles from this
palette are combined with the widget's default palette to form the
widget's final palette. The palette entry for the widget's background role
is used to fill the widget's background (see QWidget::autoFillBackground),
and the foreground role initializes QPainter's pen.

The default depends on the system environment. QApplication maintains a
system/theme palette which serves as a default for all widgets. There may
also be special palette defaults for certain types of widgets (e.g., on
Windows Vista, all classes that derive from QMenuBar have a special
default palette). You can also define default palettes for widgets
yourself by passing a custom palette and the name of a widget to
QApplication::setPalette(). Finally, the style always has the option of
polishing the palette as it's assigned (see QStyle::polish()).

QWidget propagates explicit palette roles from parent to child. If you
assign a brush or color to a specific role on a palette and assign that
palette to a widget, that role will propagate to all the widget's
children, overriding any system defaults for that role. Note that palettes
by default don't propagate to windows (see isWindow()) unless the
Qt::WA_WindowPropagation attribute is enabled.

QWidget's palette propagation is similar to its font propagation.

The current style, which is used to render the content of all standard Qt
widgets, is free to choose colors and brushes from the widget palette, or
in some cases, to ignore the palette (partially, or completely). In
particular, certain styles like GTK style, Mac style, and Windows Vista
style, depend on third party APIs to render the content of widgets,
and these styles typically do not follow the palette. Because of this,
assigning roles to a widget's palette is not guaranteed to change the
appearance of the widget. Instead, you may choose to apply a [FilteredLinkNamestyleSheet.](FilteredLinkUrlstyleSheet.)
You can refer to our Knowledge Base article
[FilteredLinkNamehere](FilteredLinkUrlhttp://qt.nokia.com/developer/knowledgebase/22)
for more
information.

**Warning**: Do not use this function in conjunction with [FilteredLinkNameQt Style Sheets](FilteredLinkUrlQt%20Style%20Sheets)
.
When using style sheets, the palette of a widget can be customized using
the , , ,
and .

**See also:** FilteredLinkSeeAlsoQApplication::palette()
FilteredLinkSeeAlsoQWidget::font()

Entry 78
Brief: the font currently set for the widget
Property: QWidget::font

QDoc:
/*!
    \property QWidget::font
    \brief the font currently set for the widget

    This property describes the widget's requested font. The font is used by
    the widget's style when rendering standard components, and is available as
    a means to ensure that custom widgets can maintain consistency with the
    native platform's look and feel. It's common that different platforms, or
    different styles, define different fonts for an application.

    When you assign a new font to a widget, the properties from this font are
    combined with the widget's default font to form the widget's final
    font. You can call fontInfo() to get a copy of the widget's final
    font. The final font is also used to initialize QPainter's font.

    The default depends on the system environment. QApplication maintains a
    system/theme font which serves as a default for all widgets.  There may
    also be special font defaults for certain types of widgets. You can also
    define default fonts for widgets yourself by passing a custom font and the
    name of a widget to QApplication::setFont(). Finally, the font is matched
    against Qt's font database to find the best match.

    QWidget propagates explicit font properties from parent to child. If you
    change a specific property on a font and assign that font to a widget,
    that property will propagate to all the widget's children, overriding any
    system defaults for that property. Note that fonts by default don't
    propagate to windows (see isWindow()) unless the Qt::WA_WindowPropagation
    attribute is enabled.

    QWidget's font propagation is similar to its palette propagation.

    The current style, which is used to render the content of all standard Qt
    widgets, is free to choose to use the widget font, or in some cases, to
    ignore it (partially, or completely). In particular, certain styles like
    GTK style, Mac style, and Windows Vista style, apply special
    modifications to the widget font to match the platform's native look and
    feel. Because of this, assigning properties to a widget's font is not
    guaranteed to change the appearance of the widget. Instead, you may choose
    to apply a \l styleSheet.

    \note If \l{Qt Style Sheets} are used on the same widget as setFont(),
    style sheets will take precedence if the settings conflict.

    \sa fontInfo(), fontMetrics()
*/

void QWidget::setFont(const QFont &font)

Rustdoc:

This property describes the widget's requested font. The font is used by
the widget's style when rendering standard components, and is available as
a means to ensure that custom widgets can maintain consistency with the
native platform's look and feel. It's common that different platforms, or
different styles, define different fonts for an application.

When you assign a new font to a widget, the properties from this font are
combined with the widget's default font to form the widget's final
font. You can call fontInfo() to get a copy of the widget's final
font. The final font is also used to initialize QPainter's font.

The default depends on the system environment. QApplication maintains a
system/theme font which serves as a default for all widgets. There may
also be special font defaults for certain types of widgets. You can also
define default fonts for widgets yourself by passing a custom font and the
name of a widget to QApplication::setFont(). Finally, the font is matched
against Qt's font database to find the best match.

QWidget propagates explicit font properties from parent to child. If you
change a specific property on a font and assign that font to a widget,
that property will propagate to all the widget's children, overriding any
system defaults for that property. Note that fonts by default don't
propagate to windows (see isWindow()) unless the Qt::WA_WindowPropagation
attribute is enabled.

QWidget's font propagation is similar to its palette propagation.

The current style, which is used to render the content of all standard Qt
widgets, is free to choose to use the widget font, or in some cases, to
ignore it (partially, or completely). In particular, certain styles like
GTK style, Mac style, and Windows Vista style, apply special
modifications to the widget font to match the platform's native look and
feel. Because of this, assigning properties to a widget's font is not
guaranteed to change the appearance of the widget. Instead, you may choose
to apply a [FilteredLinkNamestyleSheet.](FilteredLinkUrlstyleSheet.)

**Note**: If [FilteredLinkNameQt Style Sheets](FilteredLinkUrlQt%20Style%20Sheets)
are used on the same widget as setFont(),
style sheets will take precedence if the settings conflict.

**See also:** FilteredLinkSeeAlsofontInfo()
FilteredLinkSeeAlsofontMetrics()

Entry 79
Brief: the layout direction for this widget
Property: QWidget::layoutDirection

QDoc:
/*!
    \property QWidget::layoutDirection

    \brief the layout direction for this widget

    By default, this property is set to Qt::LeftToRight.

    When the layout direction is set on a widget, it will propagate to
    the widget's children, but not to a child that is a window and not
    to a child for which setLayoutDirection() has been explicitly
    called. Also, child widgets added \e after setLayoutDirection()
    has been called for the parent do not inherit the parent's layout
    direction.

    This method no longer affects text layout direction since Qt 4.7.

    \sa QApplication::layoutDirection
*/
void QWidget::setLayoutDirection(Qt::LayoutDirection direction)

Rustdoc:

By default, this property is set to Qt::LeftToRight.

When the layout direction is set on a widget, it will propagate to
the widget's children, but not to a child that is a window and not
to a child for which setLayoutDirection() has been explicitly
called. Also, child widgets added *after* setLayoutDirection()
has been called for the parent do not inherit the parent's layout
direction.

This method no longer affects text layout direction since Qt 4.7.

**See also:** FilteredLinkSeeAlsoQApplication::layoutDirection

Entry 80
Function: FilteredFunctionQFontMetrics QWidget::fontMetrics() const

QDoc:
/*!
    \fn QFontMetrics QWidget::fontMetrics() const

    Returns the font metrics for the widget's current font.
    Equivalent to \c QFontMetrics(widget->font()).

    \sa font(), fontInfo(), setFont()
*/

Rustdoc:

Returns the font metrics for the widget's current font.
Equivalent to `QFontMetrics(widget->font()).`

**See also:** FilteredLinkSeeAlsofont()
FilteredLinkSeeAlsofontInfo()
FilteredLinkSeeAlsosetFont()

Entry 81
Function: FilteredFunctionQFontInfo QWidget::fontInfo() const

QDoc:
/*!
    \fn QFontInfo QWidget::fontInfo() const

    Returns the font info for the widget's current font.
    Equivalent to \c QFontInfo(widget->font()).

    \sa font(), fontMetrics(), setFont()
*/

Rustdoc:

Returns the font info for the widget's current font.
Equivalent to `QFontInfo(widget->font()).`

**See also:** FilteredLinkSeeAlsofont()
FilteredLinkSeeAlsofontMetrics()
FilteredLinkSeeAlsosetFont()

Entry 82
Brief: the cursor shape for this widget
Property: QWidget::cursor

QDoc:
/*!
    \property QWidget::cursor
    \brief the cursor shape for this widget

    The mouse cursor will assume this shape when it's over this
    widget. See the \l{Qt::CursorShape}{list of predefined cursor objects} for a range of useful shapes.

    An editor widget might use an I-beam cursor:
    \snippet code/src_gui_kernel_qwidget.cpp 6

    If no cursor has been set, or after a call to unsetCursor(), the
    parent's cursor is used.

    By default, this property contains a cursor with the Qt::ArrowCursor
    shape.

    Some underlying window implementations will reset the cursor if it
    leaves a widget even if the mouse is grabbed. If you want to have
    a cursor set for all widgets, even when outside the window, consider
    QApplication::setOverrideCursor().

    \sa QApplication::setOverrideCursor()
*/

Rustdoc:

The mouse cursor will assume this shape when it's over this
widget. See the [FilteredLinkNamelist of predefined cursor objects](FilteredLinkUrlQt::CursorShape)
for a range of useful shapes.

An editor widget might use an I-beam cursor:

If no cursor has been set, or after a call to unsetCursor(), the
parent's cursor is used.

By default, this property contains a cursor with the Qt::ArrowCursor
shape.

Some underlying window implementations will reset the cursor if it
leaves a widget even if the mouse is grabbed. If you want to have
a cursor set for all widgets, even when outside the window, consider
QApplication::setOverrideCursor().

**See also:** FilteredLinkSeeAlsoQApplication::setOverrideCursor()

Entry 83
Enum: QWidget::RenderFlag
      IgnoreMask: If you enable this option, the widget's QWidget::mask()
      DrawChildren: If you enable this option, the widget's children
      DrawWindowBackground: If you enable this option, the widget's background

QDoc:
/*!
    \enum QWidget::RenderFlag

    This enum describes how to render the widget when calling QWidget::render().

    \value DrawWindowBackground If you enable this option, the widget's background
    is rendered into the target even if autoFillBackground is not set. By default,
    this option is enabled.

    \value DrawChildren If you enable this option, the widget's children
    are rendered recursively into the target. By default, this option is enabled.

    \value IgnoreMask If you enable this option, the widget's QWidget::mask()
    is ignored when rendering into the target. By default, this option is disabled.

    \since 4.3
*/

Rustdoc:

This enum describes how to render the widget when calling QWidget::render().

is rendered into the target even if autoFillBackground is not set. By default,
this option is enabled.

are rendered recursively into the target. By default, this option is enabled.

is ignored when rendering into the target. By default, this option is disabled.


Entry 84
Function: FilteredFunctionvoid QWidget::render(QPaintDevice *target, const QPoint &targetOffset,
                     const QRegion &sourceRegion, RenderFlags renderFlags)

QDoc:
/*!
    \since 4.3

    Renders the \a sourceRegion of this widget into the \a target
    using \a renderFlags to determine how to render. Rendering
    starts at \a targetOffset in the \a target. For example:

    \snippet code/src_gui_kernel_qwidget.cpp 7

    If \a sourceRegion is a null region, this function will use QWidget::rect() as
    the region, i.e. the entire widget.

    Ensure that you call QPainter::end() for the \a target device's
    active painter (if any) before rendering. For example:

    \snippet code/src_gui_kernel_qwidget.cpp 8

    \note To obtain the contents of a QOpenGLWidget, use QOpenGLWidget::grabFramebuffer()
    instead.

    \note To obtain the contents of a QGLWidget (deprecated), use
    QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.
*/
void QWidget::render(QPaintDevice *target, const QPoint &targetOffset,
                     const QRegion &sourceRegion, RenderFlags renderFlags)

Rustdoc:

Renders the *sourceRegion* of this widget into the *target*
using *renderFlags* to determine how to render. Rendering
starts at *targetOffset* in the *target.* For example:

If *sourceRegion* is a null region, this function will use QWidget::rect() as
the region, i.e. the entire widget.

Ensure that you call QPainter::end() for the *target* device's
active painter (if any) before rendering. For example:

**Note**: To obtain the contents of a QOpenGLWidget, use QOpenGLWidget::grabFramebuffer()
instead.

**Note**: To obtain the contents of a QGLWidget (deprecated), use
QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.

Entry 85
Function: FilteredFunctionvoid QWidget::render(QPainter *painter, const QPoint &targetOffset,
                     const QRegion &sourceRegion, RenderFlags renderFlags)

QDoc:
/*!
    \overload

    Renders the widget into the \a painter's QPainter::device().

    Transformations and settings applied to the \a painter will be used
    when rendering.

    \note The \a painter must be active. On \macos the widget will be
    rendered into a QPixmap and then drawn by the \a painter.

    \sa QPainter::device()
*/
void QWidget::render(QPainter *painter, const QPoint &targetOffset,
                     const QRegion &sourceRegion, RenderFlags renderFlags)

Rustdoc:

**Overloads** FilteredOverload
Renders the widget into the *painter's* QPainter::device().

Transformations and settings applied to the *painter* will be used
when rendering.

**Note**: The *painter* must be active. On MacOS the widget will be
rendered into a QPixmap and then drawn by the *painter.*

**See also:** FilteredLinkSeeAlsoQPainter::device()

Entry 86
Function: FilteredFunctionQPixmap QWidget::grab(const QRect &rectangle)

QDoc:
/*!
    \since 5.0

    Renders the widget into a pixmap restricted by the
    given \a rectangle. If the widget has any children, then
    they are also painted in the appropriate positions.

    If a rectangle with an invalid size is specified  (the default),
    the entire widget is painted.

    \sa render(), QPixmap
*/
QPixmap QWidget::grab(const QRect &rectangle)

Rustdoc:

Renders the widget into a pixmap restricted by the
given *rectangle.* If the widget has any children, then
they are also painted in the appropriate positions.

If a rectangle with an invalid size is specified (the default),
the entire widget is painted.

**See also:** FilteredLinkSeeAlsorender()
FilteredLinkSeeAlsoQPixmap

Entry 87
Brief: The graphicsEffect function returns a pointer to the
    widget's graphics effect.

QDoc:
/*!
    \brief The graphicsEffect function returns a pointer to the
    widget's graphics effect.

    If the widget has no graphics effect, 0 is returned.

    \since 4.6

    \sa setGraphicsEffect()
*/

Rustdoc:

If the widget has no graphics effect, 0 is returned.

**See also:** FilteredLinkSeeAlsosetGraphicsEffect()

Entry 88
Brief: The setGraphicsEffect function is for setting the widget's graphics effect.

QDoc:
/*!

  \brief The setGraphicsEffect function is for setting the widget's graphics effect.

    Sets \a effect as the widget's effect. If there already is an effect installed
    on this widget, QWidget will delete the existing effect before installing
    the new \a effect.

    If \a effect is the installed effect on a different widget, setGraphicsEffect() will remove
    the effect from the widget and install it on this widget.

    QWidget takes ownership of \a effect.

    \note This function will apply the effect on itself and all its children.

    \note Graphics effects are not supported for OpenGL-based widgets, such as QGLWidget,
    QOpenGLWidget and QQuickWidget.

    \since 4.6

    \sa graphicsEffect()
*/

Rustdoc:

Sets *effect* as the widget's effect. If there already is an effect installed
on this widget, QWidget will delete the existing effect before installing
the new *effect.*

If *effect* is the installed effect on a different widget, setGraphicsEffect() will remove
the effect from the widget and install it on this widget.

QWidget takes ownership of *effect.*

**Note**: This function will apply the effect on itself and all its children.

**Note**: Graphics effects are not supported for OpenGL-based widgets, such as QGLWidget,
QOpenGLWidget and QQuickWidget.

**See also:** FilteredLinkSeeAlsographicsEffect()

Entry 89
Brief: the widget's locale
Property: QWidget::locale

QDoc:
/*!
    \property QWidget::locale
    \brief the widget's locale
    \since 4.3

    As long as no special locale has been set, this is either
    the parent's locale or (if this widget is a top level widget),
    the default locale.

    If the widget displays dates or numbers, these should be formatted
    using the widget's locale.

    \sa QLocale, QLocale::setDefault()
*/

void QWidgetPrivate::setLocale_helper(const QLocale &loc, bool forceUpdate)

Rustdoc:

As long as no special locale has been set, this is either
the parent's locale or (if this widget is a top level widget),
the default locale.

If the widget displays dates or numbers, these should be formatted
using the widget's locale.

**See also:** FilteredLinkSeeAlsoQLocale
FilteredLinkSeeAlsoQLocale::setDefault()

Entry 90
Brief: the window title (caption)
Property: QWidget::windowTitle

QDoc:
/*!
    \property QWidget::windowTitle
    \brief the window title (caption)

    This property only makes sense for top-level widgets, such as
    windows and dialogs. If no caption has been set, the title is based of the
    \l windowFilePath. If neither of these is set, then the title is
    an empty string.

    If you use the \l windowModified mechanism, the window title must
    contain a "[*]" placeholder, which indicates where the '*' should
    appear. Normally, it should appear right after the file name
    (e.g., "document1.txt[*] - Text Editor"). If the \l
    windowModified property is \c false (the default), the placeholder
    is simply removed.

    On some desktop platforms (including Windows and Unix), the application name
    (from QGuiApplication::applicationDisplayName) is added at the end of the
    window title, if set. This is done by the QPA plugin, so it is shown to the
    user, but isn't part of the windowTitle string.

    \sa windowIcon, windowModified, windowFilePath
*/
QString QWidget::windowTitle() const

Rustdoc:

This property only makes sense for top-level widgets, such as
windows and dialogs. If no caption has been set, the title is based of the
[FilteredLinkNamewindowFilePath.](FilteredLinkUrlwindowFilePath.)
If neither of these is set, then the title is
an empty string.

If you use the [FilteredLinkNamewindowModified](FilteredLinkUrlwindowModified)
mechanism, the window title must
contain a placeholder, which indicates where the '*' should
appear. Normally, it should appear right after the file name
(e.g., ). If the [FilteredLinkNamewindowModified](FilteredLinkUrlwindowModified)
property is `false` (the default), the placeholder
is simply removed.

On some desktop platforms (including Windows and Unix), the application name
(from QGuiApplication::applicationDisplayName) is added at the end of the
window title, if set. This is done by the QPA plugin, so it is shown to the
user, but isn't part of the windowTitle string.

**See also:** FilteredLinkSeeAlsowindowIcon
FilteredLinkSeeAlsowindowModified
FilteredLinkSeeAlsowindowFilePath

Entry 91
Function: FilteredFunctionvoid QWidget::windowIconTextChanged(const QString &iconText)

QDoc:
/*!
    \fn void QWidget::windowIconTextChanged(const QString &iconText)

    This signal is emitted when the window's icon text has changed, with the
    new \a iconText as an argument.

    \since 5.2
    \obsolete

    This signal is deprecated.
*/

void QWidget::setWindowIconText(const QString &iconText)

Rustdoc:

This signal is emitted when the window's icon text has changed, with the
new *iconText* as an argument.

This signal is deprecated.

Entry 92
Function: FilteredFunctionvoid QWidget::windowTitleChanged(const QString &title)

QDoc:
/*!
    \fn void QWidget::windowTitleChanged(const QString &title)

    This signal is emitted when the window's title has changed, with the
    new \a title as an argument.

    \since 5.2
*/

void QWidget::setWindowTitle(const QString &title)

Rustdoc:

This signal is emitted when the window's title has changed, with the
new *title* as an argument.


Entry 93
Brief: the widget's icon
Property: QWidget::windowIcon

QDoc:
/*!
    \property QWidget::windowIcon
    \brief the widget's icon

    This property only makes sense for windows. If no icon
    has been set, windowIcon() returns the application icon
    (QApplication::windowIcon()).

    \sa windowTitle
*/
QIcon QWidget::windowIcon() const

Rustdoc:

This property only makes sense for windows. If no icon
has been set, windowIcon() returns the application icon
(QApplication::windowIcon()).

**See also:** FilteredLinkSeeAlsowindowTitle

Entry 94
Function: FilteredFunctionvoid QWidget::windowIconChanged(const QIcon &icon)

QDoc:
/*!
    \fn void QWidget::windowIconChanged(const QIcon &icon)

    This signal is emitted when the window's icon has changed, with the
    new \a icon as an argument.

    \since 5.2
*/

void QWidget::setWindowIcon(const QIcon &icon)

Rustdoc:

This signal is emitted when the window's icon has changed, with the
new *icon* as an argument.


Entry 95
Brief: the text to be displayed on the icon of a minimized window
Property: QWidget::windowIconText

QDoc:
/*!
    \property QWidget::windowIconText
    \brief the text to be displayed on the icon of a minimized window

    This property only makes sense for windows. If no icon
    text has been set, this accessor returns an empty string.
    It is only implemented on the X11 platform, and only certain
    window managers use this window property.

    \obsolete
    This property is deprecated.

    \sa windowIcon, windowTitle
*/

QString QWidget::windowIconText() const

Rustdoc:

This property only makes sense for windows. If no icon
text has been set, this accessor returns an empty string.
It is only implemented on the X11 platform, and only certain
window managers use this window property.

This property is deprecated.

**See also:** FilteredLinkSeeAlsowindowIcon
FilteredLinkSeeAlsowindowTitle

Entry 96
Brief: the file path associated with a widget
Property: QWidget::windowFilePath

QDoc:
/*!
    \property QWidget::windowFilePath
    \since 4.4
    \brief the file path associated with a widget

    This property only makes sense for windows. It associates a file path with
    a window. If you set the file path, but have not set the window title, Qt
    sets the window title to the file name of the specified path, obtained using
    QFileInfo::fileName().

    If the window title is set at any point, then the window title takes precedence and
    will be shown instead of the file path string.

    Additionally, on \macos, this has an added benefit that it sets the
    \l{http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGWindows/chapter_17_section_3.html}{proxy icon}
    for the window, assuming that the file path exists.

    If no file path is set, this property contains an empty string.

    By default, this property contains an empty string.

    \sa windowTitle, windowIcon
*/

QString QWidget::windowFilePath() const

Rustdoc:

This property only makes sense for windows. It associates a file path with
a window. If you set the file path, but have not set the window title, Qt
sets the window title to the file name of the specified path, obtained using
QFileInfo::fileName().

If the window title is set at any point, then the window title takes precedence and
will be shown instead of the file path string.

Additionally, on MacOS , this has an added benefit that it sets the
[FilteredLinkNameproxy icon](FilteredLinkUrlhttp://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGWindows/chapter_17_section_3.html)

for the window, assuming that the file path exists.

If no file path is set, this property contains an empty string.

By default, this property contains an empty string.

**See also:** FilteredLinkSeeAlsowindowTitle
FilteredLinkSeeAlsowindowIcon

Entry 97
Function: FilteredFunctionQString QWidget::windowRole() const

QDoc:
/*!
    Returns the window's role, or an empty string.

    \sa windowIcon, windowTitle
*/

QString QWidget::windowRole() const

Rustdoc:

Returns the window's role, or an empty string.

**See also:** FilteredLinkSeeAlsowindowIcon
FilteredLinkSeeAlsowindowTitle

Entry 98
Function: FilteredFunctionvoid QWidget::setWindowRole(const QString &role)

QDoc:
/*!
    Sets the window's role to \a role. This only makes sense for
    windows on X11.
*/
void QWidget::setWindowRole(const QString &role)

Rustdoc:

Sets the window's role to *role.* This only makes sense for
windows on X11.

Entry 99
Brief: whether mouse tracking is enabled for the widget
Property: QWidget::mouseTracking

QDoc:
/*!
    \property QWidget::mouseTracking
    \brief whether mouse tracking is enabled for the widget

    If mouse tracking is disabled (the default), the widget only
    receives mouse move events when at least one mouse button is
    pressed while the mouse is being moved.

    If mouse tracking is enabled, the widget receives mouse move
    events even if no buttons are pressed.

    \sa mouseMoveEvent()
*/

Rustdoc:

If mouse tracking is disabled (the default), the widget only
receives mouse move events when at least one mouse button is
pressed while the mouse is being moved.

If mouse tracking is enabled, the widget receives mouse move
events even if no buttons are pressed.

**See also:** FilteredLinkSeeAlsomouseMoveEvent()

Entry 100
Brief: whether tablet tracking is enabled for the widget
Property: QWidget::tabletTracking

QDoc:
/*!
    \property QWidget::tabletTracking
    \brief whether tablet tracking is enabled for the widget
    \since 5.9

    If tablet tracking is disabled (the default), the widget only
    receives tablet move events when the stylus is in contact with
    the tablet, or at least one stylus button is pressed,
    while the stylus is being moved.

    If tablet tracking is enabled, the widget receives tablet move
    events even while hovering in proximity.  This is useful for
    monitoring position as well as the auxiliary properties such
    as rotation and tilt, and providing feedback in the UI.

    \sa tabletEvent()
*/

Rustdoc:

If tablet tracking is disabled (the default), the widget only
receives tablet move events when the stylus is in contact with
the tablet, or at least one stylus button is pressed,
while the stylus is being moved.

If tablet tracking is enabled, the widget receives tablet move
events even while hovering in proximity. This is useful for
monitoring position as well as the auxiliary properties such
as rotation and tilt, and providing feedback in the UI.

**See also:** FilteredLinkSeeAlsotabletEvent()

Entry 101
Function: FilteredFunctionvoid QWidget::setFocusProxy(QWidget * w)

QDoc:
/*!
    Sets the widget's focus proxy to widget \a w. If \a w is 0, the
    function resets this widget to have no focus proxy.

    Some widgets can "have focus", but create a child widget, such as
    QLineEdit, to actually handle the focus. In this case, the widget
    can set the line edit to be its focus proxy.

    setFocusProxy() sets the widget which will actually get focus when
    "this widget" gets it. If there is a focus proxy, setFocus() and
    hasFocus() operate on the focus proxy.

    \sa focusProxy()
*/

void QWidget::setFocusProxy(QWidget * w)

Rustdoc:

Sets the widget's focus proxy to widget *w.* If *w* is 0, the
function resets this widget to have no focus proxy.

Some widgets can , but create a child widget, such as
QLineEdit, to actually handle the focus. In this case, the widget
can set the line edit to be its focus proxy.

setFocusProxy() sets the widget which will actually get focus when
gets it. If there is a focus proxy, setFocus() and
hasFocus() operate on the focus proxy.

**See also:** FilteredLinkSeeAlsofocusProxy()

Entry 102
Function: FilteredFunctionQWidget * QWidget::focusProxy() const

QDoc:
/*!
    Returns the focus proxy, or 0 if there is no focus proxy.

    \sa setFocusProxy()
*/

QWidget * QWidget::focusProxy() const

Rustdoc:

Returns the focus proxy, or 0 if there is no focus proxy.

**See also:** FilteredLinkSeeAlsosetFocusProxy()

Entry 103
Brief: whether this widget (or its focus proxy) has the keyboard
    input focus
Property: QWidget::focus

QDoc:
/*!
    \property QWidget::focus
    \brief whether this widget (or its focus proxy) has the keyboard
    input focus

    By default, this property is \c false.

    \note Obtaining the value of this property for a widget is effectively equivalent
    to checking whether QApplication::focusWidget() refers to the widget.

    \sa setFocus(), clearFocus(), setFocusPolicy(), QApplication::focusWidget()
*/
bool QWidget::hasFocus() const

Rustdoc:

By default, this property is `false.`

**Note**: Obtaining the value of this property for a widget is effectively equivalent
to checking whether QApplication::focusWidget() refers to the widget.

**See also:** FilteredLinkSeeAlsosetFocus()
FilteredLinkSeeAlsoclearFocus()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsoQApplication::focusWidget()

Entry 104
Function: FilteredFunctionvoid QWidget::setFocus(Qt::FocusReason reason)

QDoc:
/*!
    Gives the keyboard input focus to this widget (or its focus
    proxy) if this widget or one of its parents is the \l{isActiveWindow()}{active window}. The \a reason argument will
    be passed into any focus event sent from this function, it is used
    to give an explanation of what caused the widget to get focus.
    If the window is not active, the widget will be given the focus when
    the window becomes active.

    First, a focus about to change event is sent to the focus widget (if any) to
    tell it that it is about to lose the focus. Then focus is changed, a
    focus out event is sent to the previous focus item and a focus in event is sent
    to the new item to tell it that it just received the focus.
    (Nothing happens if the focus in and focus out widgets are the
    same.)

    \note On embedded platforms, setFocus() will not cause an input panel
    to be opened by the input method. If you want this to happen, you
    have to send a QEvent::RequestSoftwareInputPanel event to the
    widget yourself.

    setFocus() gives focus to a widget regardless of its focus policy,
    but does not clear any keyboard grab (see grabKeyboard()).

    Be aware that if the widget is hidden, it will not accept focus
    until it is shown.

    \warning If you call setFocus() in a function which may itself be
    called from focusOutEvent() or focusInEvent(), you may get an
    infinite recursion.

    \sa hasFocus(), clearFocus(), focusInEvent(), focusOutEvent(),
    setFocusPolicy(), focusWidget(), QApplication::focusWidget(), grabKeyboard(),
    grabMouse(), {Keyboard Focus in Widgets}, QEvent::RequestSoftwareInputPanel
*/

void QWidget::setFocus(Qt::FocusReason reason)

Rustdoc:

Gives the keyboard input focus to this widget (or its focus
proxy) if this widget or one of its parents is the [FilteredLinkNameactive window](FilteredLinkUrlisActiveWindow())
. The *reason* argument will
be passed into any focus event sent from this function, it is used
to give an explanation of what caused the widget to get focus.
If the window is not active, the widget will be given the focus when
the window becomes active.

First, a focus about to change event is sent to the focus widget (if any) to
tell it that it is about to lose the focus. Then focus is changed, a
focus out event is sent to the previous focus item and a focus in event is sent
to the new item to tell it that it just received the focus.
(Nothing happens if the focus in and focus out widgets are the
same.)

**Note**: On embedded platforms, setFocus() will not cause an input panel
to be opened by the input method. If you want this to happen, you
have to send a QEvent::RequestSoftwareInputPanel event to the
widget yourself.

setFocus() gives focus to a widget regardless of its focus policy,
but does not clear any keyboard grab (see grabKeyboard()).

Be aware that if the widget is hidden, it will not accept focus
until it is shown.

**Warning**: If you call setFocus() in a function which may itself be
called from focusOutEvent() or focusInEvent(), you may get an
infinite recursion.

**See also:** FilteredLinkSeeAlsohasFocus()
FilteredLinkSeeAlsoclearFocus()
FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsofocusWidget()
FilteredLinkSeeAlsoQApplication::focusWidget()
FilteredLinkSeeAlsograbKeyboard()
FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlso{Keyboard Focus in Widgets}
FilteredLinkSeeAlsoQEvent::RequestSoftwareInputPanel

Entry 105
Function: FilteredFunctionvoid QWidget::setFocus()

QDoc:
/*!
    \fn void QWidget::setFocus()
    \overload

    Gives the keyboard input focus to this widget (or its focus
    proxy) if this widget or one of its parents is the
    \l{isActiveWindow()}{active window}.
*/

Rustdoc:

**Overloads** FilteredOverload
Gives the keyboard input focus to this widget (or its focus
proxy) if this widget or one of its parents is the
[FilteredLinkNameactive window](FilteredLinkUrlisActiveWindow())
.

Entry 106
Function: FilteredFunctionvoid QWidget::clearFocus()

QDoc:
/*!
    Takes keyboard input focus from the widget.

    If the widget has active focus, a \l{focusOutEvent()}{focus out event} is sent to this widget to tell it that it has
    lost the focus.

    This widget must enable focus setting in order to get the keyboard
    input focus, i.e. it must call setFocusPolicy().

    \sa hasFocus(), setFocus(), focusInEvent(), focusOutEvent(),
    setFocusPolicy(), QApplication::focusWidget()
*/

void QWidget::clearFocus()

Rustdoc:

Takes keyboard input focus from the widget.

If the widget has active focus, a [FilteredLinkNamefocus out event](FilteredLinkUrlfocusOutEvent())
is sent to this widget to tell it that it has
lost the focus.

This widget must enable focus setting in order to get the keyboard
input focus, i.e. it must call setFocusPolicy().

**See also:** FilteredLinkSeeAlsohasFocus()
FilteredLinkSeeAlsosetFocus()
FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsoQApplication::focusWidget()

Entry 107
Function: FilteredFunctionbool QWidget::focusNextChild()

QDoc:
/*!
    \fn bool QWidget::focusNextChild()

    Finds a new widget to give the keyboard focus to, as appropriate
    for \uicontrol Tab, and returns \c true if it can find a new widget, or
    false if it can't.

    \sa focusPreviousChild()
*/

Rustdoc:

Finds a new widget to give the keyboard focus to, as appropriate
for **Tab,** and returns `true` if it can find a new widget, or
false if it can't.

**See also:** FilteredLinkSeeAlsofocusPreviousChild()

Entry 108
Function: FilteredFunctionbool QWidget::focusPreviousChild()

QDoc:
/*!
    \fn bool QWidget::focusPreviousChild()

    Finds a new widget to give the keyboard focus to, as appropriate
    for \uicontrol Shift+Tab, and returns \c true if it can find a new widget,
    or false if it can't.

    \sa focusNextChild()
*/

Rustdoc:

Finds a new widget to give the keyboard focus to, as appropriate
for **Shift+Tab,** and returns `true` if it can find a new widget,
or false if it can't.

**See also:** FilteredLinkSeeAlsofocusNextChild()

Entry 109
Function: FilteredFunctionbool QWidget::focusNextPrevChild(bool next)

QDoc:
/*!
    Finds a new widget to give the keyboard focus to, as appropriate
    for Tab and Shift+Tab, and returns \c true if it can find a new
    widget, or false if it can't.

    If \a next is true, this function searches forward, if \a next
    is false, it searches backward.

    Sometimes, you will want to reimplement this function. For
    example, a web browser might reimplement it to move its "current
    active link" forward or backward, and call
    focusNextPrevChild() only when it reaches the last or
    first link on the "page".

    Child widgets call focusNextPrevChild() on their parent widgets,
    but only the window that contains the child widgets decides where
    to redirect focus. By reimplementing this function for an object,
    you thus gain control of focus traversal for all child widgets.

    \sa focusNextChild(), focusPreviousChild()
*/

bool QWidget::focusNextPrevChild(bool next)

Rustdoc:

Finds a new widget to give the keyboard focus to, as appropriate
for Tab and Shift+Tab, and returns `true` if it can find a new
widget, or false if it can't.

If *next* is true, this function searches forward, if *next*
is false, it searches backward.

Sometimes, you will want to reimplement this function. For
example, a web browser might reimplement it to move its forward or backward, and call
focusNextPrevChild() only when it reaches the last or
first link on the .

Child widgets call focusNextPrevChild() on their parent widgets,
but only the window that contains the child widgets decides where
to redirect focus. By reimplementing this function for an object,
you thus gain control of focus traversal for all child widgets.

**See also:** FilteredLinkSeeAlsofocusNextChild()
FilteredLinkSeeAlsofocusPreviousChild()

Entry 110
Function: FilteredFunctionQWidget *QWidget::focusWidget() const

QDoc:
/*!
    Returns the last child of this widget that setFocus had been
    called on.  For top level widgets this is the widget that will get
    focus in case this window gets activated

    This is not the same as QApplication::focusWidget(), which returns
    the focus widget in the currently active window.
*/

QWidget *QWidget::focusWidget() const

Rustdoc:

Returns the last child of this widget that setFocus had been
called on. For top level widgets this is the widget that will get
focus in case this window gets activated

This is not the same as QApplication::focusWidget(), which returns
the focus widget in the currently active window.

Entry 111
Function: FilteredFunctionQWidget *QWidget::nextInFocusChain() const

QDoc:
/*!
    Returns the next widget in this widget's focus chain.

    \sa previousInFocusChain()
*/
QWidget *QWidget::nextInFocusChain() const

Rustdoc:

Returns the next widget in this widget's focus chain.

**See also:** FilteredLinkSeeAlsopreviousInFocusChain()

Entry 112
Brief: The previousInFocusChain function returns the previous
    widget in this widget's focus chain.
Function: FilteredFunctionQWidget *QWidget::previousInFocusChain() const

QDoc:
/*!
    \brief The previousInFocusChain function returns the previous
    widget in this widget's focus chain.

    \sa nextInFocusChain()

    \since 4.6
*/
QWidget *QWidget::previousInFocusChain() const

Rustdoc:

**See also:** FilteredLinkSeeAlsonextInFocusChain()


Entry 113
Brief: whether this widget's window is the active window
Property: QWidget::isActiveWindow

QDoc:
/*!
    \property QWidget::isActiveWindow
    \brief whether this widget's window is the active window

    The active window is the window that contains the widget that has
    keyboard focus (The window may still have focus if it has no
    widgets or none of its widgets accepts keyboard focus).

    When popup windows are visible, this property is \c true for both the
    active window \e and for the popup.

    By default, this property is \c false.

    \sa activateWindow(), QApplication::activeWindow()
*/
bool QWidget::isActiveWindow() const

Rustdoc:

The active window is the window that contains the widget that has
keyboard focus (The window may still have focus if it has no
widgets or none of its widgets accepts keyboard focus).

When popup windows are visible, this property is `true` for both the
active window *and* for the popup.

By default, this property is `false.`

**See also:** FilteredLinkSeeAlsoactivateWindow()
FilteredLinkSeeAlsoQApplication::activeWindow()

Entry 114
Function: FilteredFunctionvoid QWidget::setTabOrder(QWidget* first, QWidget *second)

QDoc:
/*!
    Puts the \a second widget after the \a first widget in the focus order.

    It effectively removes the \a second widget from its focus chain and
    inserts it after the \a first widget.

    Note that since the tab order of the \a second widget is changed, you
    should order a chain like this:

    \snippet code/src_gui_kernel_qwidget.cpp 9

    \e not like this:

    \snippet code/src_gui_kernel_qwidget.cpp 10

    If \a first or \a second has a focus proxy, setTabOrder()
    correctly substitutes the proxy.

    \note Since Qt 5.10: A widget that has a child as focus proxy is understood as
    a compound widget. When setting a tab order between one or two compound widgets, the
    local tab order inside each will be preserved. This means that if both widgets are
    compound widgets, the resulting tab order will be from the last child inside
    \a first, to the first child inside \a second.

    \sa setFocusPolicy(), setFocusProxy(), {Keyboard Focus in Widgets}
*/
void QWidget::setTabOrder(QWidget* first, QWidget *second)

Rustdoc:

Puts the *second* widget after the *first* widget in the focus order.

It effectively removes the *second* widget from its focus chain and
inserts it after the *first* widget.

Note that since the tab order of the *second* widget is changed, you
should order a chain like this:

*not* like this:

If *first* or *second* has a focus proxy, setTabOrder()
correctly substitutes the proxy.

**Note**: Since Qt 5.10: A widget that has a child as focus proxy is understood as
a compound widget. When setting a tab order between one or two compound widgets, the
local tab order inside each will be preserved. This means that if both widgets are
compound widgets, the resulting tab order will be from the last child inside
*first,* to the first child inside *second.*

**See also:** FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsosetFocusProxy()
FilteredLinkSeeAlso{Keyboard Focus in Widgets}

Entry 115
Brief: the size of the widget including any window frame
Property: QWidget::frameSize

QDoc:
/*!
    \property QWidget::frameSize
    \brief the size of the widget including any window frame

    By default, this property contains a value that depends on the user's
    platform and screen geometry.
*/
QSize QWidget::frameSize() const

Rustdoc:

By default, this property contains a value that depends on the user's
platform and screen geometry.

Entry 116
Function: FilteredFunctionvoid QWidget::move(int x, int y)

QDoc:
/*! \fn void QWidget::move(int x, int y)

    \overload

    This corresponds to move(QPoint(\a x, \a y)).
*/

void QWidget::move(const QPoint &p)

Rustdoc:

**Overloads** FilteredOverload
This corresponds to move(QPoint( *x,* *y)).*

Entry 117
Function: FilteredFunctionvoid QWidget::resize(int w, int h)

QDoc:
/*! \fn void QWidget::resize(int w, int h)
    \overload

    This corresponds to resize(QSize(\a w, \a h)).
*/

void QWidget::resize(const QSize &s)

Rustdoc:
**Overloads** FilteredOverload
This corresponds to resize(QSize( *w,* *h)).*

Entry 118
Function: FilteredFunctionQByteArray QWidget::saveGeometry() const

QDoc:
/*!
    \since 4.2
    Saves the current geometry and state for top-level widgets.

    To save the geometry when the window closes, you can
    implement a close event like this:

    \snippet code/src_gui_kernel_qwidget.cpp 11

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    Use QMainWindow::saveState() to save the geometry and the state of
    toolbars and dock widgets.

    \sa restoreGeometry(), QMainWindow::saveState(), QMainWindow::restoreState()
*/
QByteArray QWidget::saveGeometry() const

Rustdoc:

Saves the current geometry and state for top-level widgets.

To save the geometry when the window closes, you can
implement a close event like this:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

Use QMainWindow::saveState() to save the geometry and the state of
toolbars and dock widgets.

**See also:** FilteredLinkSeeAlsorestoreGeometry()
FilteredLinkSeeAlsoQMainWindow::saveState()
FilteredLinkSeeAlsoQMainWindow::restoreState()

Entry 119
Function: FilteredFunctionbool QWidget::restoreGeometry(const QByteArray &geometry)

QDoc:
/*!
    \since 4.2

    Restores the geometry and state of top-level widgets stored in the
    byte array \a geometry. Returns \c true on success; otherwise
    returns \c false.

    If the restored geometry is off-screen, it will be modified to be
    inside the available screen geometry.

    To restore geometry saved using QSettings, you can use code like
    this:

    \snippet code/src_gui_kernel_qwidget.cpp 12

    See the \l{Window Geometry} documentation for an overview of geometry
    issues with windows.

    Use QMainWindow::restoreState() to restore the geometry and the
    state of toolbars and dock widgets.

    \sa saveGeometry(), QSettings, QMainWindow::saveState(), QMainWindow::restoreState()
*/
bool QWidget::restoreGeometry(const QByteArray &geometry)

Rustdoc:

Restores the geometry and state of top-level widgets stored in the
byte array *geometry.* Returns `true` on success; otherwise
returns `false.`

If the restored geometry is off-screen, it will be modified to be
inside the available screen geometry.

To restore geometry saved using QSettings, you can use code like
this:

See the [FilteredLinkNameWindow Geometry](FilteredLinkUrlWindow%20Geometry)
documentation for an overview of geometry
issues with windows.

Use QMainWindow::restoreState() to restore the geometry and the
state of toolbars and dock widgets.

**See also:** FilteredLinkSeeAlsosaveGeometry()
FilteredLinkSeeAlsoQSettings
FilteredLinkSeeAlsoQMainWindow::saveState()
FilteredLinkSeeAlsoQMainWindow::restoreState()

Entry 120
Function: FilteredFunctionvoid QWidget::setGeometry(int x, int y, int w, int h)

QDoc:
/*!\fn void QWidget::setGeometry(int x, int y, int w, int h)
    \overload

    This corresponds to setGeometry(QRect(\a x, \a y, \a w, \a h)).
*/

Rustdoc:
**Overloads** FilteredOverload
This corresponds to setGeometry(QRect( *x,* *y,* *w,* *h)).*

Entry 121
Function: FilteredFunctionvoid QWidget::setContentsMargins(int left, int top, int right, int bottom)

QDoc:
/*!
  Sets the margins around the contents of the widget to have the sizes
  \a left, \a top, \a right, and \a bottom. The margins are used by
  the layout system, and may be used by subclasses to specify the area
  to draw in (e.g. excluding the frame).

  Changing the margins will trigger a resizeEvent().

  \sa contentsRect(), getContentsMargins()
*/
void QWidget::setContentsMargins(int left, int top, int right, int bottom)

Rustdoc:

Sets the margins around the contents of the widget to have the sizes
*left,* *top,* *right,* and *bottom.* The margins are used by
the layout system, and may be used by subclasses to specify the area
to draw in (e.g. excluding the frame).

Changing the margins will trigger a resizeEvent().

**See also:** FilteredLinkSeeAlsocontentsRect()
FilteredLinkSeeAlsogetContentsMargins()

Entry 122
Brief: The setContentsMargins function sets the margins around the
  widget's contents.
Function: FilteredFunctionvoid QWidget::setContentsMargins(const QMargins &margins)

QDoc:
/*!
  \overload
  \since 4.6

  \brief The setContentsMargins function sets the margins around the
  widget's contents.

  Sets the margins around the contents of the widget to have the
  sizes determined by \a margins. The margins are
  used by the layout system, and may be used by subclasses to
  specify the area to draw in (e.g. excluding the frame).

  Changing the margins will trigger a resizeEvent().

  \sa contentsRect(), getContentsMargins()
*/
void QWidget::setContentsMargins(const QMargins &margins)

Rustdoc:

**Overloads** FilteredOverload

Sets the margins around the contents of the widget to have the
sizes determined by *margins.* The margins are
used by the layout system, and may be used by subclasses to
specify the area to draw in (e.g. excluding the frame).

Changing the margins will trigger a resizeEvent().

**See also:** FilteredLinkSeeAlsocontentsRect()
FilteredLinkSeeAlsogetContentsMargins()

Entry 123
Function: FilteredFunctionvoid QWidget::getContentsMargins(int *left, int *top, int *right, int *bottom) const

QDoc:
/*!
  Returns the widget's contents margins for \a left, \a top, \a
  right, and \a bottom.

  \sa setContentsMargins(), contentsRect()
 */
void QWidget::getContentsMargins(int *left, int *top, int *right, int *bottom) const

Rustdoc:

Returns the widget's contents margins for *left,* *top,* *right,* and *bottom.*

**See also:** FilteredLinkSeeAlsosetContentsMargins()
FilteredLinkSeeAlsocontentsRect()

Entry 124
Brief: The contentsMargins function returns the widget's contents margins.
Function: FilteredFunctionQMargins QWidget::contentsMargins() const

QDoc:
/*!
  \since 4.6

  \brief The contentsMargins function returns the widget's contents margins.

  \sa getContentsMargins(), setContentsMargins(), contentsRect()
 */
QMargins QWidget::contentsMargins() const

Rustdoc:

**See also:** FilteredLinkSeeAlsogetContentsMargins()
FilteredLinkSeeAlsosetContentsMargins()
FilteredLinkSeeAlsocontentsRect()

Entry 125
Function: FilteredFunctionQRect QWidget::contentsRect() const

QDoc:
/*!
    Returns the area inside the widget's margins.

    \sa setContentsMargins(), getContentsMargins()
*/
QRect QWidget::contentsRect() const

Rustdoc:

Returns the area inside the widget's margins.

**See also:** FilteredLinkSeeAlsosetContentsMargins()
FilteredLinkSeeAlsogetContentsMargins()

Entry 126
Function: FilteredFunctionvoid QWidget::customContextMenuRequested(const QPoint &pos)

QDoc:
/*!
  \fn void QWidget::customContextMenuRequested(const QPoint &pos)

  This signal is emitted when the widget's \l contextMenuPolicy is
  Qt::CustomContextMenu, and the user has requested a context menu on
  the widget. The position \a pos is the position of the context menu
  event that the widget receives. Normally this is in widget
  coordinates. The exception to this rule is QAbstractScrollArea and
  its subclasses that map the context menu event to coordinates of the
  \l{QAbstractScrollArea::viewport()}{viewport()}.


  \sa mapToGlobal(), QMenu, contextMenuPolicy
*/

Rustdoc:

This signal is emitted when the widget's [FilteredLinkNamecontextMenuPolicy](FilteredLinkUrlcontextMenuPolicy)
is
Qt::CustomContextMenu, and the user has requested a context menu on
the widget. The position *pos* is the position of the context menu
event that the widget receives. Normally this is in widget
coordinates. The exception to this rule is QAbstractScrollArea and
its subclasses that map the context menu event to coordinates of the
[FilteredLinkNameviewport()](FilteredLinkUrlQAbstractScrollArea::viewport())
.

**See also:** FilteredLinkSeeAlsomapToGlobal()
FilteredLinkSeeAlsoQMenu
FilteredLinkSeeAlsocontextMenuPolicy

Entry 127
Brief: how the widget shows a context menu
Property: QWidget::contextMenuPolicy

QDoc:
/*!
    \property QWidget::contextMenuPolicy
    \brief how the widget shows a context menu

    The default value of this property is Qt::DefaultContextMenu,
    which means the contextMenuEvent() handler is called. Other values
    are Qt::NoContextMenu, Qt::PreventContextMenu,
    Qt::ActionsContextMenu, and Qt::CustomContextMenu. With
    Qt::CustomContextMenu, the signal customContextMenuRequested() is
    emitted.

    \sa contextMenuEvent(), customContextMenuRequested(), actions()
*/

Qt::ContextMenuPolicy QWidget::contextMenuPolicy() const

Rustdoc:

The default value of this property is Qt::DefaultContextMenu,
which means the contextMenuEvent() handler is called. Other values
are Qt::NoContextMenu, Qt::PreventContextMenu,
Qt::ActionsContextMenu, and Qt::CustomContextMenu. With
Qt::CustomContextMenu, the signal customContextMenuRequested() is
emitted.

**See also:** FilteredLinkSeeAlsocontextMenuEvent()
FilteredLinkSeeAlsocustomContextMenuRequested()
FilteredLinkSeeAlsoactions()

Entry 128
Brief: the way the widget accepts keyboard focus
Property: QWidget::focusPolicy

QDoc:
/*!
    \property QWidget::focusPolicy
    \brief the way the widget accepts keyboard focus

    The policy is Qt::TabFocus if the widget accepts keyboard
    focus by tabbing, Qt::ClickFocus if the widget accepts
    focus by clicking, Qt::StrongFocus if it accepts both, and
    Qt::NoFocus (the default) if it does not accept focus at
    all.

    You must enable keyboard focus for a widget if it processes
    keyboard events. This is normally done from the widget's
    constructor. For instance, the QLineEdit constructor calls
    setFocusPolicy(Qt::StrongFocus).

    If the widget has a focus proxy, then the focus policy will
    be propagated to it.

    \sa focusInEvent(), focusOutEvent(), keyPressEvent(), keyReleaseEvent(), enabled
*/


Qt::FocusPolicy QWidget::focusPolicy() const

Rustdoc:

The policy is Qt::TabFocus if the widget accepts keyboard
focus by tabbing, Qt::ClickFocus if the widget accepts
focus by clicking, Qt::StrongFocus if it accepts both, and
Qt::NoFocus (the default) if it does not accept focus at
all.

You must enable keyboard focus for a widget if it processes
keyboard events. This is normally done from the widget's
constructor. For instance, the QLineEdit constructor calls
setFocusPolicy(Qt::StrongFocus).

If the widget has a focus proxy, then the focus policy will
be propagated to it.

**See also:** FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsokeyPressEvent()
FilteredLinkSeeAlsokeyReleaseEvent()
FilteredLinkSeeAlsoenabled

Entry 129
Brief: whether updates are enabled
Property: QWidget::updatesEnabled

QDoc:
/*!
    \property QWidget::updatesEnabled
    \brief whether updates are enabled

    An updates enabled widget receives paint events and has a system
    background; a disabled widget does not. This also implies that
    calling update() and repaint() has no effect if updates are
    disabled.

    By default, this property is \c true.

    setUpdatesEnabled() is normally used to disable updates for a
    short period of time, for instance to avoid screen flicker during
    large changes. In Qt, widgets normally do not generate screen
    flicker, but on X11 the server might erase regions on the screen
    when widgets get hidden before they can be replaced by other
    widgets. Disabling updates solves this.

    Example:
    \snippet code/src_gui_kernel_qwidget.cpp 13

    Disabling a widget implicitly disables all its children. Enabling a widget
    enables all child widgets \e except top-level widgets or those that
    have been explicitly disabled. Re-enabling updates implicitly calls
    update() on the widget.

    \sa paintEvent()
*/
void QWidget::setUpdatesEnabled(bool enable)

Rustdoc:

An updates enabled widget receives paint events and has a system
background; a disabled widget does not. This also implies that
calling update() and repaint() has no effect if updates are
disabled.

By default, this property is `true.`

setUpdatesEnabled() is normally used to disable updates for a
short period of time, for instance to avoid screen flicker during
large changes. In Qt, widgets normally do not generate screen
flicker, but on X11 the server might erase regions on the screen
when widgets get hidden before they can be replaced by other
widgets. Disabling updates solves this.

Example:

Disabling a widget implicitly disables all its children. Enabling a widget
enables all child widgets *except* top-level widgets or those that
have been explicitly disabled. Re-enabling updates implicitly calls
update() on the widget.

**See also:** FilteredLinkSeeAlsopaintEvent()

Entry 130
Function: FilteredFunctionvoid QWidget::show()

QDoc:
/*!
    Shows the widget and its child widgets.

    This is equivalent to calling showFullScreen(), showMaximized(), or setVisible(true),
    depending on the platform's default behavior for the window flags.

     \sa raise(), showEvent(), hide(), setVisible(), showMinimized(), showMaximized(),
    showNormal(), isVisible(), windowFlags()
*/
void QWidget::show()

Rustdoc:

Shows the widget and its child widgets.

This is equivalent to calling showFullScreen(), showMaximized(), or setVisible(true),
depending on the platform's default behavior for the window flags.

**See also:** FilteredLinkSeeAlsoraise()
FilteredLinkSeeAlsoshowEvent()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsosetVisible()
FilteredLinkSeeAlsoshowMinimized()
FilteredLinkSeeAlsoshowMaximized()
FilteredLinkSeeAlsoshowNormal()
FilteredLinkSeeAlsoisVisible()
FilteredLinkSeeAlsowindowFlags()

Entry 131
Function: FilteredFunctionvoid QWidget::hide()

QDoc:
/*!
    Hides the widget. This function is equivalent to
    setVisible(false).


    \note If you are working with QDialog or its subclasses and you invoke
    the show() function after this function, the dialog will be displayed in
    its original position.

    \sa hideEvent(), isHidden(), show(), setVisible(), isVisible(), close()
*/
void QWidget::hide()

Rustdoc:

Hides the widget. This function is equivalent to
setVisible(false).

**Note**: If you are working with QDialog or its subclasses and you invoke
the show() function after this function, the dialog will be displayed in
its original position.

**See also:** FilteredLinkSeeAlsohideEvent()
FilteredLinkSeeAlsoisHidden()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsosetVisible()
FilteredLinkSeeAlsoisVisible()
FilteredLinkSeeAlsoclose()

Entry 132
Function: FilteredFunctionbool QWidget::isHidden() const

QDoc:
/*!
    \fn bool QWidget::isHidden() const

    Returns \c true if the widget is hidden, otherwise returns \c false.

    A hidden widget will only become visible when show() is called on
    it. It will not be automatically shown when the parent is shown.

    To check visibility, use !isVisible() instead (notice the exclamation mark).

    isHidden() implies !isVisible(), but a widget can be not visible
    and not hidden at the same time. This is the case for widgets that are children of
    widgets that are not visible.


    Widgets are hidden if:
    \list
        \li they were created as independent windows,
        \li they were created as children of visible widgets,
        \li hide() or setVisible(false) was called.
    \endlist
*/


void QWidget::setVisible(bool visible)

Rustdoc:

Returns `true` if the widget is hidden, otherwise returns `false.`

A hidden widget will only become visible when show() is called on
it. It will not be automatically shown when the parent is shown.

To check visibility, use !isVisible() instead (notice the exclamation mark).

isHidden() implies !isVisible(), but a widget can be not visible
and not hidden at the same time. This is the case for widgets that are children of
widgets that are not visible.

Widgets are hidden if:
* they were created as independent windows,
* they were created as children of visible widgets,
* hide() or setVisible(false) was called.

Entry 133
Function: FilteredFunctionvoid QWidget::setHidden(bool hidden)

QDoc:
/*!
    Convenience function, equivalent to setVisible(!\a hidden).
*/
void QWidget::setHidden(bool hidden)

Rustdoc:

Convenience function, equivalent to setVisible(! *hidden).*

Entry 134
Function: FilteredFunctionbool QWidget::close()

QDoc:
/*!
    Closes this widget. Returns \c true if the widget was closed;
    otherwise returns \c false.

    First it sends the widget a QCloseEvent. The widget is
    \l{hide()}{hidden} if it \l{QEvent::accept()}{accepts}
    the close event. If it \l{QEvent::ignore()}{ignores}
    the event, nothing happens. The default
    implementation of QWidget::closeEvent() accepts the close event.

    If the widget has the Qt::WA_DeleteOnClose flag, the widget
    is also deleted. A close events is delivered to the widget no
    matter if the widget is visible or not.

    The \l QApplication::lastWindowClosed() signal is emitted when the
    last visible primary window (i.e. window with no parent) with the
    Qt::WA_QuitOnClose attribute set is closed. By default this
    attribute is set for all widgets except transient windows such as
    splash screens, tool windows, and popup menus.

*/

bool QWidget::close()

Rustdoc:

Closes this widget. Returns `true` if the widget was closed;
otherwise returns `false.`

First it sends the widget a QCloseEvent. The widget is
[FilteredLinkNamehidden](FilteredLinkUrlhide())
if it [FilteredLinkNameaccepts](FilteredLinkUrlQEvent::accept())

the close event. If it [FilteredLinkNameignores](FilteredLinkUrlQEvent::ignore())

the event, nothing happens. The default
implementation of QWidget::closeEvent() accepts the close event.

If the widget has the Qt::WA_DeleteOnClose flag, the widget
is also deleted. A close events is delivered to the widget no
matter if the widget is visible or not.

The [FilteredLinkNameQApplication::lastWindowClosed()](FilteredLinkUrlQApplication::lastWindowClosed())
signal is emitted when the
last visible primary window (i.e. window with no parent) with the
Qt::WA_QuitOnClose attribute set is closed. By default this
attribute is set for all widgets except transient windows such as
splash screens, tool windows, and popup menus.


Entry 135
Brief: whether the widget is visible
Property: QWidget::visible

QDoc:
/*!
    \property QWidget::visible
    \brief whether the widget is visible

    Calling setVisible(true) or show() sets the widget to visible
    status if all its parent widgets up to the window are visible. If
    an ancestor is not visible, the widget won't become visible until
    all its ancestors are shown. If its size or position has changed,
    Qt guarantees that a widget gets move and resize events just
    before it is shown. If the widget has not been resized yet, Qt
    will adjust the widget's size to a useful default using
    adjustSize().

    Calling setVisible(false) or hide() hides a widget explicitly. An
    explicitly hidden widget will never become visible, even if all
    its ancestors become visible, unless you show it.

    A widget receives show and hide events when its visibility status
    changes. Between a hide and a show event, there is no need to
    waste CPU cycles preparing or displaying information to the user.
    A video application, for example, might simply stop generating new
    frames.

    A widget that happens to be obscured by other windows on the
    screen is considered to be visible. The same applies to iconified
    windows and windows that exist on another virtual
    desktop (on platforms that support this concept). A widget
    receives spontaneous show and hide events when its mapping status
    is changed by the window system, e.g. a spontaneous hide event
    when the user minimizes the window, and a spontaneous show event
    when the window is restored again.

    You almost never have to reimplement the setVisible() function. If
    you need to change some settings before a widget is shown, use
    showEvent() instead. If you need to do some delayed initialization
    use the Polish event delivered to the event() function.

    \sa show(), hide(), isHidden(), isVisibleTo(), isMinimized(),
    showEvent(), hideEvent()
*/

Rustdoc:

Calling setVisible(true) or show() sets the widget to visible
status if all its parent widgets up to the window are visible. If
an ancestor is not visible, the widget won't become visible until
all its ancestors are shown. If its size or position has changed,
Qt guarantees that a widget gets move and resize events just
before it is shown. If the widget has not been resized yet, Qt
will adjust the widget's size to a useful default using
adjustSize().

Calling setVisible(false) or hide() hides a widget explicitly. An
explicitly hidden widget will never become visible, even if all
its ancestors become visible, unless you show it.

A widget receives show and hide events when its visibility status
changes. Between a hide and a show event, there is no need to
waste CPU cycles preparing or displaying information to the user.
A video application, for example, might simply stop generating new
frames.

A widget that happens to be obscured by other windows on the
screen is considered to be visible. The same applies to iconified
windows and windows that exist on another virtual
desktop (on platforms that support this concept). A widget
receives spontaneous show and hide events when its mapping status
is changed by the window system, e.g. a spontaneous hide event
when the user minimizes the window, and a spontaneous show event
when the window is restored again.

You almost never have to reimplement the setVisible() function. If
you need to change some settings before a widget is shown, use
showEvent() instead. If you need to do some delayed initialization
use the Polish event delivered to the event() function.

**See also:** FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisHidden()
FilteredLinkSeeAlsoisVisibleTo()
FilteredLinkSeeAlsoisMinimized()
FilteredLinkSeeAlsoshowEvent()
FilteredLinkSeeAlsohideEvent()

Entry 136
Function: FilteredFunctionbool QWidget::isVisibleTo(const QWidget *ancestor) const

QDoc:
/*!
    Returns \c true if this widget would become visible if \a ancestor is
    shown; otherwise returns \c false.

    The true case occurs if neither the widget itself nor any parent
    up to but excluding \a ancestor has been explicitly hidden.

    This function will still return true if the widget is obscured by
    other windows on the screen, but could be physically visible if it
    or they were to be moved.

    isVisibleTo(0) is identical to isVisible().

    \sa show(), hide(), isVisible()
*/

bool QWidget::isVisibleTo(const QWidget *ancestor) const

Rustdoc:

Returns `true` if this widget would become visible if *ancestor* is
shown; otherwise returns `false.`

The true case occurs if neither the widget itself nor any parent
up to but excluding *ancestor* has been explicitly hidden.

This function will still return true if the widget is obscured by
other windows on the screen, but could be physically visible if it
or they were to be moved.

isVisibleTo(0) is identical to isVisible().

**See also:** FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoisVisible()

Entry 137
Function: FilteredFunctionQRegion QWidget::visibleRegion() const

QDoc:
/*!
    Returns the unobscured region where paint events can occur.

    For visible widgets, this is an approximation of the area not
    covered by other widgets; otherwise, this is an empty region.

    The repaint() function calls this function if necessary, so in
    general you do not need to call it.

*/
QRegion QWidget::visibleRegion() const

Rustdoc:

Returns the unobscured region where paint events can occur.

For visible widgets, this is an approximation of the area not
covered by other widgets; otherwise, this is an empty region.

The repaint() function calls this function if necessary, so in
general you do not need to call it.


Entry 138
Function: FilteredFunctionvoid QWidget::adjustSize()

QDoc:
/*!
    Adjusts the size of the widget to fit its contents.

    This function uses sizeHint() if it is valid, i.e., the size hint's width
    and height are \>= 0. Otherwise, it sets the size to the children
    rectangle that covers all child widgets (the union of all child widget
    rectangles).

    For windows, the screen size is also taken into account. If the sizeHint()
    is less than (200, 100) and the size policy is \l{QSizePolicy::Expanding}
    {expanding}, the window will be at least (200, 100). The maximum size of
    a window is 2/3 of the screen's width and height.

    \sa sizeHint(), childrenRect()
*/

void QWidget::adjustSize()

Rustdoc:

Adjusts the size of the widget to fit its contents.

This function uses sizeHint() if it is valid, i.e., the size hint's width
and height are \>= 0. Otherwise, it sets the size to the children
rectangle that covers all child widgets (the union of all child widget
rectangles).

For windows, the screen size is also taken into account. If the sizeHint()
is less than (200, 100) and the size policy is [FilteredLinkNameexpanding](FilteredLinkUrlQSizePolicy::Expanding)
, the window will be at least (200, 100). The maximum size of
a window is 2/3 of the screen's width and height.

**See also:** FilteredLinkSeeAlsosizeHint()
FilteredLinkSeeAlsochildrenRect()

Entry 139
Brief: the recommended size for the widget
Property: QWidget::sizeHint

QDoc:
/*!
    \property QWidget::sizeHint
    \brief the recommended size for the widget

    If the value of this property is an invalid size, no size is
    recommended.

    The default implementation of sizeHint() returns an invalid size
    if there is no layout for this widget, and returns the layout's
    preferred size otherwise.

    \sa QSize::isValid(), minimumSizeHint(), sizePolicy(),
    setMinimumSize(), updateGeometry()
*/

QSize QWidget::sizeHint() const

Rustdoc:

If the value of this property is an invalid size, no size is
recommended.

The default implementation of sizeHint() returns an invalid size
if there is no layout for this widget, and returns the layout's
preferred size otherwise.

**See also:** FilteredLinkSeeAlsoQSize::isValid()
FilteredLinkSeeAlsominimumSizeHint()
FilteredLinkSeeAlsosizePolicy()
FilteredLinkSeeAlsosetMinimumSize()
FilteredLinkSeeAlsoupdateGeometry()

Entry 140
Brief: the recommended minimum size for the widget
Property: QWidget::minimumSizeHint

QDoc:
/*!
    \property QWidget::minimumSizeHint
    \brief the recommended minimum size for the widget

    If the value of this property is an invalid size, no minimum size
    is recommended.

    The default implementation of minimumSizeHint() returns an invalid
    size if there is no layout for this widget, and returns the
    layout's minimum size otherwise. Most built-in widgets reimplement
    minimumSizeHint().

    \l QLayout will never resize a widget to a size smaller than the
    minimum size hint unless minimumSize() is set or the size policy is
    set to QSizePolicy::Ignore. If minimumSize() is set, the minimum
    size hint will be ignored.

    \sa QSize::isValid(), resize(), setMinimumSize(), sizePolicy()
*/
QSize QWidget::minimumSizeHint() const

Rustdoc:

If the value of this property is an invalid size, no minimum size
is recommended.

The default implementation of minimumSizeHint() returns an invalid
size if there is no layout for this widget, and returns the
layout's minimum size otherwise. Most built-in widgets reimplement
minimumSizeHint().

[FilteredLinkNameQLayout](FilteredLinkUrlQLayout)
will never resize a widget to a size smaller than the
minimum size hint unless minimumSize() is set or the size policy is
set to QSizePolicy::Ignore. If minimumSize() is set, the minimum
size hint will be ignored.

**See also:** FilteredLinkSeeAlsoQSize::isValid()
FilteredLinkSeeAlsoresize()
FilteredLinkSeeAlsosetMinimumSize()
FilteredLinkSeeAlsosizePolicy()

Entry 141
Function: FilteredFunctionQWidget *QWidget::parentWidget() const

QDoc:
/*!
    \fn QWidget *QWidget::parentWidget() const

    Returns the parent of this widget, or 0 if it does not have any
    parent widget.
*/

Rustdoc:

Returns the parent of this widget, or 0 if it does not have any
parent widget.

Entry 142
Function: FilteredFunctionbool QWidget::isAncestorOf(const QWidget *child) const

QDoc:
/*!
    Returns \c true if this widget is a parent, (or grandparent and so on
    to any level), of the given \a child, and both widgets are within
    the same window; otherwise returns \c false.
*/

bool QWidget::isAncestorOf(const QWidget *child) const

Rustdoc:

Returns `true` if this widget is a parent, (or grandparent and so on
to any level), of the given *child,* and both widgets are within
the same window; otherwise returns `false.`

Entry 143
Function: FilteredFunctionbool QWidget::event(QEvent *event)

QDoc:
/*!
    This is the main event handler; it handles event \a event. You can
    reimplement this function in a subclass, but we recommend using
    one of the specialized event handlers instead.

    Key press and release events are treated differently from other
    events. event() checks for Tab and Shift+Tab and tries to move the
    focus appropriately. If there is no widget to move the focus to
    (or the key press is not Tab or Shift+Tab), event() calls
    keyPressEvent().

    Mouse and tablet event handling is also slightly special: only
    when the widget is \l enabled, event() will call the specialized
    handlers such as mousePressEvent(); otherwise it will discard the
    event.

    This function returns \c true if the event was recognized, otherwise
    it returns \c false.  If the recognized event was accepted (see \l
    QEvent::accepted), any further processing such as event
    propagation to the parent widget stops.

    \sa closeEvent(), focusInEvent(), focusOutEvent(), enterEvent(),
    keyPressEvent(), keyReleaseEvent(), leaveEvent(),
    mouseDoubleClickEvent(), mouseMoveEvent(), mousePressEvent(),
    mouseReleaseEvent(), moveEvent(), paintEvent(), resizeEvent(),
    QObject::event(), QObject::timerEvent()
*/

bool QWidget::event(QEvent *event)

Rustdoc:

This is the main event handler; it handles event *event.* You can
reimplement this function in a subclass, but we recommend using
one of the specialized event handlers instead.

Key press and release events are treated differently from other
events. event() checks for Tab and Shift+Tab and tries to move the
focus appropriately. If there is no widget to move the focus to
(or the key press is not Tab or Shift+Tab), event() calls
keyPressEvent().

Mouse and tablet event handling is also slightly special: only
when the widget is [FilteredLinkNameenabled,](FilteredLinkUrlenabled,)
event() will call the specialized
handlers such as mousePressEvent(); otherwise it will discard the
event.

This function returns `true` if the event was recognized, otherwise
it returns `false.` If the recognized event was accepted (see [FilteredLinkNameQEvent::accepted),](FilteredLinkUrlQEvent::accepted),)
any further processing such as event
propagation to the parent widget stops.

**See also:** FilteredLinkSeeAlsocloseEvent()
FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsoenterEvent()
FilteredLinkSeeAlsokeyPressEvent()
FilteredLinkSeeAlsokeyReleaseEvent()
FilteredLinkSeeAlsoleaveEvent()
FilteredLinkSeeAlsomouseDoubleClickEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsomousePressEvent()
FilteredLinkSeeAlsomouseReleaseEvent()
FilteredLinkSeeAlsomoveEvent()
FilteredLinkSeeAlsopaintEvent()
FilteredLinkSeeAlsoresizeEvent()
FilteredLinkSeeAlsoQObject::event()
FilteredLinkSeeAlsoQObject::timerEvent()

Entry 144
Function: FilteredFunctionvoid QWidget::changeEvent(QEvent * event)

QDoc:
/*!
  This event handler can be reimplemented to handle state changes.

  The state being changed in this event can be retrieved through the \a event
  supplied.

  Change events include: QEvent::ToolBarChange,
  QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange,
  QEvent::StyleChange, QEvent::PaletteChange,
  QEvent::WindowTitleChange, QEvent::IconTextChange,
  QEvent::ModifiedChange, QEvent::MouseTrackingChange,
  QEvent::ParentChange, QEvent::WindowStateChange,
  QEvent::LanguageChange, QEvent::LocaleChange,
  QEvent::LayoutDirectionChange, QEvent::ReadOnlyChange.

*/
void QWidget::changeEvent(QEvent * event)

Rustdoc:

This event handler can be reimplemented to handle state changes.

The state being changed in this event can be retrieved through the *event*
supplied.

Change events include: QEvent::ToolBarChange,
QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange,
QEvent::StyleChange, QEvent::PaletteChange,
QEvent::WindowTitleChange, QEvent::IconTextChange,
QEvent::ModifiedChange, QEvent::MouseTrackingChange,
QEvent::ParentChange, QEvent::WindowStateChange,
QEvent::LanguageChange, QEvent::LocaleChange,
QEvent::LayoutDirectionChange, QEvent::ReadOnlyChange.


Entry 145
Function: FilteredFunctionvoid QWidget::mouseMoveEvent(QMouseEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive mouse move events for the widget.

    If mouse tracking is switched off, mouse move events only occur if
    a mouse button is pressed while the mouse is being moved. If mouse
    tracking is switched on, mouse move events occur even if no mouse
    button is pressed.

    QMouseEvent::pos() reports the position of the mouse cursor,
    relative to this widget. For press and release events, the
    position is usually the same as the position of the last mouse
    move event, but it might be different if the user's hand shakes.
    This is a feature of the underlying window system, not Qt.

    If you want to show a tooltip immediately, while the mouse is
    moving (e.g., to get the mouse coordinates with QMouseEvent::pos()
    and show them as a tooltip), you must first enable mouse tracking
    as described above. Then, to ensure that the tooltip is updated
    immediately, you must call QToolTip::showText() instead of
    setToolTip() in your implementation of mouseMoveEvent().

    \sa setMouseTracking(), mousePressEvent(), mouseReleaseEvent(),
    mouseDoubleClickEvent(), event(), QMouseEvent, {Scribble Example}
*/

void QWidget::mouseMoveEvent(QMouseEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive mouse move events for the widget.

If mouse tracking is switched off, mouse move events only occur if
a mouse button is pressed while the mouse is being moved. If mouse
tracking is switched on, mouse move events occur even if no mouse
button is pressed.

QMouseEvent::pos() reports the position of the mouse cursor,
relative to this widget. For press and release events, the
position is usually the same as the position of the last mouse
move event, but it might be different if the user's hand shakes.
This is a feature of the underlying window system, not Qt.

If you want to show a tooltip immediately, while the mouse is
moving (e.g., to get the mouse coordinates with QMouseEvent::pos()
and show them as a tooltip), you must first enable mouse tracking
as described above. Then, to ensure that the tooltip is updated
immediately, you must call QToolTip::showText() instead of
setToolTip() in your implementation of mouseMoveEvent().

**See also:** FilteredLinkSeeAlsosetMouseTracking()
FilteredLinkSeeAlsomousePressEvent()
FilteredLinkSeeAlsomouseReleaseEvent()
FilteredLinkSeeAlsomouseDoubleClickEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQMouseEvent
FilteredLinkSeeAlso{Scribble Example}

Entry 146
Function: FilteredFunctionvoid QWidget::mousePressEvent(QMouseEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive mouse press events for the widget.

    If you create new widgets in the mousePressEvent() the
    mouseReleaseEvent() may not end up where you expect, depending on
    the underlying window system (or X11 window manager), the widgets'
    location and maybe more.

    The default implementation implements the closing of popup widgets
    when you click outside the window. For other widget types it does
    nothing.

    \sa mouseReleaseEvent(), mouseDoubleClickEvent(),
    mouseMoveEvent(), event(), QMouseEvent, {Scribble Example}
*/

void QWidget::mousePressEvent(QMouseEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive mouse press events for the widget.

If you create new widgets in the mousePressEvent() the
mouseReleaseEvent() may not end up where you expect, depending on
the underlying window system (or X11 window manager), the widgets'
location and maybe more.

The default implementation implements the closing of popup widgets
when you click outside the window. For other widget types it does
nothing.

**See also:** FilteredLinkSeeAlsomouseReleaseEvent()
FilteredLinkSeeAlsomouseDoubleClickEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQMouseEvent
FilteredLinkSeeAlso{Scribble Example}

Entry 147
Function: FilteredFunctionvoid QWidget::mouseReleaseEvent(QMouseEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive mouse release events for the widget.

    \sa mousePressEvent(), mouseDoubleClickEvent(),
    mouseMoveEvent(), event(), QMouseEvent, {Scribble Example}
*/

void QWidget::mouseReleaseEvent(QMouseEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive mouse release events for the widget.

**See also:** FilteredLinkSeeAlsomousePressEvent()
FilteredLinkSeeAlsomouseDoubleClickEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQMouseEvent
FilteredLinkSeeAlso{Scribble Example}

Entry 148
Function: FilteredFunctionvoid QWidget::mouseDoubleClickEvent(QMouseEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive mouse double click events for the widget.

    The default implementation calls mousePressEvent().

    \note The widget will also receive mouse press and mouse release
    events in addition to the double click event. It is up to the
    developer to ensure that the application interprets these events
    correctly.

    \sa mousePressEvent(), mouseReleaseEvent(), mouseMoveEvent(),
    event(), QMouseEvent
*/

void QWidget::mouseDoubleClickEvent(QMouseEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive mouse double click events for the widget.

The default implementation calls mousePressEvent().

**Note**: The widget will also receive mouse press and mouse release
events in addition to the double click event. It is up to the
developer to ensure that the application interprets these events
correctly.

**See also:** FilteredLinkSeeAlsomousePressEvent()
FilteredLinkSeeAlsomouseReleaseEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQMouseEvent

Entry 149
Function: FilteredFunctionvoid QWidget::wheelEvent(QWheelEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive wheel events for the widget.

    If you reimplement this handler, it is very important that you
    \l{QEvent}{ignore()} the event if you do not handle
    it, so that the widget's parent can interpret it.

    The default implementation ignores the event.

    \sa QEvent::ignore(), QEvent::accept(), event(),
    QWheelEvent
*/

void QWidget::wheelEvent(QWheelEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive wheel events for the widget.

If you reimplement this handler, it is very important that you
[FilteredLinkNameignore()](FilteredLinkUrlQEvent)
the event if you do not handle
it, so that the widget's parent can interpret it.

The default implementation ignores the event.

**See also:** FilteredLinkSeeAlsoQEvent::ignore()
FilteredLinkSeeAlsoQEvent::accept()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQWheelEvent

Entry 150
Function: FilteredFunctionvoid QWidget::tabletEvent(QTabletEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive tablet events for the widget.

    If you reimplement this handler, it is very important that you
    \l{QEvent}{ignore()} the event if you do not handle
    it, so that the widget's parent can interpret it.

    The default implementation ignores the event.

    If tablet tracking is switched off, tablet move events only occur if the
    stylus is in contact with the tablet, or at least one stylus button is
    pressed, while the stylus is being moved. If tablet tracking is switched on,
    tablet move events occur even while the stylus is hovering in proximity of
    the tablet, with no buttons pressed.

    \sa QEvent::ignore(), QEvent::accept(), event(), setTabletTracking(),
    QTabletEvent
*/

void QWidget::tabletEvent(QTabletEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive tablet events for the widget.

If you reimplement this handler, it is very important that you
[FilteredLinkNameignore()](FilteredLinkUrlQEvent)
the event if you do not handle
it, so that the widget's parent can interpret it.

The default implementation ignores the event.

If tablet tracking is switched off, tablet move events only occur if the
stylus is in contact with the tablet, or at least one stylus button is
pressed, while the stylus is being moved. If tablet tracking is switched on,
tablet move events occur even while the stylus is hovering in proximity of
the tablet, with no buttons pressed.

**See also:** FilteredLinkSeeAlsoQEvent::ignore()
FilteredLinkSeeAlsoQEvent::accept()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsosetTabletTracking()
FilteredLinkSeeAlsoQTabletEvent

Entry 151
Function: FilteredFunctionvoid QWidget::keyPressEvent(QKeyEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive key press events for the widget.

    A widget must call setFocusPolicy() to accept focus initially and
    have focus in order to receive a key press event.

    If you reimplement this handler, it is very important that you
    call the base class implementation if you do not act upon the key.

    The default implementation closes popup widgets if the user
    presses the key sequence for QKeySequence::Cancel (typically the
    Escape key). Otherwise the event is ignored, so that the widget's
    parent can interpret it.

    Note that QKeyEvent starts with isAccepted() == true, so you do not
    need to call QKeyEvent::accept() - just do not call the base class
    implementation if you act upon the key.

    \sa keyReleaseEvent(), setFocusPolicy(),
    focusInEvent(), focusOutEvent(), event(), QKeyEvent, {Tetrix Example}
*/

void QWidget::keyPressEvent(QKeyEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive key press events for the widget.

A widget must call setFocusPolicy() to accept focus initially and
have focus in order to receive a key press event.

If you reimplement this handler, it is very important that you
call the base class implementation if you do not act upon the key.

The default implementation closes popup widgets if the user
presses the key sequence for QKeySequence::Cancel (typically the
Escape key). Otherwise the event is ignored, so that the widget's
parent can interpret it.

Note that QKeyEvent starts with isAccepted() == true, so you do not
need to call QKeyEvent::accept() - just do not call the base class
implementation if you act upon the key.

**See also:** FilteredLinkSeeAlsokeyReleaseEvent()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQKeyEvent
FilteredLinkSeeAlso{Tetrix Example}

Entry 152
Function: FilteredFunctionvoid QWidget::keyReleaseEvent(QKeyEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive key release events for the widget.

    A widget must \l{setFocusPolicy()}{accept focus}
    initially and \l{hasFocus()}{have focus} in order to
    receive a key release event.

    If you reimplement this handler, it is very important that you
    call the base class implementation if you do not act upon the key.

    The default implementation ignores the event, so that the widget's
    parent can interpret it.

    Note that QKeyEvent starts with isAccepted() == true, so you do not
    need to call QKeyEvent::accept() - just do not call the base class
    implementation if you act upon the key.

    \sa keyPressEvent(), QEvent::ignore(), setFocusPolicy(),
    focusInEvent(), focusOutEvent(), event(), QKeyEvent
*/

void QWidget::keyReleaseEvent(QKeyEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive key release events for the widget.

A widget must [FilteredLinkNameaccept focus](FilteredLinkUrlsetFocusPolicy())

initially and [FilteredLinkNamehave focus](FilteredLinkUrlhasFocus())
in order to
receive a key release event.

If you reimplement this handler, it is very important that you
call the base class implementation if you do not act upon the key.

The default implementation ignores the event, so that the widget's
parent can interpret it.

Note that QKeyEvent starts with isAccepted() == true, so you do not
need to call QKeyEvent::accept() - just do not call the base class
implementation if you act upon the key.

**See also:** FilteredLinkSeeAlsokeyPressEvent()
FilteredLinkSeeAlsoQEvent::ignore()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQKeyEvent

Entry 153
Function: FilteredFunctionvoid QWidget::focusInEvent(QFocusEvent *event)

QDoc:
/*!
    \fn void QWidget::focusInEvent(QFocusEvent *event)

    This event handler can be reimplemented in a subclass to receive
    keyboard focus events (focus received) for the widget. The event
    is passed in the \a event parameter

    A widget normally must setFocusPolicy() to something other than
    Qt::NoFocus in order to receive focus events. (Note that the
    application programmer can call setFocus() on any widget, even
    those that do not normally accept focus.)

    The default implementation updates the widget (except for windows
    that do not specify a focusPolicy()).

    \sa focusOutEvent(), setFocusPolicy(), keyPressEvent(),
    keyReleaseEvent(), event(), QFocusEvent
*/

void QWidget::focusInEvent(QFocusEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
keyboard focus events (focus received) for the widget. The event
is passed in the *event* parameter

A widget normally must setFocusPolicy() to something other than
Qt::NoFocus in order to receive focus events. (Note that the
application programmer can call setFocus() on any widget, even
those that do not normally accept focus.)

The default implementation updates the widget (except for windows
that do not specify a focusPolicy()).

**See also:** FilteredLinkSeeAlsofocusOutEvent()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsokeyPressEvent()
FilteredLinkSeeAlsokeyReleaseEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQFocusEvent

Entry 154
Function: FilteredFunctionvoid QWidget::focusOutEvent(QFocusEvent *event)

QDoc:
/*!
    \fn void QWidget::focusOutEvent(QFocusEvent *event)

    This event handler can be reimplemented in a subclass to receive
    keyboard focus events (focus lost) for the widget. The events is
    passed in the \a event parameter.

    A widget normally must setFocusPolicy() to something other than
    Qt::NoFocus in order to receive focus events. (Note that the
    application programmer can call setFocus() on any widget, even
    those that do not normally accept focus.)

    The default implementation updates the widget (except for windows
    that do not specify a focusPolicy()).

    \sa focusInEvent(), setFocusPolicy(), keyPressEvent(),
    keyReleaseEvent(), event(), QFocusEvent
*/

void QWidget::focusOutEvent(QFocusEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
keyboard focus events (focus lost) for the widget. The events is
passed in the *event* parameter.

A widget normally must setFocusPolicy() to something other than
Qt::NoFocus in order to receive focus events. (Note that the
application programmer can call setFocus() on any widget, even
those that do not normally accept focus.)

The default implementation updates the widget (except for windows
that do not specify a focusPolicy()).

**See also:** FilteredLinkSeeAlsofocusInEvent()
FilteredLinkSeeAlsosetFocusPolicy()
FilteredLinkSeeAlsokeyPressEvent()
FilteredLinkSeeAlsokeyReleaseEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQFocusEvent

Entry 155
Function: FilteredFunctionvoid QWidget::enterEvent(QEvent *event)

QDoc:
/*!
    \fn void QWidget::enterEvent(QEvent *event)

    This event handler can be reimplemented in a subclass to receive
    widget enter events which are passed in the \a event parameter.

    An event is sent to the widget when the mouse cursor enters the
    widget.

    \sa leaveEvent(), mouseMoveEvent(), event()
*/

void QWidget::enterEvent(QEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget enter events which are passed in the *event* parameter.

An event is sent to the widget when the mouse cursor enters the
widget.

**See also:** FilteredLinkSeeAlsoleaveEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsoevent()

Entry 156
Function: FilteredFunctionvoid QWidget::leaveEvent(QEvent *event)

QDoc:
/*!
    \fn void QWidget::leaveEvent(QEvent *event)

    This event handler can be reimplemented in a subclass to receive
    widget leave events which are passed in the \a event parameter.

    A leave event is sent to the widget when the mouse cursor leaves
    the widget.

    \sa enterEvent(), mouseMoveEvent(), event()
*/

void QWidget::leaveEvent(QEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget leave events which are passed in the *event* parameter.

A leave event is sent to the widget when the mouse cursor leaves
the widget.

**See also:** FilteredLinkSeeAlsoenterEvent()
FilteredLinkSeeAlsomouseMoveEvent()
FilteredLinkSeeAlsoevent()

Entry 157
Function: FilteredFunctionvoid QWidget::paintEvent(QPaintEvent *event)

QDoc:
/*!
    \fn void QWidget::paintEvent(QPaintEvent *event)

    This event handler can be reimplemented in a subclass to receive paint
    events passed in \a event.

    A paint event is a request to repaint all or part of a widget. It can
    happen for one of the following reasons:

    \list
        \li repaint() or update() was invoked,
        \li the widget was obscured and has now been uncovered, or
        \li many other reasons.
    \endlist

    Many widgets can simply repaint their entire surface when asked to, but
    some slow widgets need to optimize by painting only the requested region:
    QPaintEvent::region(). This speed optimization does not change the result,
    as painting is clipped to that region during event processing. QListView
    and QTableView do this, for example.

    Qt also tries to speed up painting by merging multiple paint events into
    one. When update() is called several times or the window system sends
    several paint events, Qt merges these events into one event with a larger
    region (see QRegion::united()). The repaint() function does not permit this
    optimization, so we suggest using update() whenever possible.

    When the paint event occurs, the update region has normally been erased, so
    you are painting on the widget's background.

    The background can be set using setBackgroundRole() and setPalette().

    Since Qt 4.0, QWidget automatically double-buffers its painting, so there
    is no need to write double-buffering code in paintEvent() to avoid flicker.

    \note Generally, you should refrain from calling update() or repaint()
    \b{inside} a paintEvent(). For example, calling update() or repaint() on
    children inside a paintEvent() results in undefined behavior; the child may
    or may not get a paint event.

    \warning If you are using a custom paint engine without Qt's backingstore,
    Qt::WA_PaintOnScreen must be set. Otherwise, QWidget::paintEngine() will
    never be called; the backingstore will be used instead.

    \sa event(), repaint(), update(), QPainter, QPixmap, QPaintEvent,
    {Analog Clock Example}
*/

void QWidget::paintEvent(QPaintEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive paint
events passed in *event.*

A paint event is a request to repaint all or part of a widget. It can
happen for one of the following reasons:

* repaint() or update() was invoked,
* the widget was obscured and has now been uncovered, or
* many other reasons.

Many widgets can simply repaint their entire surface when asked to, but
some slow widgets need to optimize by painting only the requested region:
QPaintEvent::region(). This speed optimization does not change the result,
as painting is clipped to that region during event processing. QListView
and QTableView do this, for example.

Qt also tries to speed up painting by merging multiple paint events into
one. When update() is called several times or the window system sends
several paint events, Qt merges these events into one event with a larger
region (see QRegion::united()). The repaint() function does not permit this
optimization, so we suggest using update() whenever possible.

When the paint event occurs, the update region has normally been erased, so
you are painting on the widget's background.

The background can be set using setBackgroundRole() and setPalette().

Since Qt 4.0, QWidget automatically double-buffers its painting, so there
is no need to write double-buffering code in paintEvent() to avoid flicker.

**Note**: Generally, you should refrain from calling update() or repaint()
**inside** a paintEvent(). For example, calling update() or repaint() on
children inside a paintEvent() results in undefined behavior; the child may
or may not get a paint event.

**Warning**: If you are using a custom paint engine without Qt's backingstore,
Qt::WA_PaintOnScreen must be set. Otherwise, QWidget::paintEngine() will
never be called; the backingstore will be used instead.

**See also:** FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsorepaint()
FilteredLinkSeeAlsoupdate()
FilteredLinkSeeAlsoQPainter
FilteredLinkSeeAlsoQPixmap
FilteredLinkSeeAlsoQPaintEvent
FilteredLinkSeeAlso{Analog Clock Example}

Entry 158
Function: FilteredFunctionvoid QWidget::moveEvent(QMoveEvent *event)

QDoc:
/*!
    \fn void QWidget::moveEvent(QMoveEvent *event)

    This event handler can be reimplemented in a subclass to receive
    widget move events which are passed in the \a event parameter.
    When the widget receives this event, it is already at the new
    position.

    The old position is accessible through QMoveEvent::oldPos().

    \sa resizeEvent(), event(), move(), QMoveEvent
*/

void QWidget::moveEvent(QMoveEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget move events which are passed in the *event* parameter.
When the widget receives this event, it is already at the new
position.

The old position is accessible through QMoveEvent::oldPos().

**See also:** FilteredLinkSeeAlsoresizeEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsomove()
FilteredLinkSeeAlsoQMoveEvent

Entry 159
Function: FilteredFunctionvoid QWidget::resizeEvent(QResizeEvent * /* event */)

QDoc:
/*!
    This event handler can be reimplemented in a subclass to receive
    widget resize events which are passed in the \a event parameter.
    When resizeEvent() is called, the widget already has its new
    geometry. The old size is accessible through
    QResizeEvent::oldSize().

    The widget will be erased and receive a paint event immediately
    after processing the resize event. No drawing need be (or should
    be) done inside this handler.


    \sa moveEvent(), event(), resize(), QResizeEvent, paintEvent(),
        {Scribble Example}
*/

void QWidget::resizeEvent(QResizeEvent * /* event */)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget resize events which are passed in the *event* parameter.
When resizeEvent() is called, the widget already has its new
geometry. The old size is accessible through
QResizeEvent::oldSize().

The widget will be erased and receive a paint event immediately
after processing the resize event. No drawing need be (or should
be) done inside this handler.

**See also:** FilteredLinkSeeAlsomoveEvent()
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoresize()
FilteredLinkSeeAlsoQResizeEvent
FilteredLinkSeeAlsopaintEvent()
FilteredLinkSeeAlso{Scribble Example}

Entry 160
Function: FilteredFunctionvoid QWidget::actionEvent(QActionEvent *event)

QDoc:
/*!
    \fn void QWidget::actionEvent(QActionEvent *event)

    This event handler is called with the given \a event whenever the
    widget's actions are changed.

    \sa addAction(), insertAction(), removeAction(), actions(), QActionEvent
*/
void QWidget::actionEvent(QActionEvent *)

Rustdoc:

This event handler is called with the given *event* whenever the
widget's actions are changed.

**See also:** FilteredLinkSeeAlsoaddAction()
FilteredLinkSeeAlsoinsertAction()
FilteredLinkSeeAlsoremoveAction()
FilteredLinkSeeAlsoactions()
FilteredLinkSeeAlsoQActionEvent

Entry 161
Function: FilteredFunctionvoid QWidget::closeEvent(QCloseEvent *event)

QDoc:
/*!
    This event handler is called with the given \a event when Qt receives a window
    close request for a top-level widget from the window system.

    By default, the event is accepted and the widget is closed. You can reimplement
    this function to change the way the widget responds to window close requests.
    For example, you can prevent the window from closing by calling \l{QEvent::}{ignore()}
    on all events.

    Main window applications typically use reimplementations of this function to check
    whether the user's work has been saved and ask for permission before closing.
    For example, the \l{Application Example} uses a helper function to determine whether
    or not to close the window:

    \snippet mainwindows/application/mainwindow.cpp 3
    \snippet mainwindows/application/mainwindow.cpp 4

    \sa event(), hide(), close(), QCloseEvent, {Application Example}
*/

void QWidget::closeEvent(QCloseEvent *event)

Rustdoc:

This event handler is called with the given *event* when Qt receives a window
close request for a top-level widget from the window system.

By default, the event is accepted and the widget is closed. You can reimplement
this function to change the way the widget responds to window close requests.
For example, you can prevent the window from closing by calling [FilteredLinkNameignore()](FilteredLinkUrlQEvent::)

on all events.

Main window applications typically use reimplementations of this function to check
whether the user's work has been saved and ask for permission before closing.
For example, the [FilteredLinkNameApplication Example](FilteredLinkUrlApplication%20Example)
uses a helper function to determine whether
or not to close the window:

**See also:** FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsohide()
FilteredLinkSeeAlsoclose()
FilteredLinkSeeAlsoQCloseEvent
FilteredLinkSeeAlso{Application Example}

Entry 162
Function: FilteredFunctionvoid QWidget::contextMenuEvent(QContextMenuEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive widget context menu events.

    The handler is called when the widget's \l contextMenuPolicy is
    Qt::DefaultContextMenu.

    The default implementation ignores the context event.
    See the \l QContextMenuEvent documentation for more details.

    \sa event(), QContextMenuEvent, customContextMenuRequested()
*/

void QWidget::contextMenuEvent(QContextMenuEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive widget context menu events.

The handler is called when the widget's [FilteredLinkNamecontextMenuPolicy](FilteredLinkUrlcontextMenuPolicy)
is
Qt::DefaultContextMenu.

The default implementation ignores the context event.
See the [FilteredLinkNameQContextMenuEvent](FilteredLinkUrlQContextMenuEvent)
documentation for more details.

**See also:** FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQContextMenuEvent
FilteredLinkSeeAlsocustomContextMenuRequested()

Entry 163
Function: FilteredFunctionvoid QWidget::inputMethodEvent(QInputMethodEvent *event)

QDoc:
/*!
    This event handler, for event \a event, can be reimplemented in a
    subclass to receive Input Method composition events. This handler
    is called when the state of the input method changes.

    Note that when creating custom text editing widgets, the
    Qt::WA_InputMethodEnabled window attribute must be set explicitly
    (using the setAttribute() function) in order to receive input
    method events.

    The default implementation calls event->ignore(), which rejects the
    Input Method event. See the \l QInputMethodEvent documentation for more
    details.

    \sa event(), QInputMethodEvent
*/
void QWidget::inputMethodEvent(QInputMethodEvent *event)

Rustdoc:

This event handler, for event *event,* can be reimplemented in a
subclass to receive Input Method composition events. This handler
is called when the state of the input method changes.

Note that when creating custom text editing widgets, the
Qt::WA_InputMethodEnabled window attribute must be set explicitly
(using the setAttribute() function) in order to receive input
method events.

The default implementation calls event->ignore(), which rejects the
Input Method event. See the [FilteredLinkNameQInputMethodEvent](FilteredLinkUrlQInputMethodEvent)
documentation for more
details.

**See also:** FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQInputMethodEvent

Entry 164
Function: FilteredFunctionQVariant QWidget::inputMethodQuery(Qt::InputMethodQuery query) const

QDoc:
/*!
    This method is only relevant for input widgets. It is used by the
    input method to query a set of properties of the widget to be
    able to support complex input method operations as support for
    surrounding text and reconversions.

    \a query specifies which property is queried.

    \sa inputMethodEvent(), QInputMethodEvent, QInputMethodQueryEvent, inputMethodHints
*/
QVariant QWidget::inputMethodQuery(Qt::InputMethodQuery query) const

Rustdoc:

This method is only relevant for input widgets. It is used by the
input method to query a set of properties of the widget to be
able to support complex input method operations as support for
surrounding text and reconversions.

*query* specifies which property is queried.

**See also:** FilteredLinkSeeAlsoinputMethodEvent()
FilteredLinkSeeAlsoQInputMethodEvent
FilteredLinkSeeAlsoQInputMethodQueryEvent
FilteredLinkSeeAlsoinputMethodHints

Entry 165
Brief: What input method specific hints the widget has.
Property: QWidget::inputMethodHints

QDoc:
/*!
    \property QWidget::inputMethodHints
    \brief What input method specific hints the widget has.

    This is only relevant for input widgets. It is used by
    the input method to retrieve hints as to how the input method
    should operate. For example, if the Qt::ImhFormattedNumbersOnly flag
    is set, the input method may change its visual components to reflect
    that only numbers can be entered.

    \warning Some widgets require certain flags in order to work as
    intended. To set a flag, do \c{w->setInputMethodHints(w->inputMethodHints()|f)}
    instead of \c{w->setInputMethodHints(f)}.

    \note The flags are only hints, so the particular input method
          implementation is free to ignore them. If you want to be
          sure that a certain type of characters are entered,
          you should also set a QValidator on the widget.

    The default value is Qt::ImhNone.

    \since 4.6

    \sa inputMethodQuery()
*/
Qt::InputMethodHints QWidget::inputMethodHints() const

Rustdoc:

This is only relevant for input widgets. It is used by
the input method to retrieve hints as to how the input method
should operate. For example, if the Qt::ImhFormattedNumbersOnly flag
is set, the input method may change its visual components to reflect
that only numbers can be entered.

**Warning**: Some widgets require certain flags in order to work as
intended. To set a flag, do `w->setInputMethodHints(w->inputMethodHints()|f)`
instead of `w->setInputMethodHints(f)` .

**Note**: The flags are only hints, so the particular input method
implementation is free to ignore them. If you want to be
sure that a certain type of characters are entered,
you should also set a QValidator on the widget.

The default value is Qt::ImhNone.

**See also:** FilteredLinkSeeAlsoinputMethodQuery()

Entry 166
Function: FilteredFunctionvoid QWidget::dragEnterEvent(QDragEnterEvent *event)

QDoc:
/*!
    \fn void QWidget::dragEnterEvent(QDragEnterEvent *event)

    This event handler is called when a drag is in progress and the
    mouse enters this widget. The event is passed in the \a event parameter.

    If the event is ignored, the widget won't receive any \l{dragMoveEvent()}{drag
    move events}.

    See the \l{dnd.html}{Drag-and-drop documentation} for an
    overview of how to provide drag-and-drop in your application.

    \sa QDrag, QDragEnterEvent
*/
void QWidget::dragEnterEvent(QDragEnterEvent *)

Rustdoc:

This event handler is called when a drag is in progress and the
mouse enters this widget. The event is passed in the *event* parameter.

If the event is ignored, the widget won't receive any [FilteredLinkNamedrag
move events](FilteredLinkUrldragMoveEvent())
.

See the [FilteredLinkNameDrag-and-drop documentation](FilteredLinkUrldnd.html)
for an
overview of how to provide drag-and-drop in your application.

**See also:** FilteredLinkSeeAlsoQDrag
FilteredLinkSeeAlsoQDragEnterEvent

Entry 167
Function: FilteredFunctionvoid QWidget::dragMoveEvent(QDragMoveEvent *event)

QDoc:
/*!
    \fn void QWidget::dragMoveEvent(QDragMoveEvent *event)

    This event handler is called if a drag is in progress, and when
    any of the following conditions occur: the cursor enters this widget,
    the cursor moves within this widget, or a modifier key is pressed on
    the keyboard while this widget has the focus. The event is passed
    in the \a event parameter.

    See the \l{dnd.html}{Drag-and-drop documentation} for an
    overview of how to provide drag-and-drop in your application.

    \sa QDrag, QDragMoveEvent
*/
void QWidget::dragMoveEvent(QDragMoveEvent *)

Rustdoc:

This event handler is called if a drag is in progress, and when
any of the following conditions occur: the cursor enters this widget,
the cursor moves within this widget, or a modifier key is pressed on
the keyboard while this widget has the focus. The event is passed
in the *event* parameter.

See the [FilteredLinkNameDrag-and-drop documentation](FilteredLinkUrldnd.html)
for an
overview of how to provide drag-and-drop in your application.

**See also:** FilteredLinkSeeAlsoQDrag
FilteredLinkSeeAlsoQDragMoveEvent

Entry 168
Function: FilteredFunctionvoid QWidget::dragLeaveEvent(QDragLeaveEvent *event)

QDoc:
/*!
    \fn void QWidget::dragLeaveEvent(QDragLeaveEvent *event)

    This event handler is called when a drag is in progress and the
    mouse leaves this widget. The event is passed in the \a event
    parameter.

    See the \l{dnd.html}{Drag-and-drop documentation} for an
    overview of how to provide drag-and-drop in your application.

    \sa QDrag, QDragLeaveEvent
*/
void QWidget::dragLeaveEvent(QDragLeaveEvent *)

Rustdoc:

This event handler is called when a drag is in progress and the
mouse leaves this widget. The event is passed in the *event*
parameter.

See the [FilteredLinkNameDrag-and-drop documentation](FilteredLinkUrldnd.html)
for an
overview of how to provide drag-and-drop in your application.

**See also:** FilteredLinkSeeAlsoQDrag
FilteredLinkSeeAlsoQDragLeaveEvent

Entry 169
Function: FilteredFunctionvoid QWidget::dropEvent(QDropEvent *event)

QDoc:
/*!
    \fn void QWidget::dropEvent(QDropEvent *event)

    This event handler is called when the drag is dropped on this
    widget. The event is passed in the \a event parameter.

    See the \l{dnd.html}{Drag-and-drop documentation} for an
    overview of how to provide drag-and-drop in your application.

    \sa QDrag, QDropEvent
*/
void QWidget::dropEvent(QDropEvent *)

Rustdoc:

This event handler is called when the drag is dropped on this
widget. The event is passed in the *event* parameter.

See the [FilteredLinkNameDrag-and-drop documentation](FilteredLinkUrldnd.html)
for an
overview of how to provide drag-and-drop in your application.

**See also:** FilteredLinkSeeAlsoQDrag
FilteredLinkSeeAlsoQDropEvent

Entry 170
Function: FilteredFunctionvoid QWidget::showEvent(QShowEvent *event)

QDoc:
/*!
    \fn void QWidget::showEvent(QShowEvent *event)

    This event handler can be reimplemented in a subclass to receive
    widget show events which are passed in the \a event parameter.

    Non-spontaneous show events are sent to widgets immediately
    before they are shown. The spontaneous show events of windows are
    delivered afterwards.

    Note: A widget receives spontaneous show and hide events when its
    mapping status is changed by the window system, e.g. a spontaneous
    hide event when the user minimizes the window, and a spontaneous
    show event when the window is restored again. After receiving a
    spontaneous hide event, a widget is still considered visible in
    the sense of isVisible().

    \sa visible, event(), QShowEvent
*/
void QWidget::showEvent(QShowEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget show events which are passed in the *event* parameter.

Non-spontaneous show events are sent to widgets immediately
before they are shown. The spontaneous show events of windows are
delivered afterwards.

Note: A widget receives spontaneous show and hide events when its
mapping status is changed by the window system, e.g. a spontaneous
hide event when the user minimizes the window, and a spontaneous
show event when the window is restored again. After receiving a
spontaneous hide event, a widget is still considered visible in
the sense of isVisible().

**See also:** FilteredLinkSeeAlsovisible
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQShowEvent

Entry 171
Function: FilteredFunctionvoid QWidget::hideEvent(QHideEvent *event)

QDoc:
/*!
    \fn void QWidget::hideEvent(QHideEvent *event)

    This event handler can be reimplemented in a subclass to receive
    widget hide events. The event is passed in the \a event parameter.

    Hide events are sent to widgets immediately after they have been
    hidden.

    Note: A widget receives spontaneous show and hide events when its
    mapping status is changed by the window system, e.g. a spontaneous
    hide event when the user minimizes the window, and a spontaneous
    show event when the window is restored again. After receiving a
    spontaneous hide event, a widget is still considered visible in
    the sense of isVisible().

    \sa visible, event(), QHideEvent
*/
void QWidget::hideEvent(QHideEvent *)

Rustdoc:

This event handler can be reimplemented in a subclass to receive
widget hide events. The event is passed in the *event* parameter.

Hide events are sent to widgets immediately after they have been
hidden.

Note: A widget receives spontaneous show and hide events when its
mapping status is changed by the window system, e.g. a spontaneous
hide event when the user minimizes the window, and a spontaneous
show event when the window is restored again. After receiving a
spontaneous hide event, a widget is still considered visible in
the sense of isVisible().

**See also:** FilteredLinkSeeAlsovisible
FilteredLinkSeeAlsoevent()
FilteredLinkSeeAlsoQHideEvent

Entry 172
Function: FilteredFunctionbool QWidget::nativeEvent(const QByteArray &eventType, void *message, long *result)

QDoc:
/*!
    This special event handler can be reimplemented in a subclass to
    receive native platform events identified by \a eventType
    which are passed in the \a message parameter.

    In your reimplementation of this function, if you want to stop the
    event being handled by Qt, return true and set \a result.
    If you return false, this native event is passed back to Qt,
    which translates the event into a Qt event and sends it to the widget.

    \note Events are only delivered to this event handler if the widget is
    has a native Window handle.

    \note This function superseedes the event filter functions
    x11Event(), winEvent() and macEvent() of Qt 4.

    \table
    \header \li Platform \li Event Type Identifier \li Message Type \li Result Type
    \row \li Windows \li "windows_generic_MSG" \li MSG * \li LRESULT
    \row \li macOS \li "NSEvent" \li NSEvent * \li
    \endtable
*/

bool QWidget::nativeEvent(const QByteArray &eventType, void *message, long *result)

Rustdoc:

This special event handler can be reimplemented in a subclass to
receive native platform events identified by *eventType*
which are passed in the *message* parameter.

In your reimplementation of this function, if you want to stop the
event being handled by Qt, return true and set *result.*
If you return false, this native event is passed back to Qt,
which translates the event into a Qt event and sends it to the widget.

**Note**: Events are only delivered to this event handler if the widget is
has a native Window handle.

**Note**: This function superseedes the event filter functions
x11Event(), winEvent() and macEvent() of Qt 4.

* Platform
* Event Type Identifier
* Message Type
* Result Type
* Windows
* "windows_generic_MSG"
* MSG *
* LRESULT
* macOS
* "NSEvent"
* NSEvent *
*

Entry 173
Function: FilteredFunctionvoid QWidget::ensurePolished() const

QDoc:
/*!
    Ensures that the widget and its children have been polished by
    QStyle (i.e., have a proper font and palette).

    QWidget calls this function after it has been fully constructed
    but before it is shown the very first time. You can call this
    function if you want to ensure that the widget is polished before
    doing an operation, e.g., the correct font size might be needed in
    the widget's sizeHint() reimplementation. Note that this function
    \e is called from the default implementation of sizeHint().

    Polishing is useful for final initialization that must happen after
    all constructors (from base classes as well as from subclasses)
    have been called.

    If you need to change some settings when a widget is polished,
    reimplement event() and handle the QEvent::Polish event type.

    \b{Note:} The function is declared const so that it can be called from
    other const functions (e.g., sizeHint()).

    \sa event()
*/
void QWidget::ensurePolished() const

Rustdoc:

Ensures that the widget and its children have been polished by
QStyle (i.e., have a proper font and palette).

QWidget calls this function after it has been fully constructed
but before it is shown the very first time. You can call this
function if you want to ensure that the widget is polished before
doing an operation, e.g., the correct font size might be needed in
the widget's sizeHint() reimplementation. Note that this function
*is* called from the default implementation of sizeHint().

Polishing is useful for final initialization that must happen after
all constructors (from base classes as well as from subclasses)
have been called.

If you need to change some settings when a widget is polished,
reimplement event() and handle the QEvent::Polish event type.

**Note:** The function is declared const so that it can be called from
other const functions (e.g., sizeHint()).

**See also:** FilteredLinkSeeAlsoevent()

Entry 174
Function: FilteredFunctionQRegion QWidget::mask() const

QDoc:
/*!
    Returns the mask currently set on a widget. If no mask is set the
    return value will be an empty region.

    \sa setMask(), clearMask(), QRegion::isEmpty(), {Shaped Clock Example}
*/
QRegion QWidget::mask() const

Rustdoc:

Returns the mask currently set on a widget. If no mask is set the
return value will be an empty region.

**See also:** FilteredLinkSeeAlsosetMask()
FilteredLinkSeeAlsoclearMask()
FilteredLinkSeeAlsoQRegion::isEmpty()
FilteredLinkSeeAlso{Shaped Clock Example}

Entry 175
Function: FilteredFunctionQLayout *QWidget::layout() const

QDoc:
/*!
    Returns the layout manager that is installed on this widget, or 0
    if no layout manager is installed.

    The layout manager sets the geometry of the widget's children
    that have been added to the layout.

    \sa setLayout(), sizePolicy(), {Layout Management}
*/
QLayout *QWidget::layout() const

Rustdoc:

Returns the layout manager that is installed on this widget, or 0
if no layout manager is installed.

The layout manager sets the geometry of the widget's children
that have been added to the layout.

**See also:** FilteredLinkSeeAlsosetLayout()
FilteredLinkSeeAlsosizePolicy()
FilteredLinkSeeAlso{Layout Management}

Entry 176
Function: FilteredFunctionvoid QWidget::setLayout(QLayout *layout)

QDoc:
/*!
    \fn void QWidget::setLayout(QLayout *layout)

    Sets the layout manager for this widget to \a layout.

    If there already is a layout manager installed on this widget,
    QWidget won't let you install another. You must first delete the
    existing layout manager (returned by layout()) before you can
    call setLayout() with the new layout.

    If \a layout is the layout manager on a different widget, setLayout()
    will reparent the layout and make it the layout manager for this widget.

    Example:

    \snippet layouts/layouts.cpp 24

    An alternative to calling this function is to pass this widget to
    the layout's constructor.

    The QWidget will take ownership of \a layout.

    \sa layout(), {Layout Management}
*/

void QWidget::setLayout(QLayout *l)

Rustdoc:

Sets the layout manager for this widget to *layout.*

If there already is a layout manager installed on this widget,
QWidget won't let you install another. You must first delete the
existing layout manager (returned by layout()) before you can
call setLayout() with the new layout.

If *layout* is the layout manager on a different widget, setLayout()
will reparent the layout and make it the layout manager for this widget.

Example:

An alternative to calling this function is to pass this widget to
the layout's constructor.

The QWidget will take ownership of *layout.*

**See also:** FilteredLinkSeeAlsolayout()
FilteredLinkSeeAlso{Layout Management}

Entry 177
Function: FilteredFunctionQLayout *QWidget::takeLayout()

QDoc:
/*!
    \fn QLayout *QWidget::takeLayout()

    Remove the layout from the widget.
    \since 4.5
*/

QLayout *QWidget::takeLayout()

Rustdoc:

Remove the layout from the widget.

Entry 178
Brief: the default layout behavior of the widget
Property: QWidget::sizePolicy

QDoc:
/*!
    \property QWidget::sizePolicy
    \brief the default layout behavior of the widget

    If there is a QLayout that manages this widget's children, the
    size policy specified by that layout is used. If there is no such
    QLayout, the result of this function is used.

    The default policy is Preferred/Preferred, which means that the
    widget can be freely resized, but prefers to be the size
    sizeHint() returns. Button-like widgets set the size policy to
    specify that they may stretch horizontally, but are fixed
    vertically. The same applies to lineedit controls (such as
    QLineEdit, QSpinBox or an editable QComboBox) and other
    horizontally orientated widgets (such as QProgressBar).
    QToolButton's are normally square, so they allow growth in both
    directions. Widgets that support different directions (such as
    QSlider, QScrollBar or QHeader) specify stretching in the
    respective direction only. Widgets that can provide scroll bars
    (usually subclasses of QScrollArea) tend to specify that they can
    use additional space, and that they can make do with less than
    sizeHint().

    \sa sizeHint(), QLayout, QSizePolicy, updateGeometry()
*/
QSizePolicy QWidget::sizePolicy() const

Rustdoc:

If there is a QLayout that manages this widget's children, the
size policy specified by that layout is used. If there is no such
QLayout, the result of this function is used.

The default policy is Preferred/Preferred, which means that the
widget can be freely resized, but prefers to be the size
sizeHint() returns. Button-like widgets set the size policy to
specify that they may stretch horizontally, but are fixed
vertically. The same applies to lineedit controls (such as
QLineEdit, QSpinBox or an editable QComboBox) and other
horizontally orientated widgets (such as QProgressBar).
QToolButton's are normally square, so they allow growth in both
directions. Widgets that support different directions (such as
QSlider, QScrollBar or QHeader) specify stretching in the
respective direction only. Widgets that can provide scroll bars
(usually subclasses of QScrollArea) tend to specify that they can
use additional space, and that they can make do with less than
sizeHint().

**See also:** FilteredLinkSeeAlsosizeHint()
FilteredLinkSeeAlsoQLayout
FilteredLinkSeeAlsoQSizePolicy
FilteredLinkSeeAlsoupdateGeometry()

Entry 179
Function: FilteredFunctionvoid QWidget::setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical)

QDoc:
/*!
    \fn void QWidget::setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical)
    \overload

    Sets the size policy of the widget to \a horizontal and \a
    vertical, with standard stretch and no height-for-width.

    \sa QSizePolicy::QSizePolicy()
*/

Rustdoc:

**Overloads** FilteredOverload
Sets the size policy of the widget to *horizontal* and *vertical,* with standard stretch and no height-for-width.

**See also:** FilteredLinkSeeAlsoQSizePolicy::QSizePolicy()

Entry 180
Function: FilteredFunctionint QWidget::heightForWidth(int w) const

QDoc:
/*!
    Returns the preferred height for this widget, given the width \a w.

    If this widget has a layout, the default implementation returns
    the layout's preferred height.  if there is no layout, the default
    implementation returns -1 indicating that the preferred height
    does not depend on the width.
*/

int QWidget::heightForWidth(int w) const

Rustdoc:

Returns the preferred height for this widget, given the width *w.*

If this widget has a layout, the default implementation returns
the layout's preferred height. if there is no layout, the default
implementation returns -1 indicating that the preferred height
does not depend on the width.

Entry 181
Function: FilteredFunctionbool QWidget::hasHeightForWidth() const

QDoc:
/*!
    \since 5.0

    Returns \c true if the widget's preferred height depends on its width; otherwise returns \c false.
*/
bool QWidget::hasHeightForWidth() const

Rustdoc:

Returns `true` if the widget's preferred height depends on its width; otherwise returns `false.`

Entry 182
Function: FilteredFunctionQWidget *QWidget::childAt(int x, int y) const

QDoc:
/*!
    \fn QWidget *QWidget::childAt(int x, int y) const

    Returns the visible child widget at the position (\a{x}, \a{y})
    in the widget's coordinate system. If there is no visible child
    widget at the specified position, the function returns 0.
*/

Rustdoc:

Returns the visible child widget at the position ( *x* , *y* )
in the widget's coordinate system. If there is no visible child
widget at the specified position, the function returns 0.

Entry 183
Function: FilteredFunctionQWidget *QWidget::childAt(const QPoint &p) const

QDoc:
/*!
    \overload

    Returns the visible child widget at point \a p in the widget's own
    coordinate system.
*/

QWidget *QWidget::childAt(const QPoint &p) const

Rustdoc:

**Overloads** FilteredOverload
Returns the visible child widget at point *p* in the widget's own
coordinate system.

Entry 184
Function: FilteredFunctionvoid QWidget::updateGeometry()

QDoc:
/*!
    Notifies the layout system that this widget has changed and may
    need to change geometry.

    Call this function if the sizeHint() or sizePolicy() have changed.

    For explicitly hidden widgets, updateGeometry() is a no-op. The
    layout system will be notified as soon as the widget is shown.
*/

void QWidget::updateGeometry()

Rustdoc:

Notifies the layout system that this widget has changed and may
need to change geometry.

Call this function if the sizeHint() or sizePolicy() have changed.

For explicitly hidden widgets, updateGeometry() is a no-op. The
layout system will be notified as soon as the widget is shown.

Entry 185
Property: QWidget::windowFlags

QDoc:
/*! \property QWidget::windowFlags

    Window flags are a combination of a type (e.g. Qt::Dialog) and
    zero or more hints to the window system (e.g.
    Qt::FramelessWindowHint).

    If the widget had type Qt::Widget or Qt::SubWindow and becomes a
    window (Qt::Window, Qt::Dialog, etc.), it is put at position (0,
    0) on the desktop. If the widget is a window and becomes a
    Qt::Widget or Qt::SubWindow, it is put at position (0, 0)
    relative to its parent widget.

    \note This function calls setParent() when changing the flags for
    a window, causing the widget to be hidden. You must call show() to make
    the widget visible again..

    \sa windowType(), setWindowFlag(), {Window Flags Example}
*/
void QWidget::setWindowFlags(Qt::WindowFlags flags)

Rustdoc:

Window flags are a combination of a type (e.g. Qt::Dialog) and
zero or more hints to the window system (e.g.
Qt::FramelessWindowHint).

If the widget had type Qt::Widget or Qt::SubWindow and becomes a
window (Qt::Window, Qt::Dialog, etc.), it is put at position (0,
0) on the desktop. If the widget is a window and becomes a
Qt::Widget or Qt::SubWindow, it is put at position (0, 0)
relative to its parent widget.

**Note**: This function calls setParent() when changing the flags for
a window, causing the widget to be hidden. You must call show() to make
the widget visible again..

**See also:** FilteredLinkSeeAlsowindowType()
FilteredLinkSeeAlsosetWindowFlag()
FilteredLinkSeeAlso{Window Flags Example}

Entry 186
Function: FilteredFunctionvoid QWidget::setWindowFlag(Qt::WindowType flag, bool on)

QDoc:
/*!
    \since 5.9

    Sets the window flag \a flag on this widget if \a on is true;
    otherwise clears the flag.

    \sa setWindowFlags(), windowFlags(), windowType()
*/
void QWidget::setWindowFlag(Qt::WindowType flag, bool on)

Rustdoc:

Sets the window flag *flag* on this widget if *on* is true;
otherwise clears the flag.

**See also:** FilteredLinkSeeAlsosetWindowFlags()
FilteredLinkSeeAlsowindowFlags()
FilteredLinkSeeAlsowindowType()

Entry 187
Function: FilteredFunctionvoid QWidget::overrideWindowFlags(Qt::WindowFlags flags)

QDoc:
/*!
    Sets the window flags for the widget to \a flags,
    \e without telling the window system.

    \warning Do not call this function unless you really know what
    you're doing.

    \sa setWindowFlags()
*/
void QWidget::overrideWindowFlags(Qt::WindowFlags flags)

Rustdoc:

Sets the window flags for the widget to *flags,*
*without* telling the window system.

**Warning**: Do not call this function unless you really know what
you're doing.

**See also:** FilteredLinkSeeAlsosetWindowFlags()

Entry 188
Function: FilteredFunctionQt::WindowType QWidget::windowType() const

QDoc:
/*!
    \fn Qt::WindowType QWidget::windowType() const

    Returns the window type of this widget. This is identical to
    windowFlags() & Qt::WindowType_Mask.

    \sa windowFlags
*/

Rustdoc:

Returns the window type of this widget. This is identical to
windowFlags() & Qt::WindowType_Mask.

**See also:** FilteredLinkSeeAlsowindowFlags

Entry 189
Function: FilteredFunctionvoid QWidget::setParent(QWidget *parent)

QDoc:
/*!
    Sets the parent of the widget to \a parent, and resets the window
    flags. The widget is moved to position (0, 0) in its new parent.

    If the new parent widget is in a different window, the
    reparented widget and its children are appended to the end of the
    \l{setFocusPolicy()}{tab chain} of the new parent
    widget, in the same internal order as before. If one of the moved
    widgets had keyboard focus, setParent() calls clearFocus() for that
    widget.

    If the new parent widget is in the same window as the
    old parent, setting the parent doesn't change the tab order or
    keyboard focus.

    If the "new" parent widget is the old parent widget, this function
    does nothing.

    \note The widget becomes invisible as part of changing its parent,
    even if it was previously visible. You must call show() to make the
    widget visible again.

    \warning It is very unlikely that you will ever need this
    function. If you have a widget that changes its content
    dynamically, it is far easier to use \l QStackedWidget.

    \sa setWindowFlags()
*/
void QWidget::setParent(QWidget *parent)

Rustdoc:

Sets the parent of the widget to *parent,* and resets the window
flags. The widget is moved to position (0, 0) in its new parent.

If the new parent widget is in a different window, the
reparented widget and its children are appended to the end of the
[FilteredLinkNametab chain](FilteredLinkUrlsetFocusPolicy())
of the new parent
widget, in the same internal order as before. If one of the moved
widgets had keyboard focus, setParent() calls clearFocus() for that
widget.

If the new parent widget is in the same window as the
old parent, setting the parent doesn't change the tab order or
keyboard focus.

If the parent widget is the old parent widget, this function
does nothing.

**Note**: The widget becomes invisible as part of changing its parent,
even if it was previously visible. You must call show() to make the
widget visible again.

**Warning**: It is very unlikely that you will ever need this
function. If you have a widget that changes its content
dynamically, it is far easier to use [FilteredLinkNameQStackedWidget.](FilteredLinkUrlQStackedWidget.)

**See also:** FilteredLinkSeeAlsosetWindowFlags()

Entry 190
Function: FilteredFunctionvoid QWidget::setParent(QWidget *parent, Qt::WindowFlags f)

QDoc:
/*!
    \overload

    This function also takes widget flags, \a f as an argument.
*/

void QWidget::setParent(QWidget *parent, Qt::WindowFlags f)

Rustdoc:

**Overloads** FilteredOverload
This function also takes widget flags, *f* as an argument.

Entry 191
Function: FilteredFunctionvoid QWidget::scroll(int dx, int dy)

QDoc:
/*!
    Scrolls the widget including its children \a dx pixels to the
    right and \a dy downward. Both \a dx and \a dy may be negative.

    After scrolling, the widgets will receive paint events for
    the areas that need to be repainted. For widgets that Qt knows to
    be opaque, this is only the newly exposed parts.
    For example, if an opaque widget is scrolled 8 pixels to the left,
    only an 8-pixel wide stripe at the right edge needs updating.

    Since widgets propagate the contents of their parents by default,
    you need to set the \l autoFillBackground property, or use
    setAttribute() to set the Qt::WA_OpaquePaintEvent attribute, to make
    a widget opaque.

    For widgets that use contents propagation, a scroll will cause an
    update of the entire scroll area.

    \sa {Transparency and Double Buffering}
*/

void QWidget::scroll(int dx, int dy)

Rustdoc:

Scrolls the widget including its children *dx* pixels to the
right and *dy* downward. Both *dx* and *dy* may be negative.

After scrolling, the widgets will receive paint events for
the areas that need to be repainted. For widgets that Qt knows to
be opaque, this is only the newly exposed parts.
For example, if an opaque widget is scrolled 8 pixels to the left,
only an 8-pixel wide stripe at the right edge needs updating.

Since widgets propagate the contents of their parents by default,
you need to set the [FilteredLinkNameautoFillBackground](FilteredLinkUrlautoFillBackground)
property, or use
setAttribute() to set the Qt::WA_OpaquePaintEvent attribute, to make
a widget opaque.

For widgets that use contents propagation, a scroll will cause an
update of the entire scroll area.

**See also:** FilteredLinkSeeAlso{Transparency and Double Buffering}

Entry 192
Function: FilteredFunctionvoid QWidget::scroll(int dx, int dy, const QRect &r)

QDoc:
/*!
    \overload

    This version only scrolls \a r and does not move the children of
    the widget.

    If \a r is empty or invalid, the result is undefined.

    \sa QScrollArea
*/
void QWidget::scroll(int dx, int dy, const QRect &r)

Rustdoc:

**Overloads** FilteredOverload
This version only scrolls *r* and does not move the children of
the widget.

If *r* is empty or invalid, the result is undefined.

**See also:** FilteredLinkSeeAlsoQScrollArea

Entry 193
Function: FilteredFunctionvoid QWidget::repaint()

QDoc:
/*!
    Repaints the widget directly by calling paintEvent() immediately,
    unless updates are disabled or the widget is hidden.

    We suggest only using repaint() if you need an immediate repaint,
    for example during animation. In almost all circumstances update()
    is better, as it permits Qt to optimize for speed and minimize
    flicker.

    \warning If you call repaint() in a function which may itself be
    called from paintEvent(), you may get infinite recursion. The
    update() function never causes recursion.

    \sa update(), paintEvent(), setUpdatesEnabled()
*/

void QWidget::repaint()

Rustdoc:

Repaints the widget directly by calling paintEvent() immediately,
unless updates are disabled or the widget is hidden.

We suggest only using repaint() if you need an immediate repaint,
for example during animation. In almost all circumstances update()
is better, as it permits Qt to optimize for speed and minimize
flicker.

**Warning**: If you call repaint() in a function which may itself be
called from paintEvent(), you may get infinite recursion. The
update() function never causes recursion.

**See also:** FilteredLinkSeeAlsoupdate()
FilteredLinkSeeAlsopaintEvent()
FilteredLinkSeeAlsosetUpdatesEnabled()

Entry 194
Function: FilteredFunctionvoid QWidget::repaint(int x, int y, int w, int h)

QDoc:
/*! \overload

    This version repaints a rectangle (\a x, \a y, \a w, \a h) inside
    the widget.

    If \a w is negative, it is replaced with \c{width() - x}, and if
    \a h is negative, it is replaced width \c{height() - y}.
*/
void QWidget::repaint(int x, int y, int w, int h)

Rustdoc:
**Overloads** FilteredOverload
This version repaints a rectangle ( *x,* *y,* *w,* *h)* inside
the widget.

If *w* is negative, it is replaced with `width() - x` , and if
*h* is negative, it is replaced width `height() - y` .

Entry 195
Function: FilteredFunctionvoid QWidget::repaint(const QRect &rect)

QDoc:
/*! \overload

    This version repaints a rectangle \a rect inside the widget.
*/
void QWidget::repaint(const QRect &rect)

Rustdoc:
**Overloads** FilteredOverload
This version repaints a rectangle *rect* inside the widget.

Entry 196
Function: FilteredFunctionvoid QWidget::repaint(const QRegion &rgn)

QDoc:
/*!
    \overload

    This version repaints a region \a rgn inside the widget.
*/
void QWidget::repaint(const QRegion &rgn)

Rustdoc:

**Overloads** FilteredOverload
This version repaints a region *rgn* inside the widget.

Entry 197
Function: FilteredFunctionvoid QWidget::update()

QDoc:
/*!
    Updates the widget unless updates are disabled or the widget is
    hidden.

    This function does not cause an immediate repaint; instead it
    schedules a paint event for processing when Qt returns to the main
    event loop. This permits Qt to optimize for more speed and less
    flicker than a call to repaint() does.

    Calling update() several times normally results in just one
    paintEvent() call.

    Qt normally erases the widget's area before the paintEvent() call.
    If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
    responsible for painting all its pixels with an opaque color.

    \sa repaint(), paintEvent(), setUpdatesEnabled(), {Analog Clock Example}
*/
void QWidget::update()

Rustdoc:

Updates the widget unless updates are disabled or the widget is
hidden.

This function does not cause an immediate repaint; instead it
schedules a paint event for processing when Qt returns to the main
event loop. This permits Qt to optimize for more speed and less
flicker than a call to repaint() does.

Calling update() several times normally results in just one
paintEvent() call.

Qt normally erases the widget's area before the paintEvent() call.
If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
responsible for painting all its pixels with an opaque color.

**See also:** FilteredLinkSeeAlsorepaint()
FilteredLinkSeeAlsopaintEvent()
FilteredLinkSeeAlsosetUpdatesEnabled()
FilteredLinkSeeAlso{Analog Clock Example}

Entry 198
Function: FilteredFunctionvoid QWidget::update(int x, int y, int w, int h)

QDoc:
/*! \fn void QWidget::update(int x, int y, int w, int h)
    \overload

    This version updates a rectangle (\a x, \a y, \a w, \a h) inside
    the widget.
*/

Rustdoc:
**Overloads** FilteredOverload
This version updates a rectangle ( *x,* *y,* *w,* *h)* inside
the widget.

Entry 199
Function: FilteredFunctionvoid QWidget::update(const QRect &rect)

QDoc:
/*!
    \overload

    This version updates a rectangle \a rect inside the widget.
*/
void QWidget::update(const QRect &rect)

Rustdoc:

**Overloads** FilteredOverload
This version updates a rectangle *rect* inside the widget.

Entry 200
Function: FilteredFunctionvoid QWidget::update(const QRegion &rgn)

QDoc:
/*!
    \overload

    This version repaints a region \a rgn inside the widget.
*/
void QWidget::update(const QRegion &rgn)

Rustdoc:

**Overloads** FilteredOverload
This version repaints a region *rgn* inside the widget.

Entry 201
Function: FilteredFunctionvoid QWidget::setAttribute(Qt::WidgetAttribute attribute, bool on)

QDoc:
/*!
    Sets the attribute \a attribute on this widget if \a on is true;
    otherwise clears the attribute.

    \sa testAttribute()
*/
void QWidget::setAttribute(Qt::WidgetAttribute attribute, bool on)

Rustdoc:

Sets the attribute *attribute* on this widget if *on* is true;
otherwise clears the attribute.

**See also:** FilteredLinkSeeAlsotestAttribute()

Entry 202
Function: FilteredFunctionbool QWidget::testAttribute(Qt::WidgetAttribute attribute) const

QDoc:
/*! \fn bool QWidget::testAttribute(Qt::WidgetAttribute attribute) const

  Returns \c true if attribute \a attribute is set on this widget;
  otherwise returns \c false.

  \sa setAttribute()
 */
bool QWidget::testAttribute_helper(Qt::WidgetAttribute attribute) const

Rustdoc:

Returns `true` if attribute *attribute* is set on this widget;
otherwise returns `false.`

**See also:** FilteredLinkSeeAlsosetAttribute()

Entry 203
Brief: The level of opacity for the window.
Property: QWidget::windowOpacity

QDoc:
/*!
  \property QWidget::windowOpacity

  \brief The level of opacity for the window.

  The valid range of opacity is from 1.0 (completely opaque) to
  0.0 (completely transparent).

  By default the value of this property is 1.0.

  This feature is available on Embedded Linux, \macos, Windows,
  and X11 platforms that support the Composite extension.

  \note On X11 you need to have a composite manager running,
  and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be
  supported by the window manager you are using.

  \warning Changing this property from opaque to transparent might issue a
  paint event that needs to be processed before the window is displayed
  correctly. This affects mainly the use of QPixmap::grabWindow(). Also note
  that semi-transparent windows update and resize significantly slower than
  opaque windows.

  \sa setMask()
*/
qreal QWidget::windowOpacity() const

Rustdoc:

The valid range of opacity is from 1.0 (completely opaque) to
0.0 (completely transparent).

By default the value of this property is 1.0.

This feature is available on Embedded Linux, MacOS , Windows,
and X11 platforms that support the Composite extension.

**Note**: On X11 you need to have a composite manager running,
and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be
supported by the window manager you are using.

**Warning**: Changing this property from opaque to transparent might issue a
paint event that needs to be processed before the window is displayed
correctly. This affects mainly the use of QPixmap::grabWindow(). Also note
that semi-transparent windows update and resize significantly slower than
opaque windows.

**See also:** FilteredLinkSeeAlsosetMask()

Entry 204
Brief: whether the document shown in the window has unsaved changes
Property: QWidget::windowModified

QDoc:
/*!
    \property QWidget::windowModified
    \brief whether the document shown in the window has unsaved changes

    A modified window is a window whose content has changed but has
    not been saved to disk. This flag will have different effects
    varied by the platform. On \macos the close button will have a
    modified look; on other platforms, the window title will have an
    '*' (asterisk).

    The window title must contain a "[*]" placeholder, which
    indicates where the '*' should appear. Normally, it should appear
    right after the file name (e.g., "document1.txt[*] - Text
    Editor"). If the window isn't modified, the placeholder is simply
    removed.

    Note that if a widget is set as modified, all its ancestors will
    also be set as modified. However, if you call \c
    {setWindowModified(false)} on a widget, this will not propagate to
    its parent because other children of the parent might have been
    modified.

    \sa windowTitle, {Application Example}, {SDI Example}, {MDI Example}
*/
bool QWidget::isWindowModified() const

Rustdoc:

A modified window is a window whose content has changed but has
not been saved to disk. This flag will have different effects
varied by the platform. On MacOS the close button will have a
modified look; on other platforms, the window title will have an
'*' (asterisk).

The window title must contain a placeholder, which
indicates where the '*' should appear. Normally, it should appear
right after the file name (e.g., ). If the window isn't modified, the placeholder is simply
removed.

Note that if a widget is set as modified, all its ancestors will
also be set as modified. However, if you call `setWindowModified(false)` on a widget, this will not propagate to
its parent because other children of the parent might have been
modified.

**See also:** FilteredLinkSeeAlsowindowTitle
FilteredLinkSeeAlso{Application Example}
FilteredLinkSeeAlso{SDI Example}
FilteredLinkSeeAlso{MDI Example}

Entry 205
Brief: the widget's tooltip
Property: QWidget::toolTip

QDoc:
/*!
  \property QWidget::toolTip

  \brief the widget's tooltip

  Note that by default tooltips are only shown for widgets that are
  children of the active window. You can change this behavior by
  setting the attribute Qt::WA_AlwaysShowToolTips on the \e window,
  not on the widget with the tooltip.

  If you want to control a tooltip's behavior, you can intercept the
  event() function and catch the QEvent::ToolTip event (e.g., if you
  want to customize the area for which the tooltip should be shown).

  By default, this property contains an empty string.

  \sa QToolTip, statusTip, whatsThis
*/
void QWidget::setToolTip(const QString &s)

Rustdoc:

Note that by default tooltips are only shown for widgets that are
children of the active window. You can change this behavior by
setting the attribute Qt::WA_AlwaysShowToolTips on the *window,*
not on the widget with the tooltip.

If you want to control a tooltip's behavior, you can intercept the
event() function and catch the QEvent::ToolTip event (e.g., if you
want to customize the area for which the tooltip should be shown).

By default, this property contains an empty string.

**See also:** FilteredLinkSeeAlsoQToolTip
FilteredLinkSeeAlsostatusTip
FilteredLinkSeeAlsowhatsThis

Entry 206
Brief: the widget's tooltip duration
Property: QWidget::toolTipDuration

QDoc:
/*!
  \property QWidget::toolTipDuration
  \brief the widget's tooltip duration
  \since 5.2

  Specifies how long time the tooltip will be displayed, in milliseconds.
  If the value is -1 (default) the duration is calculated depending on the length of the tooltip.

  \sa toolTip
*/

void QWidget::setToolTipDuration(int msec)

Rustdoc:

Specifies how long time the tooltip will be displayed, in milliseconds.
If the value is -1 (default) the duration is calculated depending on the length of the tooltip.

**See also:** FilteredLinkSeeAlsotoolTip

Entry 207
Brief: the widget's status tip
Property: QWidget::statusTip

QDoc:
/*!
  \property QWidget::statusTip
  \brief the widget's status tip

  By default, this property contains an empty string.

  \sa toolTip, whatsThis
*/
void QWidget::setStatusTip(const QString &s)

Rustdoc:

By default, this property contains an empty string.

**See also:** FilteredLinkSeeAlsotoolTip
FilteredLinkSeeAlsowhatsThis

Entry 208
Brief: the widget's What's This help text.
Property: QWidget::whatsThis

QDoc:
/*!
  \property QWidget::whatsThis

  \brief the widget's What's This help text.

  By default, this property contains an empty string.

  \sa QWhatsThis, QWidget::toolTip, QWidget::statusTip
*/
void QWidget::setWhatsThis(const QString &s)

Rustdoc:

By default, this property contains an empty string.

**See also:** FilteredLinkSeeAlsoQWhatsThis
FilteredLinkSeeAlsoQWidget::toolTip
FilteredLinkSeeAlsoQWidget::statusTip

Entry 209
Brief: the widget's name as seen by assistive technologies
Property: QWidget::accessibleName

QDoc:
/*!
  \property QWidget::accessibleName

  \brief the widget's name as seen by assistive technologies

  This is the primary name by which assistive technology such as screen readers
  announce this widget. For most widgets setting this property is not required.
  For example for QPushButton the button's text will be used.

  It is important to set this property when the widget does not provide any
  text. For example a button that only contains an icon needs to set this
  property to work with screen readers.
  The name should be short and equivalent to the visual information conveyed
  by the widget.

  This property has to be \l{Internationalization with Qt}{localized}.

  By default, this property contains an empty string.

  \sa QWidget::accessibleDescription, QAccessibleInterface::text()
*/
void QWidget::setAccessibleName(const QString &name)

Rustdoc:

This is the primary name by which assistive technology such as screen readers
announce this widget. For most widgets setting this property is not required.
For example for QPushButton the button's text will be used.

It is important to set this property when the widget does not provide any
text. For example a button that only contains an icon needs to set this
property to work with screen readers.
The name should be short and equivalent to the visual information conveyed
by the widget.

This property has to be [FilteredLinkNamelocalized](FilteredLinkUrlInternationalization%20with%20Qt)
.

By default, this property contains an empty string.

**See also:** FilteredLinkSeeAlsoQWidget::accessibleDescription
FilteredLinkSeeAlsoQAccessibleInterface::text()

Entry 210
Brief: the widget's description as seen by assistive technologies
Property: QWidget::accessibleDescription

QDoc:
/*!
  \property QWidget::accessibleDescription

  \brief the widget's description as seen by assistive technologies

  The accessible description of a widget should convey what a widget does.
  While the \l accessibleName should be a short and consise string (e.g. \gui{Save}),
  the description should give more context, such as \gui{Saves the current document}.

  This property has to be \l{Internationalization with Qt}{localized}.

  By default, this property contains an empty string and Qt falls back
  to using the tool tip to provide this information.

  \sa QWidget::accessibleName, QAccessibleInterface::text()
*/
void QWidget::setAccessibleDescription(const QString &description)

Rustdoc:

The accessible description of a widget should convey what a widget does.
While the [FilteredLinkNameaccessibleName](FilteredLinkUrlaccessibleName)
should be a short and consise string (e.g. **Save** ),
the description should give more context, such as **Saves the current document** .

This property has to be [FilteredLinkNamelocalized](FilteredLinkUrlInternationalization%20with%20Qt)
.

By default, this property contains an empty string and Qt falls back
to using the tool tip to provide this information.

**See also:** FilteredLinkSeeAlsoQWidget::accessibleName
FilteredLinkSeeAlsoQAccessibleInterface::text()

Entry 211
Function: FilteredFunctionint QWidget::grabShortcut(const QKeySequence &key, Qt::ShortcutContext context)

QDoc:
/*!
    Adds a shortcut to Qt's shortcut system that watches for the given
    \a key sequence in the given \a context. If the \a context is
    Qt::ApplicationShortcut, the shortcut applies to the application as a
    whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut,
    or to the window itself, Qt::WindowShortcut.

    If the same \a key sequence has been grabbed by several widgets,
    when the \a key sequence occurs a QEvent::Shortcut event is sent
    to all the widgets to which it applies in a non-deterministic
    order, but with the ``ambiguous'' flag set to true.

    \warning You should not normally need to use this function;
    instead create \l{QAction}s with the shortcut key sequences you
    require (if you also want equivalent menu options and toolbar
    buttons), or create \l{QShortcut}s if you just need key sequences.
    Both QAction and QShortcut handle all the event filtering for you,
    and provide signals which are triggered when the user triggers the
    key sequence, so are much easier to use than this low-level
    function.

    \sa releaseShortcut(), setShortcutEnabled()
*/
int QWidget::grabShortcut(const QKeySequence &key, Qt::ShortcutContext context)

Rustdoc:

Adds a shortcut to Qt's shortcut system that watches for the given
*key* sequence in the given *context.* If the *context* is
Qt::ApplicationShortcut, the shortcut applies to the application as a
whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut,
or to the window itself, Qt::WindowShortcut.

If the same *key* sequence has been grabbed by several widgets,
when the *key* sequence occurs a QEvent::Shortcut event is sent
to all the widgets to which it applies in a non-deterministic
order, but with the ``ambiguous'' flag set to true.

**Warning**: You should not normally need to use this function;
instead create [FilteredLinkNameQAction](FilteredLinkUrlQAction)
s with the shortcut key sequences you
require (if you also want equivalent menu options and toolbar
buttons), or create [FilteredLinkNameQShortcut](FilteredLinkUrlQShortcut)
s if you just need key sequences.
Both QAction and QShortcut handle all the event filtering for you,
and provide signals which are triggered when the user triggers the
key sequence, so are much easier to use than this low-level
function.

**See also:** FilteredLinkSeeAlsoreleaseShortcut()
FilteredLinkSeeAlsosetShortcutEnabled()

Entry 212
Function: FilteredFunctionvoid QWidget::releaseShortcut(int id)

QDoc:
/*!
    Removes the shortcut with the given \a id from Qt's shortcut
    system. The widget will no longer receive QEvent::Shortcut events
    for the shortcut's key sequence (unless it has other shortcuts
    with the same key sequence).

    \warning You should not normally need to use this function since
    Qt's shortcut system removes shortcuts automatically when their
    parent widget is destroyed. It is best to use QAction or
    QShortcut to handle shortcuts, since they are easier to use than
    this low-level function. Note also that this is an expensive
    operation.

    \sa grabShortcut(), setShortcutEnabled()
*/
void QWidget::releaseShortcut(int id)

Rustdoc:

Removes the shortcut with the given *id* from Qt's shortcut
system. The widget will no longer receive QEvent::Shortcut events
for the shortcut's key sequence (unless it has other shortcuts
with the same key sequence).

**Warning**: You should not normally need to use this function since
Qt's shortcut system removes shortcuts automatically when their
parent widget is destroyed. It is best to use QAction or
QShortcut to handle shortcuts, since they are easier to use than
this low-level function. Note also that this is an expensive
operation.

**See also:** FilteredLinkSeeAlsograbShortcut()
FilteredLinkSeeAlsosetShortcutEnabled()

Entry 213
Function: FilteredFunctionvoid QWidget::setShortcutEnabled(int id, bool enable)

QDoc:
/*!
    If \a enable is true, the shortcut with the given \a id is
    enabled; otherwise the shortcut is disabled.

    \warning You should not normally need to use this function since
    Qt's shortcut system enables/disables shortcuts automatically as
    widgets become hidden/visible and gain or lose focus. It is best
    to use QAction or QShortcut to handle shortcuts, since they are
    easier to use than this low-level function.

    \sa grabShortcut(), releaseShortcut()
*/
void QWidget::setShortcutEnabled(int id, bool enable)

Rustdoc:

If *enable* is true, the shortcut with the given *id* is
enabled; otherwise the shortcut is disabled.

**Warning**: You should not normally need to use this function since
Qt's shortcut system enables/disables shortcuts automatically as
widgets become hidden/visible and gain or lose focus. It is best
to use QAction or QShortcut to handle shortcuts, since they are
easier to use than this low-level function.

**See also:** FilteredLinkSeeAlsograbShortcut()
FilteredLinkSeeAlsoreleaseShortcut()

Entry 214
Function: FilteredFunctionvoid QWidget::setShortcutAutoRepeat(int id, bool enable)

QDoc:
/*!
    \since 4.2

    If \a enable is true, auto repeat of the shortcut with the
    given \a id is enabled; otherwise it is disabled.

    \sa grabShortcut(), releaseShortcut()
*/
void QWidget::setShortcutAutoRepeat(int id, bool enable)

Rustdoc:

If *enable* is true, auto repeat of the shortcut with the
given *id* is enabled; otherwise it is disabled.

**See also:** FilteredLinkSeeAlsograbShortcut()
FilteredLinkSeeAlsoreleaseShortcut()

Entry 215
Function: FilteredFunctionvoid QWidget::updateMicroFocus()

QDoc:
/*!
    Updates the widget's micro focus.
*/
void QWidget::updateMicroFocus()

Rustdoc:

Updates the widget's micro focus.

Entry 216
Function: FilteredFunctionvoid QWidget::raise()

QDoc:
/*!
    Raises this widget to the top of the parent widget's stack.

    After this call the widget will be visually in front of any
    overlapping sibling widgets.

    \note When using activateWindow(), you can call this function to
    ensure that the window is stacked on top.

    \sa lower(), stackUnder()
*/

void QWidget::raise()

Rustdoc:

Raises this widget to the top of the parent widget's stack.

After this call the widget will be visually in front of any
overlapping sibling widgets.

**Note**: When using activateWindow(), you can call this function to
ensure that the window is stacked on top.

**See also:** FilteredLinkSeeAlsolower()
FilteredLinkSeeAlsostackUnder()

Entry 217
Function: FilteredFunctionvoid QWidget::lower()

QDoc:
/*!
    Lowers the widget to the bottom of the parent widget's stack.

    After this call the widget will be visually behind (and therefore
    obscured by) any overlapping sibling widgets.

    \sa raise(), stackUnder()
*/

void QWidget::lower()

Rustdoc:

Lowers the widget to the bottom of the parent widget's stack.

After this call the widget will be visually behind (and therefore
obscured by) any overlapping sibling widgets.

**See also:** FilteredLinkSeeAlsoraise()
FilteredLinkSeeAlsostackUnder()

Entry 218
Function: FilteredFunctionvoid QWidget::stackUnder(QWidget* w)

QDoc:
/*!
    Places the widget under \a w in the parent widget's stack.

    To make this work, the widget itself and \a w must be siblings.

    \sa raise(), lower()
*/
void QWidget::stackUnder(QWidget* w)

Rustdoc:

Places the widget under *w* in the parent widget's stack.

To make this work, the widget itself and *w* must be siblings.

**See also:** FilteredLinkSeeAlsoraise()
FilteredLinkSeeAlsolower()

Entry 219
Function: FilteredFunctionbool QWidget::isTopLevel() const

QDoc:
/*!
    \fn bool QWidget::isTopLevel() const
    \obsolete

    Use isWindow() instead.
*/

Rustdoc:

Use isWindow() instead.

Entry 220
Macro: QWIDGETSIZE_MAX

QDoc:
/*!
     \macro QWIDGETSIZE_MAX
     \relates QWidget

     Defines the maximum size for a QWidget object.

     The largest allowed size for a widget is QSize(QWIDGETSIZE_MAX,
     QWIDGETSIZE_MAX), i.e. QSize (16777215,16777215).

     \sa QWidget::setMaximumSize()
*/

Rustdoc:

Defines the maximum size for a QWidget object.

The largest allowed size for a widget is QSize(QWIDGETSIZE_MAX,
QWIDGETSIZE_MAX), i.e. QSize (16777215,16777215).

**See also:** FilteredLinkSeeAlsoQWidget::setMaximumSize()

Entry 221
Function: FilteredFunctionQWidget::setupUi(QWidget *widget)

QDoc:
/*!
    \fn QWidget::setupUi(QWidget *widget)

    Sets up the user interface for the specified \a widget.

    \note This function is available with widgets that derive from user
    interface descriptions created using \l{uic}.

    \sa {Using a Designer UI File in Your Application}
*/

QRect QWidgetPrivate::frameStrut() const

Rustdoc:

Sets up the user interface for the specified *widget.*

**Note**: This function is available with widgets that derive from user
interface descriptions created using [FilteredLinkNameuic](FilteredLinkUrluic)
.

**See also:** FilteredLinkSeeAlso{Using a Designer UI File in Your Application}

Entry 222
Function: FilteredFunctionQBackingStore *QWidget::backingStore() const

QDoc:
/*!
    \since 5.0

    Returns the QBackingStore this widget will be drawn into.
*/
QBackingStore *QWidget::backingStore() const

Rustdoc:

Returns the QBackingStore this widget will be drawn into.

Entry 223
Function: FilteredFunctionQGraphicsProxyWidget *QWidget::graphicsProxyWidget() const

QDoc:
/*!
   \since 4.5

   Returns the proxy widget for the corresponding embedded widget in a graphics
   view; otherwise returns 0.

   \sa QGraphicsProxyWidget::createProxyForChildWidget(),
       QGraphicsScene::addWidget()
 */
QGraphicsProxyWidget *QWidget::graphicsProxyWidget() const

Rustdoc:

Returns the proxy widget for the corresponding embedded widget in a graphics
view; otherwise returns 0.

**See also:** FilteredLinkSeeAlsoQGraphicsProxyWidget::createProxyForChildWidget()
FilteredLinkSeeAlsoQGraphicsScene::addWidget()

Entry 224
Function: FilteredFunctionvoid QWidget::grabGesture(Qt::GestureType gesture, Qt::GestureFlags flags)

QDoc:
/*!
    Subscribes the widget to a given \a gesture with specific \a flags.

    \sa ungrabGesture(), QGestureEvent
    \since 4.6
*/
void QWidget::grabGesture(Qt::GestureType gesture, Qt::GestureFlags flags)

Rustdoc:

Subscribes the widget to a given *gesture* with specific *flags.*

**See also:** FilteredLinkSeeAlsoungrabGesture()
FilteredLinkSeeAlsoQGestureEvent

Entry 225
Function: FilteredFunctionvoid QWidget::ungrabGesture(Qt::GestureType gesture)

QDoc:
/*!
    Unsubscribes the widget from a given \a gesture type

    \sa grabGesture(), QGestureEvent
    \since 4.6
*/
void QWidget::ungrabGesture(Qt::GestureType gesture)

Rustdoc:

Unsubscribes the widget from a given *gesture* type

**See also:** FilteredLinkSeeAlsograbGesture()
FilteredLinkSeeAlsoQGestureEvent

Entry 226
Function: FilteredFunctionvoid QWidget::destroy(bool destroyWindow, bool destroySubWindows)

QDoc:
/*!
    \fn void QWidget::destroy(bool destroyWindow, bool destroySubWindows)

    Frees up window system resources. Destroys the widget window if \a
    destroyWindow is true.

    destroy() calls itself recursively for all the child widgets,
    passing \a destroySubWindows for the \a destroyWindow parameter.
    To have more control over destruction of subwidgets, destroy
    subwidgets selectively first.

    This function is usually called from the QWidget destructor.
*/
void QWidget::destroy(bool destroyWindow, bool destroySubWindows)

Rustdoc:

Frees up window system resources. Destroys the widget window if *destroyWindow* is true.

destroy() calls itself recursively for all the child widgets,
passing *destroySubWindows* for the *destroyWindow* parameter.
To have more control over destruction of subwidgets, destroy
subwidgets selectively first.

This function is usually called from the QWidget destructor.

Entry 227
Function: FilteredFunctionQPaintEngine *QWidget::paintEngine() const

QDoc:
/*!
    \fn QPaintEngine *QWidget::paintEngine() const

    Returns the widget's paint engine.

    Note that this function should not be called explicitly by the
    user, since it's meant for reimplementation purposes only. The
    function is called by Qt internally, and the default
    implementation may not always return a valid pointer.
*/
QPaintEngine *QWidget::paintEngine() const

Rustdoc:

Returns the widget's paint engine.

Note that this function should not be called explicitly by the
user, since it's meant for reimplementation purposes only. The
function is called by Qt internally, and the default
implementation may not always return a valid pointer.

Entry 228
Function: FilteredFunctionQPoint QWidget::mapToGlobal(const QPoint &pos) const

QDoc:
/*!
    \fn QPoint QWidget::mapToGlobal(const QPoint &pos) const

    Translates the widget coordinate \a pos to global screen
    coordinates. For example, \c{mapToGlobal(QPoint(0,0))} would give
    the global coordinates of the top-left pixel of the widget.

    \sa mapFromGlobal(), mapTo(), mapToParent()
*/
QPoint QWidget::mapToGlobal(const QPoint &pos) const

Rustdoc:

Translates the widget coordinate *pos* to global screen
coordinates. For example, `mapToGlobal(QPoint(0,0))` would give
the global coordinates of the top-left pixel of the widget.

**See also:** FilteredLinkSeeAlsomapFromGlobal()
FilteredLinkSeeAlsomapTo()
FilteredLinkSeeAlsomapToParent()

Entry 229
Function: FilteredFunctionQPoint QWidget::mapFromGlobal(const QPoint &pos) const

QDoc:
/*!
    \fn QPoint QWidget::mapFromGlobal(const QPoint &pos) const

    Translates the global screen coordinate \a pos to widget
    coordinates.

    \sa mapToGlobal(), mapFrom(), mapFromParent()
*/
QPoint QWidget::mapFromGlobal(const QPoint &pos) const

Rustdoc:

Translates the global screen coordinate *pos* to widget
coordinates.

**See also:** FilteredLinkSeeAlsomapToGlobal()
FilteredLinkSeeAlsomapFrom()
FilteredLinkSeeAlsomapFromParent()

Entry 230
Function: FilteredFunctionvoid QWidget::grabMouse()

QDoc:
/*!
    \fn void QWidget::grabMouse()

    Grabs the mouse input.

    This widget receives all mouse events until releaseMouse() is
    called; other widgets get no mouse events at all. Keyboard
    events are not affected. Use grabKeyboard() if you want to grab
    that.

    \warning Bugs in mouse-grabbing applications very often lock the
    terminal. Use this function with extreme caution, and consider
    using the \c -nograb command line option while debugging.

    It is almost never necessary to grab the mouse when using Qt, as
    Qt grabs and releases it sensibly. In particular, Qt grabs the
    mouse when a mouse button is pressed and keeps it until the last
    button is released.

    \note Only visible widgets can grab mouse input. If isVisible()
    returns \c false for a widget, that widget cannot call grabMouse().

    \note On Windows, grabMouse() only works when the mouse is inside a window
    owned by the process.
    On \macos, grabMouse() only works when the mouse is inside the frame of that widget.

    \sa releaseMouse(), grabKeyboard(), releaseKeyboard()
*/
void QWidget::grabMouse()

Rustdoc:

Grabs the mouse input.

This widget receives all mouse events until releaseMouse() is
called; other widgets get no mouse events at all. Keyboard
events are not affected. Use grabKeyboard() if you want to grab
that.

**Warning**: Bugs in mouse-grabbing applications very often lock the
terminal. Use this function with extreme caution, and consider
using the `-nograb` command line option while debugging.

It is almost never necessary to grab the mouse when using Qt, as
Qt grabs and releases it sensibly. In particular, Qt grabs the
mouse when a mouse button is pressed and keeps it until the last
button is released.

**Note**: Only visible widgets can grab mouse input. If isVisible()
returns `false` for a widget, that widget cannot call grabMouse().

**Note**: On Windows, grabMouse() only works when the mouse is inside a window
owned by the process.
On MacOS , grabMouse() only works when the mouse is inside the frame of that widget.

**See also:** FilteredLinkSeeAlsoreleaseMouse()
FilteredLinkSeeAlsograbKeyboard()
FilteredLinkSeeAlsoreleaseKeyboard()

Entry 231
Function: FilteredFunctionvoid QWidget::grabMouse(const QCursor &cursor)

QDoc:
/*!
    \fn void QWidget::grabMouse(const QCursor &cursor)
    \overload grabMouse()

    Grabs the mouse input and changes the cursor shape.

    The cursor will assume shape \a cursor (for as long as the mouse
    focus is grabbed) and this widget will be the only one to receive
    mouse events until releaseMouse() is called().

    \warning Grabbing the mouse might lock the terminal.

    \note See the note in QWidget::grabMouse().

    \sa releaseMouse(), grabKeyboard(), releaseKeyboard(), setCursor()
*/

Rustdoc:

**Overloads** FilteredOverloadgrabMouse()
Grabs the mouse input and changes the cursor shape.

The cursor will assume shape *cursor* (for as long as the mouse
focus is grabbed) and this widget will be the only one to receive
mouse events until releaseMouse() is called().

**Warning**: Grabbing the mouse might lock the terminal.

**Note**: See the note in QWidget::grabMouse().

**See also:** FilteredLinkSeeAlsoreleaseMouse()
FilteredLinkSeeAlsograbKeyboard()
FilteredLinkSeeAlsoreleaseKeyboard()
FilteredLinkSeeAlsosetCursor()

Entry 232
Function: FilteredFunctionvoid QWidget::releaseMouse()

QDoc:
/*!
    \fn void QWidget::releaseMouse()

    Releases the mouse grab.

    \sa grabMouse(), grabKeyboard(), releaseKeyboard()
*/
void QWidget::releaseMouse()

Rustdoc:

Releases the mouse grab.

**See also:** FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlsograbKeyboard()
FilteredLinkSeeAlsoreleaseKeyboard()

Entry 233
Function: FilteredFunctionvoid QWidget::grabKeyboard()

QDoc:
/*!
    \fn void QWidget::grabKeyboard()

    Grabs the keyboard input.

    This widget receives all keyboard events until releaseKeyboard()
    is called; other widgets get no keyboard events at all. Mouse
    events are not affected. Use grabMouse() if you want to grab that.

    The focus widget is not affected, except that it doesn't receive
    any keyboard events. setFocus() moves the focus as usual, but the
    new focus widget receives keyboard events only after
    releaseKeyboard() is called.

    If a different widget is currently grabbing keyboard input, that
    widget's grab is released first.

    \sa releaseKeyboard(), grabMouse(), releaseMouse(), focusWidget()
*/
void QWidget::grabKeyboard()

Rustdoc:

Grabs the keyboard input.

This widget receives all keyboard events until releaseKeyboard()
is called; other widgets get no keyboard events at all. Mouse
events are not affected. Use grabMouse() if you want to grab that.

The focus widget is not affected, except that it doesn't receive
any keyboard events. setFocus() moves the focus as usual, but the
new focus widget receives keyboard events only after
releaseKeyboard() is called.

If a different widget is currently grabbing keyboard input, that
widget's grab is released first.

**See also:** FilteredLinkSeeAlsoreleaseKeyboard()
FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlsoreleaseMouse()
FilteredLinkSeeAlsofocusWidget()

Entry 234
Function: FilteredFunctionvoid QWidget::releaseKeyboard()

QDoc:
/*!
    \fn void QWidget::releaseKeyboard()

    Releases the keyboard grab.

    \sa grabKeyboard(), grabMouse(), releaseMouse()
*/
void QWidget::releaseKeyboard()

Rustdoc:

Releases the keyboard grab.

**See also:** FilteredLinkSeeAlsograbKeyboard()
FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlsoreleaseMouse()

Entry 235
Function: FilteredFunctionQWidget *QWidget::mouseGrabber()

QDoc:
/*!
    \fn QWidget *QWidget::mouseGrabber()

    Returns the widget that is currently grabbing the mouse input.

    If no widget in this application is currently grabbing the mouse,
    0 is returned.

    \sa grabMouse(), keyboardGrabber()
*/
QWidget *QWidget::mouseGrabber()

Rustdoc:

Returns the widget that is currently grabbing the mouse input.

If no widget in this application is currently grabbing the mouse,
0 is returned.

**See also:** FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlsokeyboardGrabber()

Entry 236
Function: FilteredFunctionQWidget *QWidget::keyboardGrabber()

QDoc:
/*!
    \fn QWidget *QWidget::keyboardGrabber()

    Returns the widget that is currently grabbing the keyboard input.

    If no widget in this application is currently grabbing the
    keyboard, 0 is returned.

    \sa grabMouse(), mouseGrabber()
*/
QWidget *QWidget::keyboardGrabber()

Rustdoc:

Returns the widget that is currently grabbing the keyboard input.

If no widget in this application is currently grabbing the
keyboard, 0 is returned.

**See also:** FilteredLinkSeeAlsograbMouse()
FilteredLinkSeeAlsomouseGrabber()

Entry 237
Function: FilteredFunctionvoid QWidget::activateWindow()

QDoc:
/*!
    \fn void QWidget::activateWindow()

    Sets the top-level widget containing this widget to be the active
    window.

    An active window is a visible top-level window that has the
    keyboard input focus.

    This function performs the same operation as clicking the mouse on
    the title bar of a top-level window. On X11, the result depends on
    the Window Manager. If you want to ensure that the window is
    stacked on top as well you should also call raise(). Note that the
    window must be visible, otherwise activateWindow() has no effect.

    On Windows, if you are calling this when the application is not
    currently the active one then it will not make it the active
    window.  It will change the color of the taskbar entry to indicate
    that the window has changed in some way. This is because Microsoft
    does not allow an application to interrupt what the user is currently
    doing in another application.

    \sa isActiveWindow(), window(), show(), QWindowsWindowFunctions::setWindowActivationBehavior()
*/
void QWidget::activateWindow()

Rustdoc:

Sets the top-level widget containing this widget to be the active
window.

An active window is a visible top-level window that has the
keyboard input focus.

This function performs the same operation as clicking the mouse on
the title bar of a top-level window. On X11, the result depends on
the Window Manager. If you want to ensure that the window is
stacked on top as well you should also call raise(). Note that the
window must be visible, otherwise activateWindow() has no effect.

On Windows, if you are calling this when the application is not
currently the active one then it will not make it the active
window. It will change the color of the taskbar entry to indicate
that the window has changed in some way. This is because Microsoft
does not allow an application to interrupt what the user is currently
doing in another application.

**See also:** FilteredLinkSeeAlsoisActiveWindow()
FilteredLinkSeeAlsowindow()
FilteredLinkSeeAlsoshow()
FilteredLinkSeeAlsoQWindowsWindowFunctions::setWindowActivationBehavior()

Entry 238
Function: FilteredFunctionint QWidget::metric(PaintDeviceMetric m) const

QDoc:
/*!

    Internal implementation of the virtual QPaintDevice::metric()
    function.

    \a m is the metric to get.
*/
int QWidget::metric(PaintDeviceMetric m) const

Rustdoc:

Internal implementation of the virtual QPaintDevice::metric()
function.

*m* is the metric to get.

Entry 239
Function: FilteredFunctionvoid QWidget::initPainter(QPainter *painter) const

QDoc:
/*!
    Initializes the \a painter pen, background and font to the same as
    the given widget's. This function is called automatically when the
    painter is opened on a QWidget.
*/
void QWidget::initPainter(QPainter *painter) const

Rustdoc:

Initializes the *painter* pen, background and font to the same as
the given widget's. This function is called automatically when the
painter is opened on a QWidget.

Entry 240
Function: FilteredFunctionvoid QWidget::setMask(const QRegion &region)

QDoc:
/*!
    \fn void QWidget::setMask(const QRegion &region)
    \overload

    Causes only the parts of the widget which overlap \a region to be
    visible. If the region includes pixels outside the rect() of the
    widget, window system controls in that area may or may not be
    visible, depending on the platform.

    Note that this effect can be slow if the region is particularly
    complex.

    \sa windowOpacity
*/
void QWidget::setMask(const QRegion &newMask)

Rustdoc:

**Overloads** FilteredOverload
Causes only the parts of the widget which overlap *region* to be
visible. If the region includes pixels outside the rect() of the
widget, window system controls in that area may or may not be
visible, depending on the platform.

Note that this effect can be slow if the region is particularly
complex.

**See also:** FilteredLinkSeeAlsowindowOpacity

Entry 241
Function: FilteredFunctionvoid QWidget::setMask(const QBitmap &bitmap)

QDoc:
/*!
    \fn void QWidget::setMask(const QBitmap &bitmap)

    Causes only the pixels of the widget for which \a bitmap has a
    corresponding 1 bit to be visible. If the region includes pixels
    outside the rect() of the widget, window system controls in that
    area may or may not be visible, depending on the platform.

    Note that this effect can be slow if the region is particularly
    complex.

    The following code shows how an image with an alpha channel can be
    used to generate a mask for a widget:

    \snippet widget-mask/main.cpp 0

    The label shown by this code is masked using the image it contains,
    giving the appearance that an irregularly-shaped image is being drawn
    directly onto the screen.

    Masked widgets receive mouse events only on their visible
    portions.

    \sa clearMask(), windowOpacity(), {Shaped Clock Example}
*/
void QWidget::setMask(const QBitmap &bitmap)

Rustdoc:

Causes only the pixels of the widget for which *bitmap* has a
corresponding 1 bit to be visible. If the region includes pixels
outside the rect() of the widget, window system controls in that
area may or may not be visible, depending on the platform.

Note that this effect can be slow if the region is particularly
complex.

The following code shows how an image with an alpha channel can be
used to generate a mask for a widget:

The label shown by this code is masked using the image it contains,
giving the appearance that an irregularly-shaped image is being drawn
directly onto the screen.

Masked widgets receive mouse events only on their visible
portions.

**See also:** FilteredLinkSeeAlsoclearMask()
FilteredLinkSeeAlsowindowOpacity()
FilteredLinkSeeAlso{Shaped Clock Example}

Entry 242
Function: FilteredFunctionvoid QWidget::clearMask()

QDoc:
/*!
    \fn void QWidget::clearMask()

    Removes any mask set by setMask().

    \sa setMask()
*/
void QWidget::clearMask()

Rustdoc:

Removes any mask set by setMask().

**See also:** FilteredLinkSeeAlsosetMask()


